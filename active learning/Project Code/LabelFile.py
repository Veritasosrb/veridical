# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LabelFile.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from model import model as buildModelFunc
from configparser import ConfigParser


class Ui_LabelFileWindow(object):
    def setupUi(self, MainWindow, client, cur_record, curLabelIdsList):
        self.trainDataset=curLabelIdsList
        self.MainWindow1=MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.showMaximized()
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.filename_label = QtWidgets.QLabel(self.centralwidget)
        self.filename_label.setGeometry(QtCore.QRect(800, 90, 300, 100))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.filename_label.setFont(font)
        self.filename_label.setAlignment(QtCore.Qt.AlignCenter)
        self.filename_label.setObjectName("filename_label")

        self.add_btn = QtWidgets.QPushButton(self.centralwidget)
        self.add_btn.setGeometry(QtCore.QRect(860, 530, 200, 50))
        self.add_btn.setStyleSheet("background-color: rgb(88, 138, 255);")
        self.add_btn.setObjectName("add_btn")
        font = QtGui.QFont()
        font.setPointSize(17)
        self.add_btn.setFont(font)

        self.extracted_dropdown = QtWidgets.QComboBox(self.centralwidget)
        self.extracted_dropdown.setGeometry(QtCore.QRect(590, 290, 800, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.extracted_dropdown.setFont(font)
        self.extracted_dropdown.setStyleSheet("")
        self.extracted_dropdown.setObjectName("extracted_dropdown")

        self.extracted_label = QtWidgets.QLabel(self.centralwidget)
        self.extracted_label.setGeometry(QtCore.QRect(590, 250, 250, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.extracted_label.setFont(font)
        self.extracted_label.setObjectName("extracted_label")

        self.new_label = QtWidgets.QLabel(self.centralwidget)
        self.new_label.setGeometry(QtCore.QRect(590, 370, 250, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.new_label.setFont(font)
        self.new_label.setObjectName("new_label")
      
        self.newLabel_txt = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.newLabel_txt.setGeometry(QtCore.QRect(590, 410, 800, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.newLabel_txt.setFont(font)
        self.newLabel_txt.setPlainText("")
        self.newLabel_txt.setObjectName("newLabel_txt")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1068, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

        self.cur_record = cur_record
        self.displayLabel(client)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.returnData=[]
        self.add_btn.clicked.connect(self.addLabel)
    
        return self.returnData

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.filename_label.setText(_translate("MainWindow", "File Name"))
        self.add_btn.setText(_translate("MainWindow", "Add"))
        self.extracted_label.setText(_translate("MainWindow", "Extracted labels:"))
        self.new_label.setText(_translate("MainWindow", "Add new label:"))
    
    # read config file
    def displayLabel(self, client):
        db = client['AutoReview']  # database object
        self.collection_name = db['TestDataset']  # collection object
        name=self.cur_record[1].text()
        self.filename_label.setText(name)
        self.cfile='config.ini'
        self.config=ConfigParser(allow_no_value=True)
        self.config.read(self.cfile)
        print(self.config.sections())
        existing_label=list(self.config['NewsGroup'])
        self.extracted_dropdown.addItems(existing_label)
    
    # add button functionality
    def addLabel(self, client):

        l=[]
        self.previously_manual_labeled=list(self.collection_name.find({"Classification_Mode": "Manual"}))
        new_label_from_dropdown=self.extracted_dropdown.currentText()
        new_label_from_textbox = self.newLabel_txt.toPlainText()
        temp=()
        if new_label_from_textbox=="":
            self.cur_record[3].setText(new_label_from_dropdown)
            id=self.cur_record[6]
            self.collection_name.update_one({"_id": id},{"$set": {"Category": new_label_from_dropdown, "Classification_Mode":"Manual", "Status":"Labeled", "Input_to_Model": "False"}})
            self.trainDataset[list(self.collection_name.find({"_id": self.cur_record[6]}))[0]["Transformed_text"]]=new_label_from_dropdown
            self.cur_record[2].setText(list(self.collection_name.find({"_id": self.cur_record[6]}))[0]["Classification_Mode"])
        else:
            self.cur_record[3].setText(new_label_from_textbox)
            id1=self.cur_record[6]
            self.config.set('NewsGroup',new_label_from_textbox)
            with open(self.cfile,'w') as configfile:
                self.config.write(configfile)

            self.collection_name.update_one({"_id": id1},{"$set": {"Category": new_label_from_textbox , "Classification_Mode":"Manual", "Status":"Labeled", "Input_to_Model": "False"}})
            self.trainDataset[list(self.collection_name.find({"_id": self.cur_record[6]}))[0]["Transformed_text"]]=new_label_from_textbox
            self.cur_record[2].setText(list(self.collection_name.find({"_id": self.cur_record[6]}))[0]["Classification_Mode"])
        
        count = self.collection_name.find_one({"_id": "Flag"})["Count"]
        count+=1
        update_count = self.collection_name.update_one({"_id": "Flag"}, {"$set": {"Count": count}})
        print("Current count for train-test split:")
        print(count)
        countautomated = self.collection_name.find_one({"_id": "Flag"})["Count_to_Automated"]
        countautomated+=1
        update_countautomated = self.collection_name.update_one({"_id": "Flag"}, {"$set": {"Count_to_Automated": countautomated}})
        print("Current count for relabeling:")
        print(countautomated)

        self.returnData.append(self.previously_manual_labeled)
        self.returnData.append(self.trainDataset)
        self.MainWindow1.close()
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_LabelFileWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
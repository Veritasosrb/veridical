# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Homepage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QApplication, QWidget, QPushButton, QMessageBox
from RealDataset1 import Ui_RealDatasetWindow
from zipfile import ZipFile
import os
import pandas as pd
import pymongo
from pymongo import MongoClient
from nltk.corpus import stopwords
import nltk
import string
from nltk.stem.porter import PorterStemmer
from rsa import verify
import river
from river.linear_model import LogisticRegression
from river.naive_bayes import MultinomialNB
from river.feature_extraction import BagOfWords, TFIDF
from river.compose import Pipeline
import random
import pickle
import xlsxwriter
from configparser import ConfigParser

nltk.download('punkt')
nltk.download('stopwords')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.homeWindow=MainWindow
        MainWindow.showMaximized()
        MainWindow.setObjectName("MainWindow")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.homepage_label = QtWidgets.QLabel(self.centralwidget)
        self.homepage_label.setGeometry(QtCore.QRect(800, 90, 300, 100))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.homepage_label.setFont(font)
        self.homepage_label.setAlignment(QtCore.Qt.AlignCenter)
        self.homepage_label.setObjectName("homepage_label")
        
        self.uploadDataset_btn = QtWidgets.QPushButton(self.centralwidget)
        self.uploadDataset_btn.setGeometry(QtCore.QRect(640, 570, 250, 50))
        self.uploadDataset_btn.setObjectName("uploadDataset_btn")
        font = QtGui.QFont()
        font.setPointSize(15)
        self.uploadDataset_btn.setFont(font)

        self.model_btn = QtWidgets.QPushButton(self.centralwidget)
        self.model_btn.setGeometry(QtCore.QRect(900, 640, 101, 51))
        self.model_btn.setStyleSheet("background-color: rgb(110, 255, 127);")
        self.model_btn.setObjectName("model_btn")

        self.groups_6 = QtWidgets.QPushButton(self.centralwidget)
        self.groups_6.setGeometry(QtCore.QRect(830, 710, 250, 50))
        self.groups_6.setStyleSheet("background-color: rgb(88, 138, 255);")
        self.groups_6.setObjectName("groups_6")
        font = QtGui.QFont()
        font.setPointSize(15)
        self.groups_6.setFont(font)
        
        self.viewDataset_btn = QtWidgets.QPushButton(self.centralwidget)
        self.viewDataset_btn.setGeometry(QtCore.QRect(1000, 570, 250, 50))
        self.viewDataset_btn.setObjectName("viewDataset_btn")
        font = QtGui.QFont()
        font.setPointSize(15)
        self.viewDataset_btn.setFont(font)

        self.client_label = QtWidgets.QLabel(self.centralwidget)
        self.client_label.setGeometry(QtCore.QRect(715, 310, 200, 50))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.client_label.setFont(font)
        self.client_label.setObjectName("client_label")

        self.org_label = QtWidgets.QLabel(self.centralwidget)
        self.org_label.setGeometry(QtCore.QRect(715, 250, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.org_label.setFont(font)
        self.org_label.setObjectName("org_label")

        self.domain_label = QtWidgets.QLabel(self.centralwidget)
        self.domain_label.setGeometry(QtCore.QRect(715, 370, 200, 50))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.domain_label.setFont(font)
        self.domain_label.setObjectName("domain_label")

        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(715, 430, 200, 50))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
      
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1068, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.org_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.org_label_2.setGeometry(QtCore.QRect(490, 150, 0, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.org_label_2.setFont(font)
        self.org_label_2.setText("")
        self.org_label_2.setObjectName("org_label_2")
        self.client_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.client_label_2.setGeometry(QtCore.QRect(490, 210, 0, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.client_label_2.setFont(font)
        self.client_label_2.setText("")
        self.client_label_2.setObjectName("client_label_2")
        self.domain_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.domain_label_2.setGeometry(QtCore.QRect(490, 270, 0, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.domain_label_2.setFont(font)
        self.domain_label_2.setText("")
        self.domain_label_2.setObjectName("domain_label_2")
        self.title_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.title_label_2.setGeometry(QtCore.QRect(490, 330, 0, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.title_label_2.setFont(font)
        self.title_label_2.setText("")
        self.title_label_2.setObjectName("title_label_2")
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # display events
        self.getInput()
        self.buttonVisiblity()

        # button click events
        self.uploadDataset_btn.clicked.connect(self.openUploadDataset)
        self.viewDataset_btn.clicked.connect(self.openRealDataset)
        self.model_btn.clicked.connect(self.runModel)
        self.groups_6.clicked.connect(self.printResult)
    
    # mongodb atlas connection
    def get_database(self):
        # Provide the mongodb atlas url to connect python to mongodb using pymongo
        connect_string = "mongodb+srv://root:root123@cluster0.gpfxe.mongodb.net/AutoReview?retryWrites=true&w=majority"

        # Create a connection using MongoClient. You can import MongoClient or use pymongo.MongoClient
        client = pymongo.MongoClient(connect_string, connect=False)
        print("connection established")
        return client

    # to delete a field from database
    def deleteField(self):
        client = self.get_database()  # connection object
        db = client['AutoReview']  # database object
        collection_name = db['AllDocuments']  # collection object
        collection_name.update_many({}, {'$unset': {'Content':""}})
    
    # update field function
    def updateFieldValue(self):
        client = self.get_database()  # connection object
        db = client['AutoReview']  # database object
        collection_name = db['AllDocuments']  # collection object
        all_data = collection_name.find({})
        for data in all_data:
            collection_name.update_one({"_id": data["_id"]}, {"$set": {"Status": data["Category"]}})
    
    # preprocessing of text
    def PreProcessingSteps(self, text):
         ps=PorterStemmer()
         text = text.lower()
         text = nltk.word_tokenize(text)
         y = []
         for i in text:
             if i.isalnum():
                y.append(i)
         text = y[:]
         y.clear()
         for i in text:
             if i not in stopwords.words('english') and i not in string.punctuation:
                y.append(i)   
         text = y[:]
         y.clear()
         for i in text:
            y.append(ps.stem(i))   
         return " ".join(y)

   

    # processing unlabeled files from zip folder
    def ProcessUnlabeled(self, file_name_process):
        with ZipFile(file_name_process, 'r') as zip:
           print('Extracting all the files now from unlabeled dataset...')
           zip.extractall()

        file_paths=[]
        directory = os.getcwd()

        print(directory)
        file_name = os.path.split(file_name_process)  # split filepath at /
        file_name = os.path.splitext(file_name[1])  # split the filename at extension
        folder_name = file_name[0]
        print(folder_name)
        fileName = []
        # i = 1
        for root, directories, files in os.walk(directory):
            for folder in directories:
        
                if folder==folder_name:
    
                    for root1, directories1, files1 in os.walk(folder):
                        # join the two strings in order to form the full filepath.
                        for f in files1:
                            fileName.append(f)
                            filepath = os.path.join(root, folder)
                            filepath = os.path.join(filepath, f)
                            

                            filepath=filepath.replace('\\', '/')
                            file_paths.append(filepath)
        

        file_contents = []
        category_col = []
        classification_mode = []
        classification_status = []
        ids = []
        i = 1
        for file_name in file_paths:
            #try:
            file=open(file_name, errors="ignore")
            
            f = file.read().replace('\n', '')
            ids.append(i)

            file_contents.append(f)
            category_col.append("None")
            classification_mode.append("Automated")
            classification_status.append("Unlabeled")
            i+=1
            #except: print(file_name)
        df = pd.DataFrame(ids)
        df["Name"] = fileName
        df["Path"] = file_paths
        df["Category"] = category_col
        df["Classification_Mode"] = classification_mode
        df["Status"] = classification_status
        df.rename(columns = {0: '_id'}, inplace = True)
        df["Content"]=file_contents
        df["Input_to_Model"]="False"
        df = df.drop_duplicates(keep='first')
        df.duplicated().sum()
        print("Before preprocessing of text begins")
        transform_text_array=[]
        for contents in df["Content"]:
            text=self.PreProcessingSteps(contents)
            transform_text_array.append(text)
        print("Preprocessing Done")
        df["Transformed_text"]=transform_text_array
        df.drop(["Content"], axis = 1, inplace=True)
        randomdf=df.sample(frac=1)
        self.insertData(randomdf)


    # insert data into database
    def insertData(self, df):
        client=self.get_database()  # connection object
        db=client['AutoReview']     # database object
        collection_name = db['TestDataset']    # collection object
        # convert dataframe to list of dictioories
        data=df.to_dict('records')
        cur_labeled_data_flag = {"_id":"Flag", "Count": 0, "Count_to_Automated":0, "setFlag":0}
        data.append(cur_labeled_data_flag)
        # delete all records
        collection_name.delete_many({})
        print("Deleted previous records")
        # insert data
        x=collection_name.insert_many(data)
        print(x)
    
    # dialog on successful document classification 
    def showdialogrunmodel(self):
      msg = QMessageBox()
      msg.setIcon(QMessageBox.Information)
      msg.setText("All documents classified successfully!")
      msg.setWindowTitle("Document Classification Status")
      msg.exec()
   
    #Function for running the model
    def runModel(self):
        client=self.get_database()  # connection object
        db=client['AutoReview']     # database object
        myCol = db['TestDataset']    # collection object
        self.all_data = list(myCol.find({"Status":"Unlabeled"}))
        data = list()
        for x in self.all_data:
            z = (x["_id"], x["Transformed_text"])
            data.append(z)
        with open("model.txt", 'rb') as f:
            model = pickle.load(f)
        for id,text in data:
            res = model.predict_one(text)
            myCol.update_one({"_id": id}, {"$set": {"Category": res, "Classification_Mode":"Automated", "Status":"Labeled"}})
        print("All labeled")
        self.showdialogrunmodel()
    
    # dialog on successful excel sheet download
    def showdialogresult(self):
      msg = QMessageBox()
      msg.setIcon(QMessageBox.Information)
      msg.setText("Excel Sheet Downloaded!")
      msg.setWindowTitle("Excel Sheet Download Status")
      msg.exec()
    
    # creation of excel sheet
    def printResult(self):
        client = self.get_database()  # connection object
        db = client['AutoReview']  # database object
        myCol = db['TestDataset']  # collection object
        all_data = list(myCol.find({}))
        data=[]
        for item in all_data:
            if item['_id']=="Flag":
                continue
            temp=[]
            temp.append(item['Name'])
            temp.append(item['Classification_Mode'])
            temp.append(item['Category'])
            data.append(temp)
        workbook = xlsxwriter.Workbook('Result.xlsx')
        worksheet = workbook.add_worksheet("My sheet")
        row = 0
        col = 0
        worksheet.write(row, col, "Name")
        worksheet.write(row, col + 1, "Classification Mode")
        worksheet.write(row, col + 2, "Category")
        row+=1
        for name, mode, category in (data):
            worksheet.write(row, col, name)
            worksheet.write(row, col + 1, mode)
            worksheet.write(row, col + 2, category)
            row += 1
        workbook.close()
        self.showdialogresult()
    
    #dialog on successful zip folder upload
    def showdialog(self):
      msg = QMessageBox()
      msg.setIcon(QMessageBox.Information)
      msg.setText("Dataset uploaded successfully!")
      msg.setWindowTitle("Upload Comfirmation")
      msg.exec()

    # open browse zip folder
    def openUploadDataset(self):
       # self.get_database()
        file_name1 = QFileDialog.getOpenFileNames()
        if not file_name1[0]:
            return
        with ZipFile(file_name1[0][0], 'r') as zip:
           print('Extracting all the files now...')
           zip.extractall()
           print('Done!')
           file_paths=[]
        directory = os.getcwd()
        print(directory)
        file_name = os.path.split(file_name1[0][0])  # split filepath at /
        file_name = os.path.splitext(file_name[1])  # split the filename at extension
        folder_name = file_name[0]
        print(folder_name)
        fileName = []
        c=0
        # i = 1
        for root, directories, files in os.walk(directory):
            for folder in directories:
                  if folder==folder_name:
                    print(folder)
                    for root1, directories1, files1 in os.walk(folder):
                        print(directories1)
                        c=c+1
     
        self.ProcessUnlabeled(file_name1[0][0])
        self.showdialog()

    # function for button visibility
    def buttonVisiblity(self):
        client = self.get_database()  # connection object
        db = client['AutoReview']  # database object
        collection_name = db['TestDataset']  # collection object
        collection_name.update_one({"_id": "Flag"}, {"$set": {"setFlag": 0}}) # set flag=0 for the part to get previously labeled data before the current ones
        if os.path.exists("model.txt"):
            self.model_btn.hide()
            self.groups_6.show()
        else:
            self.model_btn.hide()
            self.groups_6.hide()
              
    # open RealDataset.ui
    def openRealDataset(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_RealDatasetWindow()
        self.ui.setupUi(self.window, self.get_database(), self.obj)
        print("on view dataset button")
        self.window.show()
        self.homeWindow.close()

    # get input text
    def getInput(self):

        self.cfile='config.ini'
        self.config=ConfigParser(allow_no_value=True)
        self.config.read(self.cfile)
        print(self.config.sections())
        org=self.config.get("OrgInfo","Organization")
        cli=self.config.get("OrgInfo","Client")
        do=self.config.get("OrgInfo","Domain")
        ti=self.config.get("OrgInfo","Title")
        
        font = QtGui.QFont()
        font.setPointSize(17)

        self.org_label_2.setFont(font)
        self.org_label_2.setText(org)
        self.org_label_2.setGeometry(QtCore.QRect(930+50+25, 150+100, 231,41))
    
        self.client_label_2.setFont(font)
        self.client_label_2.setText(cli)
        self.client_label_2.setGeometry(QtCore.QRect(930+50+25, 210+100, 250, 50))
        
        self.domain_label_2.setFont(font)
        self.domain_label_2.setText(do)
        self.domain_label_2.setGeometry(QtCore.QRect(930+50+25, 270+100, 231, 41))
        
        self.title_label_2.setFont(font)
        self.title_label_2.setText(ti)
        self.title_label_2.setGeometry(QtCore.QRect(930+50+25, 330+100, 231, 41))
       
    def classObj(self, ui):
        self.obj=ui
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.homepage_label.setText(_translate("MainWindow", " Home Page"))
        self.uploadDataset_btn.setText(_translate("MainWindow", "Upload Documents"))
        self.model_btn.setText(_translate("MainWindow", "Run model"))
        self.groups_6.setText(_translate("MainWindow", "Result"))
        self.viewDataset_btn.setText(_translate("MainWindow", "View Documents"))
        self.client_label.setText(_translate("MainWindow", "Client Name:"))
        self.org_label.setText(_translate("MainWindow", "Organization Name:"))
        self.domain_label.setText(_translate("MainWindow", "Domain Name:"))
        self.title_label.setText(_translate("MainWindow", "Title:"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.classObj(ui)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

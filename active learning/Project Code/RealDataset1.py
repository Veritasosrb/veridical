# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'RealDataset.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import shutil
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PdfViewer import PdfViewer
from LabelFile import Ui_LabelFileWindow
from model import model as buildModelFunc



class Ui_RealDatasetWindow(object):
    def setupUi(self, MainWindow, client, homeUI):
        self.homeUI=homeUI
        self.displayWindow=MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.showMaximized()

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(800, 90, 300, 100))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.title_label.setFont(font)
        self.title_label.setAlignment(QtCore.Qt.AlignCenter)
        self.title_label.setObjectName("title_label")
       
        self.endline = QtWidgets.QFrame(self.centralwidget)
        self.endline.setGeometry(QtCore.QRect(280, 510, 1311, 21))
        self.endline.setFrameShape(QtWidgets.QFrame.HLine)
        self.endline.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.endline.setObjectName("endline")
      
        self.home_btn = QtWidgets.QPushButton(self.centralwidget)
        self.home_btn.setGeometry(QtCore.QRect(280, 50, 250, 50))
        self.home_btn.setStyleSheet("background-color:rgb(88, 138, 255)")
        self.home_btn.setObjectName("home_btn")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.home_btn.setFont(font)

        self.filename_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.filename_label_2.setGeometry(QtCore.QRect(280, 290, 381, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.filename_label_2.setFont(font)
        self.filename_label_2.setObjectName("filename_label_2")

        self.label_classification_mode_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_classification_mode_2.setGeometry(QtCore.QRect(880, 290, 210, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_classification_mode_2.setFont(font)
        self.label_classification_mode_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_classification_mode_2.setObjectName("label_classification_mode_2")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1100, 290, 300, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")

        # search box
        self.search_txt_1 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.search_txt_1.setGeometry(QtCore.QRect(1020, 230, 211, 31))
        self.search_txt_1.setPlaceholderText("Search by name")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.search_txt_1.setFont(font)
        self.search_txt_1.setObjectName("search_txt_1")

        self.search_btn_1 = QtWidgets.QPushButton(self.centralwidget)
        self.search_btn_1.setGeometry(QtCore.QRect(1220, 230, 71, 31))
        self.search_btn_1.setStyleSheet("\n"
                                        "border-color: rgb(255, 0, 0);\n"
                                        "color: rgb(0, 0, 0);\n"
                                        "background-color: rgb(255, 255, 255);\n"
                                        "font: 75 12pt \"MS Shell Dlg 2\";")
        self.search_btn_1.setObjectName("search_btn_1")

        self.search_txt_2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.search_txt_2.setGeometry(QtCore.QRect(1330, 230, 231, 31))
        self.search_txt_2.setPlaceholderText("Search by category")
        self.search_txt_2.setObjectName("search_txt_2")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.search_txt_2.setFont(font)

        self.search_btn_2 = QtWidgets.QPushButton(self.centralwidget)
        self.search_btn_2.setGeometry(QtCore.QRect(1550, 230, 71, 31))
        self.search_btn_2.setStyleSheet("\n"
                                        "border-color: rgb(255, 0, 0);\n"
                                        "color: rgb(0, 0, 0);\n"
                                        "background-color: rgb(255, 255, 255);\n"
                                        "font: 75 12pt \"MS Shell Dlg 2\";")
        self.search_btn_2.setObjectName("search_btn_2")

        self.search_cancel_btn_1 = QtWidgets.QPushButton(self.centralwidget)
        self.search_cancel_btn_1.setGeometry(QtCore.QRect(1190, 230, 31, 31))
        self.search_cancel_btn_1.setStyleSheet("\n"
                                               "font: 75 12pt \"MS Shell Dlg 2\";")
        self.search_cancel_btn_1.setObjectName("search_cancel_btn_1")

        self.search_cancel_btn_2 = QtWidgets.QPushButton(self.centralwidget)
        self.search_cancel_btn_2.setGeometry(QtCore.QRect(1520, 230, 31, 31))
        self.search_cancel_btn_2.setStyleSheet("\n"
                                               "font: 75 12pt \"MS Shell Dlg 2\";")
        self.search_cancel_btn_2.setObjectName("search_cancel_btn_2")
        #search box ends

        # Pagination
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(640, 860, 591, 61))
        self.widget.setStyleSheet("background-color: rgb(199, 199, 199);")
        self.widget.setObjectName("widget")
        self.btn_1 = QtWidgets.QPushButton(self.widget)
        self.btn_1.setGeometry(QtCore.QRect(170, 10, 80, 41))
        self.btn_1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_1.setObjectName("btn_1")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btn_1.setFont(font)

        self.left_btn = QtWidgets.QPushButton(self.widget)
        self.left_btn.setGeometry(QtCore.QRect(90, 10, 80, 41))
        self.left_btn.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.left_btn.setObjectName("left_btn")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.left_btn.setFont(font)

        self.btn_2 = QtWidgets.QPushButton(self.widget)
        self.btn_2.setGeometry(QtCore.QRect(250, 10, 80, 41))
        self.btn_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_2.setObjectName("btn_2")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btn_2.setFont(font)

        self.btn_3 = QtWidgets.QPushButton(self.widget)
        self.btn_3.setGeometry(QtCore.QRect(330, 10, 80, 41))
        self.btn_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_3.setObjectName("btn_3")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btn_3.setFont(font)

        self.right_btn = QtWidgets.QPushButton(self.widget)
        self.right_btn.setGeometry(QtCore.QRect(410, 10, 80, 41))
        self.right_btn.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.right_btn.setObjectName("right_btn")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.right_btn.setFont(font)

        self.last_btn = QtWidgets.QPushButton(self.widget)
        self.last_btn.setGeometry(QtCore.QRect(490, 10, 80, 41))
        self.last_btn.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.last_btn.setObjectName("last_btn")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.last_btn.setFont(font)

        self.first_btn = QtWidgets.QPushButton(self.widget)
        self.first_btn.setGeometry(QtCore.QRect(15, 10, 80, 41))
        self.first_btn.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.first_btn.setObjectName("first_btn")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.first_btn.setFont(font)
        # Pagination over

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1068, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.display(client)
        # button click events
        self.objs[0][4].clicked.connect(lambda : self.openPDFViewer(self.objs[0][6]))
        self.objs[1][4].clicked.connect(lambda : self.openPDFViewer(self.objs[1][6]))
        self.objs[2][4].clicked.connect(lambda : self.openPDFViewer(self.objs[2][6]))
        self.objs[3][4].clicked.connect(lambda : self.openPDFViewer(self.objs[3][6]))
        self.objs[4][4].clicked.connect(lambda : self.openPDFViewer(self.objs[4][6]))
        self.objs[5][4].clicked.connect(lambda : self.openPDFViewer(self.objs[5][6]))
        self.objs[6][4].clicked.connect(lambda : self.openPDFViewer(self.objs[6][6]))
        self.objs[7][4].clicked.connect(lambda : self.openPDFViewer(self.objs[7][6]))
        self.objs[8][4].clicked.connect(lambda : self.openPDFViewer(self.objs[8][6]))
        self.objs[9][4].clicked.connect(lambda : self.openPDFViewer(self.objs[9][6]))


        self.objs[0][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[0]))
        self.objs[1][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[1]))
        self.objs[2][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[2]))
        self.objs[3][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[3]))
        self.objs[4][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[4]))
        self.objs[5][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[5]))
        self.objs[6][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[6]))
        self.objs[7][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[7]))
        self.objs[8][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[8]))
        self.objs[9][5].clicked.connect(lambda: self.openLabelWindow(client, self.objs[9]))

       
        self.btn_1.clicked.connect(self.changeCurPage1)
        self.btn_2.clicked.connect(self.changeCurPage2)
        self.btn_3.clicked.connect(self.changeCurPage3)

        self.right_btn.clicked.connect(self.RBtn)
        self.left_btn.clicked.connect(self.LBtn)

        self.first_btn.clicked.connect(self.firstBtn)
        self.last_btn.clicked.connect(self.lastBtn)

        self.search_btn_1.clicked.connect(self.searchByName)
        self.search_btn_2.clicked.connect(self.searchByCategory)
        self.search_cancel_btn_1.clicked.connect(self.cancelSearchByName)
        self.search_cancel_btn_2.clicked.connect(self.cancelSearchByCategory)

        
        self.home_btn.clicked.connect(self.redirectHomepage)
        # button click events over
        self.homeWindow = QtWidgets.QMainWindow()
        self.homeUI.setupUi(self.homeWindow)
       

     #redirect function to homepage
    def redirectHomepage(self):

        
        self.homeWindow.show()
        self.displayWindow.close()
        self.homeWindow.close()
        
    # open PDF viewer
    def openPDFViewer(self, id):
        #originalPath=self.all_data[id]["Path"]
        res = next((temp for temp in self.all_data if temp['_id'] == id), None)
        originalPath=res['Path']
        file_path = originalPath+".txt"     # clone of file with .txt extension
        shutil.copyfile(originalPath, file_path)    # copy the content into clone file

        # operations on clone file
        file_name=os.path.split(file_path) # split filepath at /
        file_name=os.path.splitext(file_name[1])    # split the filename at extension
        file_name=file_name[0]  # just take the filename

        PdfViewer(file_path, file_name) # call pdf viewer
        if os.path.exists(file_path):
            os.remove(file_path)    # delete dummy file

    # open label file window
    def openLabelWindow(self, client, cur_record):
        self.labelUI = QtWidgets.QMainWindow()
        self.ui = Ui_LabelFileWindow()
        self.returnedData=self.ui.setupUi(self.labelUI, client, cur_record, self.currentLabelIds)
        self.labelUI.show()
        self.trainModel(client)
        
        
    # call to model.py
    def trainModel(self, client):
        self.collection_name.update_one({"_id": "Flag"}, {"$set": {"setFlag": 0}})
        buildModelFunc(self, client, self.displayWindow, self.labelUI)
      


    # show data from database for current page no
    def pagination(self):
        self.page_no=self.cur_page_no
        self.cur_page_no-=1
        self.total_pages= int(self.data_len/10) if self.data_len%10==0 else int((self.data_len/10)+1)

        self.cur_start_page=(10*self.cur_page_no)
        self.cur_end_page=self.cur_start_page+10

        self.reqData = self.all_data[self.cur_start_page:self.cur_end_page]
        self.printData()

    # display data on screen
    def printData(self):

        if (int(self.btn_1.text())==self.page_no):
            self.btn_1.setStyleSheet("background-color: rgb(88, 138, 255);")
            self.btn_2.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.btn_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        elif (int(self.btn_2.text())==self.page_no):
            self.btn_2.setStyleSheet("background-color: rgb(88, 138, 255);")
            self.btn_1.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.btn_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        elif (int(self.btn_3.text())==self.page_no):
            self.btn_3.setStyleSheet("background-color: rgb(88, 138, 255);")
            self.btn_1.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.btn_2.setStyleSheet("background-color: rgb(255, 255, 255);")

        if self.flag==0:
            self.objs = []
            self.y_line = 310
            self.y_label = 330
            self.y_status = 330
            self.y_view = 330
            self.y_labelmode=330
            self.y_label_file = 330
            i = 1
            d = 0
            for data in self.reqData:
             if data['_id']!='Flag':
                temp=[]

                self.startline = QtWidgets.QFrame(self.centralwidget)
                self.startline.setGeometry(QtCore.QRect(300-20, self.y_line, 951+340+50, 21))
                self.startline.setFrameShape(QtWidgets.QFrame.HLine)
                self.startline.setFrameShadow(QtWidgets.QFrame.Sunken)
                temp.append(self.startline)
                
                self.filename_label = QtWidgets.QLabel(self.centralwidget)
                self.filename_label.setGeometry(300-20, self.y_label, 381, 31)
                self.filename_label.setText(data['Name'])
                font = QtGui.QFont()
                font.setPointSize(12)
                self.filename_label.setFont(font)
                temp.append(self.filename_label)
                
                self.filemode_label = QtWidgets.QLabel(self.centralwidget)
                self.filemode_label.setGeometry(680+340-140, self.y_labelmode, 181, 31)
                self.filemode_label.setAlignment(QtCore.Qt.AlignCenter)
                self.filemode_label.setText(data['Classification_Mode'])
                font = QtGui.QFont()
                font.setPointSize(12)
                self.filemode_label.setFont(font)
                temp.append(self.filemode_label)

                self.file_label = QtWidgets.QLabel(self.centralwidget)
                self.file_label.setGeometry(860+340-100, self.y_status, 300, 31)
                self.file_label.setAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setPointSize(12)
                self.file_label.setFont(font)
                if data["Status"] == "Labeled":
                    self.file_label.setText(data['Category'])
                else:
                    self.file_label.setText("None")
                temp.append(self.file_label)

                self.view_btn = QtWidgets.QPushButton(self.centralwidget)
                self.view_btn.setGeometry(QtCore.QRect(1260+150, self.y_view, 81, 31))
                self.view_btn.setText("View")
                font = QtGui.QFont()
                font.setPointSize(12)
                self.view_btn.setFont(font)
                temp.append(self.view_btn)

                self.labelfile_btn = QtWidgets.QPushButton(self.centralwidget)
                self.labelfile_btn.setGeometry(QtCore.QRect(1360+150, self.y_label_file, 110, 31))
                self.labelfile_btn.setText("Label File")
                font = QtGui.QFont()
                font.setPointSize(12)
                self.labelfile_btn.setFont(font)
                temp.append(self.labelfile_btn)

                temp.append(data["_id"])
                
                self.objs.append(temp)

                self.y_line += 50
                self.y_label += 50
                self.y_status += 50
                self.y_view += 50
                self.y_label_file += 50
                self.y_labelmode+=50
                d += 50
                i += 1
                self.flag=1
        else:
            cnt=10
            for data, x in zip(self.reqData, self.objs):
             if data['_id']!='Flag':
                cnt-=1
                x[1].setText(data['Name'])
                x[2].setText(data['Classification_Mode'])
                x[3].setText(data['Category'])
                x[0].show()
                x[1].show()
                x[2].show()
                x[3].show()
                x[4].show()
                x[5].show()

                x[6]=data['_id']
            if cnt:
                self.tempObj=self.objs[-cnt:]
                for c, x in zip(range(cnt), self.tempObj):
                    cnt-=1
                    x[0].hide()
                    x[1].hide()
                    x[2].hide()
                    x[3].hide()
                    x[4].hide()
                    x[5].hide()

        self.cur_page_no+=1

    # change cur page no to the button number clicked
    def changeCurPage1(self):
        self.cur_page_no=int(self.btn_1.text())
        self.cursor=1
        self.pagination()
    # change cur page no to the button number clicked
    def changeCurPage2(self):
        self.cur_page_no=int(self.btn_2.text())
        self.cursor = 2
        self.pagination()
    # change cur page no to the button number clicked
    def changeCurPage3(self):
        self.cur_page_no=int(self.btn_3.text())
        self.cursor = 3
        self.pagination()

    # right arrow button event
    def RBtn(self):

            if self.cursor==3 and self.cur_page_no!=self.total_pages:
                if (int(self.btn_1.text()) + 1 <= self.total_pages):
                    self.btn_1.setText(str(int(self.btn_1.text()) + 1))
                if (int(self.btn_2.text()) + 1 <= self.total_pages):
                    self.btn_2.setText(str(int(self.btn_2.text()) + 1))
                else:
                    self.btn_2.hide()
                    self.hidden[1] = True
                if (int(self.btn_3.text()) + 1 <= self.total_pages):
                    self.btn_3.setText(str(int(self.btn_3.text()) + 1))
                else:
                    self.btn_3.hide()
                    self.hidden[2] = True

            self.cursor = self.cursor+1 if self.cursor+1<=3 else self.cursor
            self.cur_page_no= self.cur_page_no+1 if self.cur_page_no + 1 <= self.total_pages else self.cur_page_no
            self.pagination()

    # left arrow button event
    def LBtn(self):

            if self.cur_page_no==self.total_pages and self.cursor<3:
                if self.cursor==1:
                    if (int(self.btn_1.text()) - 1 >= 1):
                        self.btn_1.setText(str(self.total_pages - 1))
                    self.btn_2.show()
                    self.hidden[1] = False
                    self.btn_2.setText(str(self.total_pages))

                elif self.cursor==2:
                    if (int(self.btn_1.text()) - 1 >= 1):
                        self.btn_1.setText(str(int(self.btn_1.text()) - 1))
                    if (int(self.btn_2.text()) - 1 >= 1):
                        self.btn_2.setText(str(int(self.btn_2.text()) - 1))
                    self.btn_3.show()
                    self.hidden[2] = False
                    self.btn_3.setText(str(self.total_pages))
                    self.cursor=3
                self.cur_page_no -= 1
                self.pagination()
                return

            elif self.cursor == 1 and int(self.btn_1.text())!=1:
                if (int(self.btn_1.text()) - 1 >=1):
                    self.btn_1.setText(str(int(self.btn_1.text()) - 1))
                if (int(self.btn_2.text()) - 1 >=1):
                    self.btn_2.setText(str(int(self.btn_2.text()) - 1))
               
                if (int(self.btn_3.text()) - 1 >=1):
                    if self.hidden[2]:
                        self.btn_3.show()
                        self.hidden[2]=False
                        self.btn_3.setText(str(self.total_pages))
                    else:
                        self.btn_3.setText(str(int(self.btn_3.text()) - 1))
               

            self.cursor = self.cursor - 1 if self.cursor - 1 >= 1 else self.cursor
            self.cur_page_no = self.cur_page_no - 1 if self.cur_page_no - 1 >= 1 else self.cur_page_no
            self.pagination()

    # first button event
    def firstBtn(self):
        self.cursor=1
        self.cur_page_no=1

        self.btn_1.setText("1")
        if self.total_pages>=2:
            if self.hidden[1]:
                self.btn_2.show()
                self.hidden[1] = False
            self.btn_2.setText("2")
        else:
            self.btn_2.hide()
            self.hidden[1] = True
        if self.total_pages>=3:
            if self.hidden[2]:
                self.btn_3.show()
                self.hidden[2] = False
            self.btn_3.setText("3")
        else:
            self.btn_3.hide()
            self.hidden[2] = True

        self.pagination()

    # last button event
    def lastBtn(self):
        self.cur_page_no=self.total_pages

        if self.cur_page_no%3==1:
            self.btn_1.setText(str(self.cur_page_no))
            self.btn_2.hide()
            self.hidden[1]=True
            self.btn_3.hide()
            self.hidden[2] = True
            self.cursor=1
        elif self.cur_page_no%3==2:
            self.btn_1.setText(str(self.cur_page_no-1))
            self.btn_2.setText(str(self.cur_page_no))
            self.btn_3.hide()
            self.hidden[2] = True
            self.cursor=2
        elif self.cur_page_no%3==0:
            self.btn_1.setText(str(self.cur_page_no - 2))
            self.btn_2.setText(str(self.cur_page_no-1))
            self.btn_3.setText(str(self.cur_page_no))
            self.cursor=3

        self.pagination()

    # dynamic display of data from database
    def display(self, client):
        print("in display")
        db = client['AutoReview']  # database object
        self.collection_name = db['TestDataset']  # collection object

        info_collection_name = db['OrgInfo']
        name=info_collection_name.find_one({})
        self.title_label.setText(name["Title"])

        self.all_data = list(self.collection_name.find({}))
        self.data_len = self.collection_name.count_documents({})
    
        self.flag=0
        self.hidden = [False, False, False]
        self.currentLabelIds={}
        self.cur_page_no = 1
        self.cursor=1
        self.searchBy = [0, 0]
        self.btn_1.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.pagination()

    # search records by name
    def searchByName(self):
        self.searchBy[0]=1
        self.searchName=self.search_txt_1.toPlainText()
        if self.searchBy[1]:
            self.all_data = list(self.collection_name.find({"Name": self.searchName, "Category":self.searchCategory}))
            self.data_len = self.collection_name.count_documents({"Name": self.searchName, "Category":self.searchCategory})
        else:
            self.all_data = list(self.collection_name.find({"Name":self.searchName}))
            self.data_len = self.collection_name.count_documents({"Name":self.searchName})
        self.cur_page_no = 1
        self.cursor = 1

        self.total_pages = int(self.data_len / 10) if self.data_len % 10 == 0 else int((self.data_len / 10) + 1)

        self.btn_1.setText("1")
        if self.total_pages >= 2:
            if self.hidden[1]:
                self.btn_2.show()
                self.hidden[1] = False
            self.btn_2.setText("2")
        else:
            self.btn_2.hide()
            self.hidden[1] = True
        if self.total_pages >= 3:
            if self.hidden[2]:
                self.btn_3.show()
                self.hidden[2] = False
            self.btn_3.setText("3")
        else:
            self.btn_3.hide()
            self.hidden[2] = True

        self.page_no = self.cur_page_no
        self.cur_page_no -= 1
        self.cur_start_page = (10 * self.cur_page_no)
        self.cur_end_page = self.cur_start_page + 10

        self.reqData = self.all_data[self.cur_start_page:self.cur_end_page]

        self.printData()

    # clear search records by name
    def cancelSearchByName(self):
        self.searchBy[0]=0
        self.search_txt_1.setPlainText("")
        if self.searchBy[1]:
            self.all_data = list(self.collection_name.find({"Category":self.searchCategory}))
            self.data_len = self.collection_name.count_documents({"Category":self.searchCategory})
        else:
            self.all_data = list(self.collection_name.find({}))
            self.data_len = self.collection_name.count_documents({})
        self.cur_page_no = 1
        self.cursor = 1
        self.total_pages = int(self.data_len / 10) if self.data_len % 10 == 0 else int((self.data_len / 10) + 1)

        self.btn_1.setText("1")
        if self.total_pages >= 2:
            if self.hidden[1]:
                self.btn_2.show()
                self.hidden[1] = False
            self.btn_2.setText("2")
        else:
            self.btn_2.hide()
            self.hidden[1] = True
        if self.total_pages >= 3:
            if self.hidden[2]:
                self.btn_3.show()
                self.hidden[2] = False
            self.btn_3.setText("3")
        else:
            self.btn_3.hide()
            self.hidden[2] = True

        self.page_no = self.cur_page_no
        self.cur_page_no -= 1
        self.cur_start_page = (10 * self.cur_page_no)
        self.cur_end_page = self.cur_start_page + 10

        self.reqData = self.all_data[self.cur_start_page:self.cur_end_page]

        self.printData()

    # search records by category
    def searchByCategory(self):
        self.searchBy[1] = 1
        self.searchCategory = self.search_txt_2.toPlainText()
        query = {"_id": {"$ne":"Flag"}, "Category": {"$ne": self.searchCategory}}
        remaining_data = list(self.collection_name.find(query).sort("Category"))
       

        if self.searchBy[0]:
            self.all_data = list(self.collection_name.find({"Name": self.searchName, "Category": self.searchCategory}))
            self.data_len = self.collection_name.count_documents(
                {"Name": self.searchName, "Category": self.searchCategory})
        else:
            self.all_data = list(self.collection_name.find({"Category": self.searchCategory}))
            self.data_len = self.collection_name.count_documents({"Category": self.searchCategory})

    
        self.all_data=self.all_data+remaining_data
        self.data_len = len(self.all_data)
        self.cur_page_no = 1
        self.cursor = 1

        self.total_pages = int(self.data_len / 10) if self.data_len % 10 == 0 else int((self.data_len / 10) + 1)

        self.btn_1.setText("1")
        if self.total_pages >= 2:
            if self.hidden[1]:
                self.btn_2.show()
                self.hidden[1] = False
            self.btn_2.setText("2")
        else:
            self.btn_2.hide()
            self.hidden[1] = True
        if self.total_pages >= 3:
            if self.hidden[2]:
                self.btn_3.show()
                self.hidden[2] = False
            self.btn_3.setText("3")
        else:
            self.btn_3.hide()
            self.hidden[2] = True

        self.page_no = self.cur_page_no
        self.cur_page_no -= 1
        self.cur_start_page = (10 * self.cur_page_no)
        self.cur_end_page = self.cur_start_page + 10

        self.reqData=self.all_data
        self.printData()

    # clear search records by catgory
    def cancelSearchByCategory(self):
        self.searchBy[1]=0
        self.search_txt_2.setPlainText("")
        if self.searchBy[0]:
            self.all_data = list(self.collection_name.find({"Name": self.searchName}))
            self.data_len = self.collection_name.count_documents({"Name": self.searchName})
        else:
            self.all_data = list(self.collection_name.find({}))
            self.data_len = self.collection_name.count_documents({})
        self.cur_page_no = 1
        self.cursor = 1

        self.total_pages = int(self.data_len / 10) if self.data_len % 10 == 0 else int((self.data_len / 10) + 1)

        self.btn_1.setText("1")
        if self.total_pages >= 2:
            if self.hidden[1]:
                self.btn_2.show()
                self.hidden[1] = False
            self.btn_2.setText("2")
        else:
            self.btn_2.hide()
            self.hidden[1] = True
        if self.total_pages >= 3:
            if self.hidden[2]:
                self.btn_3.show()
                self.hidden[2] = False
            self.btn_3.setText("3")
        else:
            self.btn_3.hide()
            self.hidden[2] = True

        self.page_no = self.cur_page_no
        self.cur_page_no -= 1
        self.cur_start_page = (10 * self.cur_page_no)
        self.cur_end_page = self.cur_start_page + 10

        self.reqData = self.all_data[self.cur_start_page:self.cur_end_page]

        self.printData()

        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.title_label.setText(_translate("MainWindow", "Title"))
        self.btn_1.setText(_translate("MainWindow", "1"))
        self.left_btn.setText(_translate("MainWindow", "<"))
        self.btn_2.setText(_translate("MainWindow", "2"))
        self.btn_3.setText(_translate("MainWindow", "3"))
        self.right_btn.setText(_translate("MainWindow", ">"))
        self.last_btn.setText(_translate("MainWindow", "LAST"))
        self.first_btn.setText(_translate("MainWindow", "FIRST"))
        self.search_btn_1.setText(_translate("MainWindow", "search"))
        self.search_btn_2.setText(_translate("MainWindow", "search"))
        self.search_cancel_btn_1.setText(_translate("MainWindow", "X"))
        self.search_cancel_btn_2.setText(_translate("MainWindow", "X"))
        self.home_btn.setText(_translate("MainWindow", "Back to Home Page"))
        self.filename_label_2.setText(_translate("MainWindow", "File Name"))
        self.label_classification_mode_2.setText(_translate("MainWindow", "Classification Mode"))
        self.label_2.setText(_translate("MainWindow", "Category"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_RealDatasetWindow()
    ui.classObj(ui)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())



"Test case ID","User Story","Keys of sentence","Sentence analysis","Basic Dependencies","Enhanced Dependencies","Enhanced Plus Plus dependencies","Sentiment"
"CORTEX","If User is subscribed to alerts for any Appliance_type Then it receives first email notification in time greater than equal to 15 minutes from subscription Else does not receives any email notification. Email consist of email_header, email_body, appliance_details. User receives second notification at time greater than time_set during subscribing the alert.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If User is subscribed to alerts for any Appliance_type Then it receives first email notification in time greater than equal to 15 minutes from subscription Else does not receives any email notification. CharacterOffsetBegin=0 CharacterOffsetEnd=202 Tokens=[If-1, User-2, is-3, subscribed-4, to-5, alerts-6, for-7, any-8, Appliance_type-9, Then-10, it-11, receives-12, first-13, email-14, notification-15, in-16, time-17, greater-18, than-19, equal-20, to-21, 15-22, minutes-23, from-24, subscription-25, Else-26, does-27, not-28, receives-29, any-30, email-31, notification-32, .-33] SentenceIndex=0 TokenBegin=0 TokenEnd=33 Mentions=[first, 15 minutes] CollapsedDependencies=-> receives/VBZ (root)
  -> receives/VBZ (dep)
    -> subscribed/VBN (advcl)
      -> If/IN (mark)
      -> User/NN (nsubjpass)
      -> is/VBZ (auxpass)
      -> alerts/VBZ (xcomp)
        -> to/TO (mark)
        -> Appliance_type/NN (nmod:for)
          -> for/IN (case)
          -> any/DT (det)
    -> Then/RB (advmod)
    -> it/PRP (nsubj)
    -> does/VBZ (ccomp)
      -> notification/NN (nsubj)
        -> first/JJ (amod)
        -> email/NN (compound)
        -> time/NN (nmod:in)
          -> in/IN (case)
          -> equal/JJ (amod)
            -> greater/JJR (dep)
            -> than/IN (dep)
          -> minutes/NNS (nmod:to)
            -> to/TO (case)
            -> 15/CD (nummod)
            -> subscription/NN (nmod:from)
              -> from/IN (case)
              -> Else/RB (advmod)
      -> not/RB (neg)
  -> notification/NN (nsubj)
    -> any/DT (det)
    -> email/NN (compound)
  -> ./. (punct)
 BasicDependencies=-> receives/VBZ (root)
  -> receives/VBZ (dep)
    -> subscribed/VBN (advcl)
      -> If/IN (mark)
      -> User/NN (nsubjpass)
      -> is/VBZ (auxpass)
      -> alerts/VBZ (xcomp)
        -> to/TO (mark)
        -> Appliance_type/NN (nmod)
          -> for/IN (case)
          -> any/DT (det)
    -> Then/RB (advmod)
    -> it/PRP (nsubj)
    -> does/VBZ (ccomp)
      -> notification/NN (nsubj)
        -> first/JJ (amod)
        -> email/NN (compound)
        -> time/NN (nmod)
          -> in/IN (case)
          -> equal/JJ (amod)
            -> greater/JJR (dep)
            -> than/IN (dep)
          -> minutes/NNS (nmod)
            -> to/TO (case)
            -> 15/CD (nummod)
            -> subscription/NN (nmod)
              -> from/IN (case)
              -> Else/RB (advmod)
      -> not/RB (neg)
  -> notification/NN (nsubj)
    -> any/DT (det)
    -> email/NN (compound)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> receives/VBZ (root)
  -> receives/VBZ (dep)
    -> subscribed/VBN (advcl)
      -> If/IN (mark)
      -> User/NN (nsubjpass)
      -> is/VBZ (auxpass)
      -> alerts/VBZ (xcomp)
        -> to/TO (mark)
        -> Appliance_type/NN (nmod:for)
          -> for/IN (case)
          -> any/DT (det)
    -> Then/RB (advmod)
    -> it/PRP (nsubj)
    -> does/VBZ (ccomp)
      -> notification/NN (nsubj)
        -> first/JJ (amod)
        -> email/NN (compound)
        -> time/NN (nmod:in)
          -> in/IN (case)
          -> equal/JJ (amod)
            -> greater/JJR (dep)
            -> than/IN (dep)
          -> minutes/NNS (nmod:to)
            -> to/TO (case)
            -> 15/CD (nummod)
            -> subscription/NN (nmod:from)
              -> from/IN (case)
              -> Else/RB (advmod)
      -> not/RB (neg)
  -> notification/NN (nsubj)
    -> any/DT (det)
    -> email/NN (compound)
  -> ./. (punct)
 EnhancedDependencies=-> receives/VBZ (root)
  -> receives/VBZ (dep)
    -> subscribed/VBN (advcl:if)
      -> If/IN (mark)
      -> User/NN (nsubjpass)
      -> is/VBZ (auxpass)
      -> alerts/VBZ (xcomp)
        -> User/NN (nsubj:xsubj)
        -> to/TO (mark)
        -> Appliance_type/NN (nmod:for)
          -> for/IN (case)
          -> any/DT (det)
    -> Then/RB (advmod)
    -> it/PRP (nsubj)
    -> does/VBZ (ccomp)
      -> notification/NN (nsubj)
        -> first/JJ (amod)
        -> email/NN (compound)
        -> time/NN (nmod:in)
          -> in/IN (case)
          -> equal/JJ (amod)
            -> greater/JJR (dep)
            -> than/IN (dep)
          -> minutes/NNS (nmod:to)
            -> to/TO (case)
            -> 15/CD (nummod)
            -> subscription/NN (nmod:from)
              -> from/IN (case)
              -> Else/RB (advmod)
      -> not/RB (neg)
  -> notification/NN (nsubj)
    -> any/DT (det)
    -> email/NN (compound)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> receives/VBZ (root)
  -> receives/VBZ (dep)
    -> subscribed/VBN (advcl:if)
      -> If/IN (mark)
      -> User/NN (nsubjpass)
      -> is/VBZ (auxpass)
      -> alerts/VBZ (xcomp)
        -> User/NN (nsubj:xsubj)
        -> to/TO (mark)
        -> Appliance_type/NN (nmod:for)
          -> for/IN (case)
          -> any/DT (det)
    -> Then/RB (advmod)
    -> it/PRP (nsubj)
    -> does/VBZ (ccomp)
      -> notification/NN (nsubj)
        -> first/JJ (amod)
        -> email/NN (compound)
        -> time/NN (nmod:in)
          -> in/IN (case)
          -> equal/JJ (amod)
            -> greater/JJR (dep)
            -> than/IN (dep)
          -> minutes/NNS (nmod:to)
            -> to/TO (case)
            -> 15/CD (nummod)
            -> subscription/NN (nmod:from)
              -> from/IN (case)
              -> Else/RB (advmod)
      -> not/RB (neg)
  -> notification/NN (nsubj)
    -> any/DT (det)
    -> email/NN (compound)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (SINV (S (SBAR (IN If) (S (NP (NN User)) (VP (VBZ is) (VP (VBN subscribed) (S (VP (TO to) (VP (VBZ alerts) (PP (IN for) (NP (DT any) (NN Appliance_type)))))))))) (ADVP (RB Then)) (NP (PRP it)) (VP (VBZ receives) (SBAR (S (NP (NP (JJ first) (NN email) (NN notification)) (PP (IN in) (NP (NP (NN time)) (ADJP (JJR greater) (IN than) (JJ equal)) (PP (TO to) (NP (NP (CD 15) (NNS minutes)) (PP (IN from) (NP (NN subscription) (RB Else)))))))) (VP (VBZ does) (RB not)))))) (VP (VBZ receives)) (NP (DT any) (NN email) (NN notification)) (. .))) BinarizedTree=(ROOT (SINV (S (SBAR (IN If) (S (NP (NN User)) (VP (VBZ is) (VP (VBN subscribed) (S (VP (TO to) (VP (VBZ alerts) (PP (IN for) (NP (DT any) (NN Appliance_type)))))))))) (@S (ADVP (RB Then)) (@S (NP (PRP it)) (VP (VBZ receives) (SBAR (S (NP (NP (JJ first) (@NP (NN email) (NN notification))) (PP (IN in) (NP (@NP (NP (NN time)) (ADJP (JJR greater) (@ADJP (IN than) (JJ equal)))) (PP (TO to) (NP (NP (CD 15) (NNS minutes)) (PP (IN from) (NP (NN subscription) (RB Else)))))))) (VP (VBZ does) (RB not)))))))) (@SINV (@SINV (VP (VBZ receives)) (NP (DT any) (@NP (NN email) (NN notification)))) (. .)))) CorefMentions=[first, 15 minutes, User, any Appliance_type, it, first email notification in time greater than equal to 15 minutes from subscription Else, time greater than equal to 15 minutes from subscription Else, subscription Else, any email notification] AlternativeDependencies=-> receives/VBZ (root)
  -> receives/VBZ (dep)
    -> subscribed/VBN (advcl)
      -> If/IN (mark)
      -> User/NN (nsubjpass)
      -> is/VBZ (auxpass)
      -> alerts/VBZ (xcomp)
        -> to/TO (aux)
        -> Appliance_type/NN (prep_for)
          -> any/DT (det)
    -> Then/RB (advmod)
    -> it/PRP (nsubj)
    -> does/VBZ (ccomp)
      -> notification/NN (nsubj)
        -> first/JJ (amod)
        -> email/NN (nn)
        -> time/NN (prep_in)
          -> equal/JJ (amod)
            -> greater/JJR (dep)
            -> than/IN (dep)
          -> minutes/NNS (prep_to)
            -> 15/CD (num)
            -> subscription/NN (prep_from)
              -> Else/RB (advmod)
      -> not/RB (neg)
  -> notification/NN (nsubj)
    -> any/DT (det)
    -> email/NN (nn)
 SentimentAnnotatedTree=(ROOT (S (SBAR (IN If) (S (NP User) (VP (VBZ is) (VP (VBN subscribed) (S (TO to) (VP (VBZ alerts) (PP (IN for) (NP (DT any) (NN Appliance_type))))))))) (@S (ADVP Then) (@S (NP it) (VP (VBZ receives) (SBAR (NP (NP (JJ first) (@NP (NN email) (NN notification))) (PP (IN in) (NP (@NP (NP time) (ADJP (JJR greater) (@ADJP (IN than) (JJ equal)))) (PP (TO to) (NP (NP (CD 15) (NNS minutes)) (PP (IN from) (NP (NN subscription) (RB Else)))))))) (VP (VBZ does) (RB not))))))) (@SINV (@SINV (VP receives) (NP (DT any) (@NP (NN email) (NN notification)))) (. .))) SentimentClass=Negative]","root(ROOT-0, receives-29)
mark(subscribed-4, If-1)
nsubjpass(subscribed-4, User-2)
auxpass(subscribed-4, is-3)
advcl(receives-12, subscribed-4)
mark(alerts-6, to-5)
xcomp(subscribed-4, alerts-6)
case(Appliance_type-9, for-7)
det(Appliance_type-9, any-8)
nmod(alerts-6, Appliance_type-9)
advmod(receives-12, Then-10)
nsubj(receives-12, it-11)
dep(receives-29, receives-12)
amod(notification-15, first-13)
compound(notification-15, email-14)
nsubj(does-27, notification-15)
case(time-17, in-16)
nmod(notification-15, time-17)
dep(equal-20, greater-18)
dep(equal-20, than-19)
amod(time-17, equal-20)
case(minutes-23, to-21)
nummod(minutes-23, 15-22)
nmod(time-17, minutes-23)
case(subscription-25, from-24)
nmod(minutes-23, subscription-25)
advmod(subscription-25, Else-26)
ccomp(receives-12, does-27)
neg(does-27, not-28)
det(notification-32, any-30)
compound(notification-32, email-31)
nsubj(receives-29, notification-32)
punct(receives-29, .-33)
","root(ROOT-0, receives-29)
mark(subscribed-4, If-1)
nsubjpass(subscribed-4, User-2)
nsubj:xsubj(alerts-6, User-2)
auxpass(subscribed-4, is-3)
advcl:if(receives-12, subscribed-4)
mark(alerts-6, to-5)
xcomp(subscribed-4, alerts-6)
case(Appliance_type-9, for-7)
det(Appliance_type-9, any-8)
nmod:for(alerts-6, Appliance_type-9)
advmod(receives-12, Then-10)
nsubj(receives-12, it-11)
dep(receives-29, receives-12)
amod(notification-15, first-13)
compound(notification-15, email-14)
nsubj(does-27, notification-15)
case(time-17, in-16)
nmod:in(notification-15, time-17)
dep(equal-20, greater-18)
dep(equal-20, than-19)
amod(time-17, equal-20)
case(minutes-23, to-21)
nummod(minutes-23, 15-22)
nmod:to(time-17, minutes-23)
case(subscription-25, from-24)
nmod:from(minutes-23, subscription-25)
advmod(subscription-25, Else-26)
ccomp(receives-12, does-27)
neg(does-27, not-28)
det(notification-32, any-30)
compound(notification-32, email-31)
nsubj(receives-29, notification-32)
punct(receives-29, .-33)
","root(ROOT-0, receives-29)
mark(subscribed-4, If-1)
nsubjpass(subscribed-4, User-2)
nsubj:xsubj(alerts-6, User-2)
auxpass(subscribed-4, is-3)
advcl:if(receives-12, subscribed-4)
mark(alerts-6, to-5)
xcomp(subscribed-4, alerts-6)
case(Appliance_type-9, for-7)
det(Appliance_type-9, any-8)
nmod:for(alerts-6, Appliance_type-9)
advmod(receives-12, Then-10)
nsubj(receives-12, it-11)
dep(receives-29, receives-12)
amod(notification-15, first-13)
compound(notification-15, email-14)
nsubj(does-27, notification-15)
case(time-17, in-16)
nmod:in(notification-15, time-17)
dep(equal-20, greater-18)
dep(equal-20, than-19)
amod(time-17, equal-20)
case(minutes-23, to-21)
nummod(minutes-23, 15-22)
nmod:to(time-17, minutes-23)
case(subscription-25, from-24)
nmod:from(minutes-23, subscription-25)
advmod(subscription-25, Else-26)
ccomp(receives-12, does-27)
neg(does-27, not-28)
det(notification-32, any-30)
compound(notification-32, email-31)
nsubj(receives-29, notification-32)
punct(receives-29, .-33)
","Negative"
"CORTEX","If User is subscribed to alerts for any Appliance_type Then it receives first email notification in time greater than equal to 15 minutes from subscription Else does not receives any email notification. Email consist of email_header, email_body, appliance_details. User receives second notification at time greater than time_set during subscribing the alert.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=Email consist of email_header, email_body, appliance_details. CharacterOffsetBegin=203 CharacterOffsetEnd=264 Tokens=[Email-1, consist-2, of-3, email_header-4, ,-5, email_body-6, ,-7, appliance_details-8, .-9] SentenceIndex=1 TokenBegin=33 TokenEnd=42 Mentions=[] CollapsedDependencies=-> consist/VBP (root)
  -> Email/VB (csubj)
  -> email_header/NN (nmod:of)
    -> of/IN (case)
    -> ,/, (punct)
    -> email_body/NN (appos)
      -> ,/, (punct)
      -> appliance_details/NNS (appos)
  -> ./. (punct)
 BasicDependencies=-> consist/VBP (root)
  -> Email/VB (csubj)
  -> email_header/NN (nmod)
    -> of/IN (case)
    -> ,/, (punct)
    -> email_body/NN (appos)
      -> ,/, (punct)
      -> appliance_details/NNS (appos)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> consist/VBP (root)
  -> Email/VB (csubj)
  -> email_header/NN (nmod:of)
    -> of/IN (case)
    -> ,/, (punct)
    -> email_body/NN (appos)
      -> ,/, (punct)
      -> appliance_details/NNS (appos)
  -> ./. (punct)
 EnhancedDependencies=-> consist/VBP (root)
  -> Email/VB (csubj)
  -> email_header/NN (nmod:of)
    -> of/IN (case)
    -> ,/, (punct)
    -> email_body/NN (appos)
      -> ,/, (punct)
      -> appliance_details/NNS (appos)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> consist/VBP (root)
  -> Email/VB (csubj)
  -> email_header/NN (nmod:of)
    -> of/IN (case)
    -> ,/, (punct)
    -> email_body/NN (appos)
      -> ,/, (punct)
      -> appliance_details/NNS (appos)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (S (VP (VB Email))) (VP (VBP consist) (PP (IN of) (NP (NP (NN email_header)) (, ,) (NP (NP (NN email_body)) (, ,) (NP (NNS appliance_details)))))) (. .))) BinarizedTree=(ROOT (S (S (VP (VB Email))) (@S (VP (VBP consist) (PP (IN of) (NP (@NP (NP (NN email_header)) (, ,)) (NP (@NP (NP (NN email_body)) (, ,)) (NP (NNS appliance_details)))))) (. .)))) CorefMentions=[email_header , email_body , appliance_details, email_body , appliance_details, appliance_details] AlternativeDependencies=-> consist/VBP (root)
  -> Email/VB (csubj)
  -> email_header/NN (prep_of)
    -> email_body/NN (appos)
      -> appliance_details/NNS (appos)
 SentimentAnnotatedTree=(ROOT (S Email) (@S (VP (VBP consist) (PP (IN of) (NP (@NP (NP email_header) (, ,)) (NP (@NP (NP email_body) (, ,)) (NP appliance_details))))) (. .))) SentimentClass=Negative]","root(ROOT-0, consist-2)
csubj(consist-2, Email-1)
case(email_header-4, of-3)
nmod(consist-2, email_header-4)
punct(email_header-4, ,-5)
appos(email_header-4, email_body-6)
punct(email_body-6, ,-7)
appos(email_body-6, appliance_details-8)
punct(consist-2, .-9)
","root(ROOT-0, consist-2)
csubj(consist-2, Email-1)
case(email_header-4, of-3)
nmod:of(consist-2, email_header-4)
punct(email_header-4, ,-5)
appos(email_header-4, email_body-6)
punct(email_body-6, ,-7)
appos(email_body-6, appliance_details-8)
punct(consist-2, .-9)
","root(ROOT-0, consist-2)
csubj(consist-2, Email-1)
case(email_header-4, of-3)
nmod:of(consist-2, email_header-4)
punct(email_header-4, ,-5)
appos(email_header-4, email_body-6)
punct(email_body-6, ,-7)
appos(email_body-6, appliance_details-8)
punct(consist-2, .-9)
","Negative"
"CORTEX","If User is subscribed to alerts for any Appliance_type Then it receives first email notification in time greater than equal to 15 minutes from subscription Else does not receives any email notification. Email consist of email_header, email_body, appliance_details. User receives second notification at time greater than time_set during subscribing the alert.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User receives second notification at time greater than time_set during subscribing the alert. CharacterOffsetBegin=265 CharacterOffsetEnd=358 Tokens=[User-1, receives-2, second-3, notification-4, at-5, time-6, greater-7, than-8, time_set-9, during-10, subscribing-11, the-12, alert-13, .-14] SentenceIndex=2 TokenBegin=42 TokenEnd=56 Mentions=[second] CollapsedDependencies=-> receives/VBZ (root)
  -> User/NN (nsubj)
  -> notification/NN (dobj)
    -> second/JJ (amod)
  -> time/NN (nmod:at)
    -> at/IN (case)
    -> time_set/JJ (amod)
      -> greater/JJR (dep)
      -> than/IN (dep)
  -> subscribing/VBG (advcl)
    -> during/IN (mark)
    -> alert/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 BasicDependencies=-> receives/VBZ (root)
  -> User/NN (nsubj)
  -> notification/NN (dobj)
    -> second/JJ (amod)
  -> time/NN (nmod)
    -> at/IN (case)
    -> time_set/JJ (amod)
      -> greater/JJR (dep)
      -> than/IN (dep)
  -> subscribing/VBG (advcl)
    -> during/IN (mark)
    -> alert/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> receives/VBZ (root)
  -> User/NN (nsubj)
  -> notification/NN (dobj)
    -> second/JJ (amod)
  -> time/NN (nmod:at)
    -> at/IN (case)
    -> time_set/JJ (amod)
      -> greater/JJR (dep)
      -> than/IN (dep)
  -> subscribing/VBG (advcl)
    -> during/IN (mark)
    -> alert/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 EnhancedDependencies=-> receives/VBZ (root)
  -> User/NN (nsubj)
  -> notification/NN (dobj)
    -> second/JJ (amod)
  -> time/NN (nmod:at)
    -> at/IN (case)
    -> time_set/JJ (amod)
      -> greater/JJR (dep)
      -> than/IN (dep)
  -> subscribing/VBG (advcl:during)
    -> during/IN (mark)
    -> alert/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> receives/VBZ (root)
  -> User/NN (nsubj)
  -> notification/NN (dobj)
    -> second/JJ (amod)
  -> time/NN (nmod:at)
    -> at/IN (case)
    -> time_set/JJ (amod)
      -> greater/JJR (dep)
      -> than/IN (dep)
  -> subscribing/VBG (advcl:during)
    -> during/IN (mark)
    -> alert/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN User)) (VP (VBZ receives) (NP (JJ second) (NN notification)) (PP (IN at) (NP (NP (NN time)) (ADJP (JJR greater) (IN than) (JJ time_set)))) (PP (IN during) (S (VP (VBG subscribing) (NP (DT the) (NN alert)))))) (. .))) BinarizedTree=(ROOT (S (NP (NN User)) (@S (VP (@VP (@VP (VBZ receives) (NP (JJ second) (NN notification))) (PP (IN at) (NP (NP (NN time)) (ADJP (JJR greater) (@ADJP (IN than) (JJ time_set)))))) (PP (IN during) (S (VP (VBG subscribing) (NP (DT the) (NN alert)))))) (. .)))) CorefMentions=[second, time greater than time_set, the alert, User, second notification] AlternativeDependencies=-> receives/VBZ (root)
  -> User/NN (nsubj)
  -> notification/NN (dobj)
    -> second/JJ (amod)
  -> time/NN (prep_at)
    -> time_set/JJ (amod)
      -> greater/JJR (dep)
      -> than/IN (dep)
  -> subscribing/VBG (prepc_during)
    -> alert/NN (dobj)
      -> the/DT (det)
 SentimentAnnotatedTree=(ROOT (NP User) (@S (VP (@VP (@VP (VBZ receives) (NP (JJ second) (NN notification))) (PP (IN at) (NP (NP time) (ADJP (JJR greater) (@ADJP (IN than) (JJ time_set)))))) (PP (IN during) (S (VBG subscribing) (NP (DT the) (NN alert))))) (. .))) SentimentClass=Negative]","root(ROOT-0, receives-2)
nsubj(receives-2, User-1)
amod(notification-4, second-3)
dobj(receives-2, notification-4)
case(time-6, at-5)
nmod(receives-2, time-6)
dep(time_set-9, greater-7)
dep(time_set-9, than-8)
amod(time-6, time_set-9)
mark(subscribing-11, during-10)
advcl(receives-2, subscribing-11)
det(alert-13, the-12)
dobj(subscribing-11, alert-13)
punct(receives-2, .-14)
","root(ROOT-0, receives-2)
nsubj(receives-2, User-1)
amod(notification-4, second-3)
dobj(receives-2, notification-4)
case(time-6, at-5)
nmod:at(receives-2, time-6)
dep(time_set-9, greater-7)
dep(time_set-9, than-8)
amod(time-6, time_set-9)
mark(subscribing-11, during-10)
advcl:during(receives-2, subscribing-11)
det(alert-13, the-12)
dobj(subscribing-11, alert-13)
punct(receives-2, .-14)
","root(ROOT-0, receives-2)
nsubj(receives-2, User-1)
amod(notification-4, second-3)
dobj(receives-2, notification-4)
case(time-6, at-5)
nmod:at(receives-2, time-6)
dep(time_set-9, greater-7)
dep(time_set-9, than-8)
amod(time-6, time_set-9)
mark(subscribing-11, during-10)
advcl:during(receives-2, subscribing-11)
det(alert-13, the-12)
dobj(subscribing-11, alert-13)
punct(receives-2, .-14)
","Negative"

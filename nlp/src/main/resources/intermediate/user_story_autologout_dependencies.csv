"Test case ID","User Story","Keys of sentence","Sentence analysis","Basic Dependencies","Enhanced Dependencies","Enhanced Plus Plus dependencies","Sentiment"
"CORTEX","User logins to the webpage. If user stays in Application and does not do any operation for a specific period in any tab Then each tab will report inactivity timeout around the same time, Else customer resumes activity in any tab each tab will be refreshed with the latest operation timestamp. Inactivity timeout trigger will put a popup which says your session will be expired due to inactivity in next Netinsights-timeout-grace-period seconds. If user performs any operation in Netinsights-timeout-grace-period seconds after inactivity timeout comes out Then activity will be performed according to operation selected by user, Else automatically log offs. If user clicks logout in inactivity timeout Then user will log off, Else if customer clicks Continue, will be closed and Netinsights-last-activity-timestamp will be refreshed to be the current timestamp","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User logins to the webpage. CharacterOffsetBegin=0 CharacterOffsetEnd=27 Tokens=[User-1, logins-2, to-3, the-4, webpage-5, .-6] SentenceIndex=0 TokenBegin=0 TokenEnd=6 Mentions=[] CollapsedDependencies=-> logins/NNS (root)
  -> User/NN (compound)
  -> webpage/NN (nmod:to)
    -> to/TO (case)
    -> the/DT (det)
  -> ./. (punct)
 BasicDependencies=-> logins/NNS (root)
  -> User/NN (compound)
  -> webpage/NN (nmod)
    -> to/TO (case)
    -> the/DT (det)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> logins/NNS (root)
  -> User/NN (compound)
  -> webpage/NN (nmod:to)
    -> to/TO (case)
    -> the/DT (det)
  -> ./. (punct)
 EnhancedDependencies=-> logins/NNS (root)
  -> User/NN (compound)
  -> webpage/NN (nmod:to)
    -> to/TO (case)
    -> the/DT (det)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> logins/NNS (root)
  -> User/NN (compound)
  -> webpage/NN (nmod:to)
    -> to/TO (case)
    -> the/DT (det)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (NP (NP (NN User) (NNS logins)) (PP (TO to) (NP (DT the) (NN webpage))) (. .))) BinarizedTree=(ROOT (NP (@NP (NP (NN User) (NNS logins)) (PP (TO to) (NP (DT the) (NN webpage)))) (. .))) CorefMentions=[User logins to the webpage, to the webpage] AlternativeDependencies=-> logins/NNS (root)
  -> User/NN (nn)
  -> webpage/NN (prep_to)
    -> the/DT (det)
 SentimentAnnotatedTree=(ROOT (@NP (NP (NN User) (NNS logins)) (PP (TO to) (NP (DT the) (NN webpage)))) (. .)) SentimentClass=Negative]","root(ROOT-0, logins-2)
compound(logins-2, User-1)
case(webpage-5, to-3)
det(webpage-5, the-4)
nmod(logins-2, webpage-5)
punct(logins-2, .-6)
","root(ROOT-0, logins-2)
compound(logins-2, User-1)
case(webpage-5, to-3)
det(webpage-5, the-4)
nmod:to(logins-2, webpage-5)
punct(logins-2, .-6)
","root(ROOT-0, logins-2)
compound(logins-2, User-1)
case(webpage-5, to-3)
det(webpage-5, the-4)
nmod:to(logins-2, webpage-5)
punct(logins-2, .-6)
","Negative"
"CORTEX","User logins to the webpage. If user stays in Application and does not do any operation for a specific period in any tab Then each tab will report inactivity timeout around the same time, Else customer resumes activity in any tab each tab will be refreshed with the latest operation timestamp. Inactivity timeout trigger will put a popup which says your session will be expired due to inactivity in next Netinsights-timeout-grace-period seconds. If user performs any operation in Netinsights-timeout-grace-period seconds after inactivity timeout comes out Then activity will be performed according to operation selected by user, Else automatically log offs. If user clicks logout in inactivity timeout Then user will log off, Else if customer clicks Continue, will be closed and Netinsights-last-activity-timestamp will be refreshed to be the current timestamp","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If user stays in Application and does not do any operation for a specific period in any tab Then each tab will report inactivity timeout around the same time, Else customer resumes activity in any tab each tab will be refreshed with the latest operation timestamp. CharacterOffsetBegin=28 CharacterOffsetEnd=292 Tokens=[If-1, user-2, stays-3, in-4, Application-5, and-6, does-7, not-8, do-9, any-10, operation-11, for-12, a-13, specific-14, period-15, in-16, any-17, tab-18, Then-19, each-20, tab-21, will-22, report-23, inactivity-24, timeout-25, around-26, the-27, same-28, time-29, ,-30, Else-31, customer-32, resumes-33, activity-34, in-35, any-36, tab-37, each-38, tab-39, will-40, be-41, refreshed-42, with-43, the-44, latest-45, operation-46, timestamp-47, .-48] SentenceIndex=1 TokenBegin=6 TokenEnd=54 Mentions=[] CollapsedDependencies=-> resumes/VBZ (root)
  -> report/VB (ccomp)
    -> stays/VBZ (advcl)
      -> If/IN (mark)
      -> user/NN (nsubj)
      -> Application/NN (nmod:in)
        -> in/IN (case)
      -> and/CC (cc)
      -> do/VB (conj:and)
        -> does/VBZ (aux)
        -> not/RB (neg)
        -> operation/NN (dobj)
          -> any/DT (det)
        -> period/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
          -> tab/NN (nmod:in)
            -> in/IN (case)
            -> any/DT (det)
    -> Then/RB (advmod)
    -> tab/NN (nsubj)
      -> each/DT (det)
    -> will/MD (aux)
    -> timeout/NN (dobj)
      -> inactivity/NN (compound)
    -> time/NN (nmod:around)
      -> around/IN (case)
      -> the/DT (det)
      -> same/JJ (amod)
  -> ,/, (punct)
  -> customer/NN (nsubj)
    -> Else/RB (advmod)
  -> activity/NN (dobj)
  -> tab/NN (nmod:in)
    -> in/IN (case)
    -> any/DT (det)
    -> refreshed/VBN (acl:relcl)
      -> tab/NN (nsubjpass)
        -> each/DT (det)
      -> will/MD (aux)
      -> be/VB (auxpass)
      -> timestamp/NN (nmod:with)
        -> with/IN (case)
        -> the/DT (det)
        -> latest/JJS (amod)
        -> operation/NN (compound)
  -> ./. (punct)
 BasicDependencies=-> resumes/VBZ (root)
  -> report/VB (ccomp)
    -> stays/VBZ (advcl)
      -> If/IN (mark)
      -> user/NN (nsubj)
      -> Application/NN (nmod)
        -> in/IN (case)
      -> and/CC (cc)
      -> do/VB (conj)
        -> does/VBZ (aux)
        -> not/RB (neg)
        -> operation/NN (dobj)
          -> any/DT (det)
        -> period/NN (nmod)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
          -> tab/NN (nmod)
            -> in/IN (case)
            -> any/DT (det)
    -> Then/RB (advmod)
    -> tab/NN (nsubj)
      -> each/DT (det)
    -> will/MD (aux)
    -> timeout/NN (dobj)
      -> inactivity/NN (compound)
    -> time/NN (nmod)
      -> around/IN (case)
      -> the/DT (det)
      -> same/JJ (amod)
  -> ,/, (punct)
  -> customer/NN (nsubj)
    -> Else/RB (advmod)
  -> activity/NN (dobj)
  -> tab/NN (nmod)
    -> in/IN (case)
    -> any/DT (det)
    -> refreshed/VBN (acl:relcl)
      -> tab/NN (nsubjpass)
        -> each/DT (det)
      -> will/MD (aux)
      -> be/VB (auxpass)
      -> timestamp/NN (nmod)
        -> with/IN (case)
        -> the/DT (det)
        -> latest/JJS (amod)
        -> operation/NN (compound)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> resumes/VBZ (root)
  -> report/VB (ccomp)
    -> stays/VBZ (advcl)
      -> If/IN (mark)
      -> user/NN (nsubj)
      -> Application/NN (nmod:in)
        -> in/IN (case)
      -> and/CC (cc)
      -> do/VB (conj:and)
        -> user/NN (nsubj)
        -> does/VBZ (aux)
        -> not/RB (neg)
        -> operation/NN (dobj)
          -> any/DT (det)
        -> period/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
          -> tab/NN (nmod:in)
            -> in/IN (case)
            -> any/DT (det)
    -> do/VB (advcl)
    -> Then/RB (advmod)
    -> tab/NN (nsubj)
      -> each/DT (det)
    -> will/MD (aux)
    -> timeout/NN (dobj)
      -> inactivity/NN (compound)
    -> time/NN (nmod:around)
      -> around/IN (case)
      -> the/DT (det)
      -> same/JJ (amod)
  -> ,/, (punct)
  -> customer/NN (nsubj)
    -> Else/RB (advmod)
  -> activity/NN (dobj)
  -> tab/NN (nmod:in)
    -> in/IN (case)
    -> any/DT (det)
    -> refreshed/VBN (acl:relcl)
      -> tab/NN (nsubjpass)
        -> each/DT (det)
      -> will/MD (aux)
      -> be/VB (auxpass)
      -> timestamp/NN (nmod:with)
        -> with/IN (case)
        -> the/DT (det)
        -> latest/JJS (amod)
        -> operation/NN (compound)
  -> ./. (punct)
 EnhancedDependencies=-> resumes/VBZ (root)
  -> report/VB (ccomp)
    -> stays/VBZ (advcl:if)
      -> If/IN (mark)
      -> user/NN (nsubj)
      -> Application/NN (nmod:in)
        -> in/IN (case)
      -> and/CC (cc)
      -> do/VB (conj:and)
        -> user/NN (nsubj)
        -> does/VBZ (aux)
        -> not/RB (neg)
        -> operation/NN (dobj)
          -> any/DT (det)
        -> period/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
          -> tab/NN (nmod:in)
            -> in/IN (case)
            -> any/DT (det)
    -> do/VB (advcl:if)
    -> Then/RB (advmod)
    -> tab/NN (nsubj)
      -> each/DT (det)
    -> will/MD (aux)
    -> timeout/NN (dobj)
      -> inactivity/NN (compound)
    -> time/NN (nmod:around)
      -> around/IN (case)
      -> the/DT (det)
      -> same/JJ (amod)
  -> ,/, (punct)
  -> customer/NN (nsubj)
    -> Else/RB (advmod)
  -> activity/NN (dobj)
  -> tab/NN (nmod:in)
    -> in/IN (case)
    -> any/DT (det)
    -> refreshed/VBN (acl:relcl)
      -> tab/NN (nsubjpass)
        -> each/DT (det)
      -> will/MD (aux)
      -> be/VB (auxpass)
      -> timestamp/NN (nmod:with)
        -> with/IN (case)
        -> the/DT (det)
        -> latest/JJS (amod)
        -> operation/NN (compound)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> resumes/VBZ (root)
  -> report/VB (ccomp)
    -> stays/VBZ (advcl:if)
      -> If/IN (mark)
      -> user/NN (nsubj)
      -> Application/NN (nmod:in)
        -> in/IN (case)
      -> and/CC (cc)
      -> do/VB (conj:and)
        -> user/NN (nsubj)
        -> does/VBZ (aux)
        -> not/RB (neg)
        -> operation/NN (dobj)
          -> any/DT (det)
        -> period/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
          -> tab/NN (nmod:in)
            -> in/IN (case)
            -> any/DT (det)
    -> do/VB (advcl:if)
    -> Then/RB (advmod)
    -> tab/NN (nsubj)
      -> each/DT (det)
    -> will/MD (aux)
    -> timeout/NN (dobj)
      -> inactivity/NN (compound)
    -> time/NN (nmod:around)
      -> around/IN (case)
      -> the/DT (det)
      -> same/JJ (amod)
  -> ,/, (punct)
  -> customer/NN (nsubj)
    -> Else/RB (advmod)
  -> activity/NN (dobj)
  -> tab/NN (nmod:in)
    -> in/IN (case)
    -> any/DT (det)
    -> refreshed/VBN (acl:relcl)
      -> tab/NN (nsubjpass)
        -> each/DT (det)
      -> will/MD (aux)
      -> be/VB (auxpass)
      -> timestamp/NN (nmod:with)
        -> with/IN (case)
        -> the/DT (det)
        -> latest/JJS (amod)
        -> operation/NN (compound)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (S (SBAR (IN If) (S (NP (NN user)) (VP (VP (VBZ stays) (PP (IN in) (NP (NN Application)))) (CC and) (VP (VBZ does) (RB not) (VP (VB do) (NP (DT any) (NN operation)) (PP (IN for) (NP (NP (DT a) (JJ specific) (NN period)) (PP (IN in) (NP (DT any) (NN tab)))))))))) (ADVP (RB Then)) (NP (DT each) (NN tab)) (VP (MD will) (VP (VB report) (NP (NN inactivity) (NN timeout)) (PP (IN around) (NP (DT the) (JJ same) (NN time)))))) (, ,) (NP (RB Else) (NN customer)) (VP (VBZ resumes) (NP (NN activity)) (PP (IN in) (NP (NP (DT any) (NN tab)) (SBAR (S (NP (DT each) (NN tab)) (VP (MD will) (VP (VB be) (VP (VBN refreshed) (PP (IN with) (NP (DT the) (JJS latest) (NN operation) (NN timestamp))))))))))) (. .))) BinarizedTree=(ROOT (S (S (SBAR (IN If) (S (NP (NN user)) (VP (@VP (VP (VBZ stays) (PP (IN in) (NP (NN Application)))) (CC and)) (VP (@VP (VBZ does) (RB not)) (VP (@VP (VB do) (NP (DT any) (NN operation))) (PP (IN for) (NP (NP (DT a) (@NP (JJ specific) (NN period))) (PP (IN in) (NP (DT any) (NN tab)))))))))) (@S (ADVP (RB Then)) (@S (NP (DT each) (NN tab)) (VP (MD will) (VP (@VP (VB report) (NP (NN inactivity) (NN timeout))) (PP (IN around) (NP (DT the) (@NP (JJ same) (NN time))))))))) (@S (, ,) (@S (NP (RB Else) (NN customer)) (@S (VP (@VP (VBZ resumes) (NP (NN activity))) (PP (IN in) (NP (NP (DT any) (NN tab)) (SBAR (S (NP (DT each) (NN tab)) (VP (MD will) (VP (VB be) (VP (VBN refreshed) (PP (IN with) (NP (DT the) (@NP (JJS latest) (@NP (NN operation) (NN timestamp))))))))))))) (. .)))))) CorefMentions=[any tab each tab will be refreshed with the latest operation timestamp, each tab, the latest operation timestamp, user, Application, any operation, a specific period in any tab, any tab, each tab, inactivity timeout, the same time, Else customer, activity] AlternativeDependencies=-> resumes/VBZ (root)
  -> report/VB (ccomp)
    -> stays/VBZ (advcl)
      -> If/IN (mark)
      -> user/NN (nsubj)
      -> Application/NN (prep_in)
      -> do/VB (conj_and)
        -> does/VBZ (aux)
        -> not/RB (neg)
        -> operation/NN (dobj)
          -> any/DT (det)
        -> period/NN (prep_for)
          -> a/DT (det)
          -> specific/JJ (amod)
          -> tab/NN (prep_in)
            -> any/DT (det)
    -> Then/RB (advmod)
    -> tab/NN (nsubj)
      -> each/DT (det)
    -> will/MD (aux)
    -> timeout/NN (dobj)
      -> inactivity/NN (nn)
    -> time/NN (prep_around)
      -> the/DT (det)
      -> same/JJ (amod)
  -> customer/NN (nsubj)
    -> Else/RB (advmod)
  -> activity/NN (dobj)
  -> tab/NN (prep_in)
    -> any/DT (det)
    -> refreshed/VBN (rcmod)
      -> tab/NN (nsubjpass)
        -> each/DT (det)
      -> will/MD (aux)
      -> be/VB (auxpass)
      -> timestamp/NN (prep_with)
        -> the/DT (det)
        -> latest/JJS (amod)
        -> operation/NN (nn)
 SentimentAnnotatedTree=(ROOT (S (SBAR (IN If) (S (NP user) (VP (@VP (VP (VBZ stays) (PP (IN in) (NP Application))) (CC and)) (VP (@VP (VBZ does) (RB not)) (VP (@VP (VB do) (NP (DT any) (NN operation))) (PP (IN for) (NP (NP (DT a) (@NP (JJ specific) (NN period))) (PP (IN in) (NP (DT any) (NN tab)))))))))) (@S (ADVP Then) (@S (NP (DT each) (NN tab)) (VP (MD will) (VP (@VP (VB report) (NP (NN inactivity) (NN timeout))) (PP (IN around) (NP (DT the) (@NP (JJ same) (NN time))))))))) (@S (, ,) (@S (NP (RB Else) (NN customer)) (@S (VP (@VP (VBZ resumes) (NP activity)) (PP (IN in) (NP (NP (DT any) (NN tab)) (SBAR (NP (DT each) (NN tab)) (VP (MD will) (VP (VB be) (VP (VBN refreshed) (PP (IN with) (NP (DT the) (@NP (JJS latest) (@NP (NN operation) (NN timestamp)))))))))))) (. .))))) SentimentClass=Negative]","root(ROOT-0, resumes-33)
mark(stays-3, If-1)
nsubj(stays-3, user-2)
advcl(report-23, stays-3)
case(Application-5, in-4)
nmod(stays-3, Application-5)
cc(stays-3, and-6)
aux(do-9, does-7)
neg(do-9, not-8)
conj(stays-3, do-9)
det(operation-11, any-10)
dobj(do-9, operation-11)
case(period-15, for-12)
det(period-15, a-13)
amod(period-15, specific-14)
nmod(do-9, period-15)
case(tab-18, in-16)
det(tab-18, any-17)
nmod(period-15, tab-18)
advmod(report-23, Then-19)
det(tab-21, each-20)
nsubj(report-23, tab-21)
aux(report-23, will-22)
ccomp(resumes-33, report-23)
compound(timeout-25, inactivity-24)
dobj(report-23, timeout-25)
case(time-29, around-26)
det(time-29, the-27)
amod(time-29, same-28)
nmod(report-23, time-29)
punct(resumes-33, ,-30)
advmod(customer-32, Else-31)
nsubj(resumes-33, customer-32)
dobj(resumes-33, activity-34)
case(tab-37, in-35)
det(tab-37, any-36)
nmod(resumes-33, tab-37)
det(tab-39, each-38)
nsubjpass(refreshed-42, tab-39)
aux(refreshed-42, will-40)
auxpass(refreshed-42, be-41)
acl:relcl(tab-37, refreshed-42)
case(timestamp-47, with-43)
det(timestamp-47, the-44)
amod(timestamp-47, latest-45)
compound(timestamp-47, operation-46)
nmod(refreshed-42, timestamp-47)
punct(resumes-33, .-48)
","root(ROOT-0, resumes-33)
mark(stays-3, If-1)
nsubj(stays-3, user-2)
nsubj(do-9, user-2)
advcl:if(report-23, stays-3)
case(Application-5, in-4)
nmod:in(stays-3, Application-5)
cc(stays-3, and-6)
aux(do-9, does-7)
neg(do-9, not-8)
conj:and(stays-3, do-9)
advcl:if(report-23, do-9)
det(operation-11, any-10)
dobj(do-9, operation-11)
case(period-15, for-12)
det(period-15, a-13)
amod(period-15, specific-14)
nmod:for(do-9, period-15)
case(tab-18, in-16)
det(tab-18, any-17)
nmod:in(period-15, tab-18)
advmod(report-23, Then-19)
det(tab-21, each-20)
nsubj(report-23, tab-21)
aux(report-23, will-22)
ccomp(resumes-33, report-23)
compound(timeout-25, inactivity-24)
dobj(report-23, timeout-25)
case(time-29, around-26)
det(time-29, the-27)
amod(time-29, same-28)
nmod:around(report-23, time-29)
punct(resumes-33, ,-30)
advmod(customer-32, Else-31)
nsubj(resumes-33, customer-32)
dobj(resumes-33, activity-34)
case(tab-37, in-35)
det(tab-37, any-36)
nmod:in(resumes-33, tab-37)
det(tab-39, each-38)
nsubjpass(refreshed-42, tab-39)
aux(refreshed-42, will-40)
auxpass(refreshed-42, be-41)
acl:relcl(tab-37, refreshed-42)
case(timestamp-47, with-43)
det(timestamp-47, the-44)
amod(timestamp-47, latest-45)
compound(timestamp-47, operation-46)
nmod:with(refreshed-42, timestamp-47)
punct(resumes-33, .-48)
","root(ROOT-0, resumes-33)
mark(stays-3, If-1)
nsubj(stays-3, user-2)
nsubj(do-9, user-2)
advcl:if(report-23, stays-3)
case(Application-5, in-4)
nmod:in(stays-3, Application-5)
cc(stays-3, and-6)
aux(do-9, does-7)
neg(do-9, not-8)
conj:and(stays-3, do-9)
advcl:if(report-23, do-9)
det(operation-11, any-10)
dobj(do-9, operation-11)
case(period-15, for-12)
det(period-15, a-13)
amod(period-15, specific-14)
nmod:for(do-9, period-15)
case(tab-18, in-16)
det(tab-18, any-17)
nmod:in(period-15, tab-18)
advmod(report-23, Then-19)
det(tab-21, each-20)
nsubj(report-23, tab-21)
aux(report-23, will-22)
ccomp(resumes-33, report-23)
compound(timeout-25, inactivity-24)
dobj(report-23, timeout-25)
case(time-29, around-26)
det(time-29, the-27)
amod(time-29, same-28)
nmod:around(report-23, time-29)
punct(resumes-33, ,-30)
advmod(customer-32, Else-31)
nsubj(resumes-33, customer-32)
dobj(resumes-33, activity-34)
case(tab-37, in-35)
det(tab-37, any-36)
nmod:in(resumes-33, tab-37)
det(tab-39, each-38)
nsubjpass(refreshed-42, tab-39)
aux(refreshed-42, will-40)
auxpass(refreshed-42, be-41)
acl:relcl(tab-37, refreshed-42)
case(timestamp-47, with-43)
det(timestamp-47, the-44)
amod(timestamp-47, latest-45)
compound(timestamp-47, operation-46)
nmod:with(refreshed-42, timestamp-47)
punct(resumes-33, .-48)
","Negative"
"CORTEX","User logins to the webpage. If user stays in Application and does not do any operation for a specific period in any tab Then each tab will report inactivity timeout around the same time, Else customer resumes activity in any tab each tab will be refreshed with the latest operation timestamp. Inactivity timeout trigger will put a popup which says your session will be expired due to inactivity in next Netinsights-timeout-grace-period seconds. If user performs any operation in Netinsights-timeout-grace-period seconds after inactivity timeout comes out Then activity will be performed according to operation selected by user, Else automatically log offs. If user clicks logout in inactivity timeout Then user will log off, Else if customer clicks Continue, will be closed and Netinsights-last-activity-timestamp will be refreshed to be the current timestamp","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=Inactivity timeout trigger will put a popup which says your session will be expired due to inactivity in next Netinsights-timeout-grace-period seconds. CharacterOffsetBegin=293 CharacterOffsetEnd=444 Tokens=[Inactivity-1, timeout-2, trigger-3, will-4, put-5, a-6, popup-7, which-8, says-9, your-10, session-11, will-12, be-13, expired-14, due-15, to-16, inactivity-17, in-18, next-19, Netinsights-timeout-grace-period-20, seconds-21, .-22] SentenceIndex=2 TokenBegin=54 TokenEnd=76 Mentions=[] CollapsedDependencies=-> put/VB (root)
  -> trigger/NN (nsubj)
    -> Inactivity/NN (compound)
    -> timeout/NN (compound)
  -> will/MD (aux)
  -> popup/NN (dobj)
    -> a/DT (det)
    -> says/VBZ (acl:relcl)
      -> which/WDT (nsubj)
      -> expired/VBN (ccomp)
        -> session/NN (nsubjpass)
          -> your/PRP$ (nmod:poss)
        -> will/MD (aux)
        -> be/VB (auxpass)
        -> due/JJ (xcomp)
          -> inactivity/NN (nmod:to)
            -> to/TO (case)
        -> seconds/NNS (nmod:in)
          -> in/IN (case)
          -> next/JJ (amod)
          -> Netinsights-timeout-grace-period/JJ (amod)
  -> ./. (punct)
 BasicDependencies=-> put/VB (root)
  -> trigger/NN (nsubj)
    -> Inactivity/NN (compound)
    -> timeout/NN (compound)
  -> will/MD (aux)
  -> popup/NN (dobj)
    -> a/DT (det)
    -> says/VBZ (acl:relcl)
      -> which/WDT (nsubj)
      -> expired/VBN (ccomp)
        -> session/NN (nsubjpass)
          -> your/PRP$ (nmod:poss)
        -> will/MD (aux)
        -> be/VB (auxpass)
        -> due/JJ (xcomp)
          -> inactivity/NN (nmod)
            -> to/TO (case)
        -> seconds/NNS (nmod)
          -> in/IN (case)
          -> next/JJ (amod)
          -> Netinsights-timeout-grace-period/JJ (amod)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> put/VB (root)
  -> trigger/NN (nsubj)
    -> Inactivity/NN (compound)
    -> timeout/NN (compound)
  -> will/MD (aux)
  -> popup/NN (dobj)
    -> a/DT (det)
    -> says/VBZ (acl:relcl)
      -> which/WDT (nsubj)
      -> expired/VBN (ccomp)
        -> session/NN (nsubjpass)
          -> your/PRP$ (nmod:poss)
        -> will/MD (aux)
        -> be/VB (auxpass)
        -> due/JJ (xcomp)
          -> inactivity/NN (nmod:to)
            -> to/TO (case)
        -> seconds/NNS (nmod:in)
          -> in/IN (case)
          -> next/JJ (amod)
          -> Netinsights-timeout-grace-period/JJ (amod)
  -> ./. (punct)
 EnhancedDependencies=-> put/VB (root)
  -> trigger/NN (nsubj)
    -> Inactivity/NN (compound)
    -> timeout/NN (compound)
  -> will/MD (aux)
  -> popup/NN (dobj)
    -> a/DT (det)
    -> which/WDT (ref)
    -> says/VBZ (acl:relcl)
      -> popup/NN (nsubj)
      -> expired/VBN (ccomp)
        -> session/NN (nsubjpass)
          -> your/PRP$ (nmod:poss)
        -> will/MD (aux)
        -> be/VB (auxpass)
        -> due/JJ (xcomp)
          -> inactivity/NN (nmod:to)
            -> to/TO (case)
        -> seconds/NNS (nmod:in)
          -> in/IN (case)
          -> next/JJ (amod)
          -> Netinsights-timeout-grace-period/JJ (amod)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> put/VB (root)
  -> trigger/NN (nsubj)
    -> Inactivity/NN (compound)
    -> timeout/NN (compound)
  -> will/MD (aux)
  -> popup/NN (dobj)
    -> a/DT (det)
    -> which/WDT (ref)
    -> says/VBZ (acl:relcl)
      -> popup/NN (nsubj)
      -> expired/VBN (ccomp)
        -> session/NN (nsubjpass)
          -> your/PRP$ (nmod:poss)
        -> will/MD (aux)
        -> be/VB (auxpass)
        -> due/JJ (xcomp)
          -> inactivity/NN (nmod:to)
            -> to/TO (case)
        -> seconds/NNS (nmod:in)
          -> in/IN (case)
          -> next/JJ (amod)
          -> Netinsights-timeout-grace-period/JJ (amod)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN Inactivity) (NN timeout) (NN trigger)) (VP (MD will) (VP (VB put) (NP (NP (DT a) (NN popup)) (SBAR (WHNP (WDT which)) (S (VP (VBZ says) (SBAR (S (NP (PRP$ your) (NN session)) (VP (MD will) (VP (VB be) (VP (VBN expired) (ADJP (JJ due) (PP (TO to) (NP (NN inactivity)))) (PP (IN in) (NP (JJ next) (JJ Netinsights-timeout-grace-period) (NNS seconds)))))))))))))) (. .))) BinarizedTree=(ROOT (S (NP (NN Inactivity) (@NP (NN timeout) (NN trigger))) (@S (VP (MD will) (VP (VB put) (NP (NP (DT a) (NN popup)) (SBAR (WHNP (WDT which)) (S (VP (VBZ says) (SBAR (S (NP (PRP$ your) (NN session)) (VP (MD will) (VP (VB be) (VP (@VP (VBN expired) (ADJP (JJ due) (PP (TO to) (NP (NN inactivity))))) (PP (IN in) (NP (JJ next) (@NP (JJ Netinsights-timeout-grace-period) (NNS seconds))))))))))))))) (. .)))) CorefMentions=[a popup which says your session will be expired due to inactivity in next Netinsights-timeout-grace-period seconds, your, your session, to inactivity, next Netinsights-timeout-grace-period seconds, Inactivity timeout trigger] AlternativeDependencies=-> put/VB (root)
  -> trigger/NN (nsubj)
    -> Inactivity/NN (nn)
    -> timeout/NN (nn)
  -> will/MD (aux)
  -> popup/NN (dobj)
    -> a/DT (det)
    -> says/VBZ (rcmod)
      -> which/WDT (nsubj)
      -> expired/VBN (ccomp)
        -> session/NN (nsubjpass)
          -> your/PRP$ (poss)
        -> will/MD (aux)
        -> be/VB (auxpass)
        -> due/JJ (acomp)
          -> inactivity/NN (prep_to)
        -> seconds/NNS (prep_in)
          -> next/JJ (amod)
          -> Netinsights-timeout-grace-period/JJ (amod)
 SentimentAnnotatedTree=(ROOT (NP (NN Inactivity) (@NP (NN timeout) (NN trigger))) (@S (VP (MD will) (VP (VB put) (NP (NP (DT a) (NN popup)) (SBAR (WHNP which) (S (VBZ says) (SBAR (NP (PRP$ your) (NN session)) (VP (MD will) (VP (VB be) (VP (@VP (VBN expired) (ADJP (JJ due) (PP (TO to) (NP inactivity)))) (PP (IN in) (NP (JJ next) (@NP (JJ Netinsights-timeout-grace-period) (NNS seconds))))))))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, put-5)
compound(trigger-3, Inactivity-1)
compound(trigger-3, timeout-2)
nsubj(put-5, trigger-3)
aux(put-5, will-4)
det(popup-7, a-6)
dobj(put-5, popup-7)
nsubj(says-9, which-8)
acl:relcl(popup-7, says-9)
nmod:poss(session-11, your-10)
nsubjpass(expired-14, session-11)
aux(expired-14, will-12)
auxpass(expired-14, be-13)
ccomp(says-9, expired-14)
xcomp(expired-14, due-15)
case(inactivity-17, to-16)
nmod(due-15, inactivity-17)
case(seconds-21, in-18)
amod(seconds-21, next-19)
amod(seconds-21, Netinsights-timeout-grace-period-20)
nmod(expired-14, seconds-21)
punct(put-5, .-22)
","root(ROOT-0, put-5)
compound(trigger-3, Inactivity-1)
compound(trigger-3, timeout-2)
nsubj(put-5, trigger-3)
aux(put-5, will-4)
det(popup-7, a-6)
dobj(put-5, popup-7)
nsubj(says-9, popup-7)
ref(popup-7, which-8)
acl:relcl(popup-7, says-9)
nmod:poss(session-11, your-10)
nsubjpass(expired-14, session-11)
aux(expired-14, will-12)
auxpass(expired-14, be-13)
ccomp(says-9, expired-14)
xcomp(expired-14, due-15)
case(inactivity-17, to-16)
nmod:to(due-15, inactivity-17)
case(seconds-21, in-18)
amod(seconds-21, next-19)
amod(seconds-21, Netinsights-timeout-grace-period-20)
nmod:in(expired-14, seconds-21)
punct(put-5, .-22)
","root(ROOT-0, put-5)
compound(trigger-3, Inactivity-1)
compound(trigger-3, timeout-2)
nsubj(put-5, trigger-3)
aux(put-5, will-4)
det(popup-7, a-6)
dobj(put-5, popup-7)
nsubj(says-9, popup-7)
ref(popup-7, which-8)
acl:relcl(popup-7, says-9)
nmod:poss(session-11, your-10)
nsubjpass(expired-14, session-11)
aux(expired-14, will-12)
auxpass(expired-14, be-13)
ccomp(says-9, expired-14)
xcomp(expired-14, due-15)
case(inactivity-17, to-16)
nmod:to(due-15, inactivity-17)
case(seconds-21, in-18)
amod(seconds-21, next-19)
amod(seconds-21, Netinsights-timeout-grace-period-20)
nmod:in(expired-14, seconds-21)
punct(put-5, .-22)
","Negative"
"CORTEX","User logins to the webpage. If user stays in Application and does not do any operation for a specific period in any tab Then each tab will report inactivity timeout around the same time, Else customer resumes activity in any tab each tab will be refreshed with the latest operation timestamp. Inactivity timeout trigger will put a popup which says your session will be expired due to inactivity in next Netinsights-timeout-grace-period seconds. If user performs any operation in Netinsights-timeout-grace-period seconds after inactivity timeout comes out Then activity will be performed according to operation selected by user, Else automatically log offs. If user clicks logout in inactivity timeout Then user will log off, Else if customer clicks Continue, will be closed and Netinsights-last-activity-timestamp will be refreshed to be the current timestamp","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If user performs any operation in Netinsights-timeout-grace-period seconds after inactivity timeout comes out Then activity will be performed according to operation selected by user, Else automatically log offs. CharacterOffsetBegin=445 CharacterOffsetEnd=656 Tokens=[If-1, user-2, performs-3, any-4, operation-5, in-6, Netinsights-timeout-grace-period-7, seconds-8, after-9, inactivity-10, timeout-11, comes-12, out-13, Then-14, activity-15, will-16, be-17, performed-18, according-19, to-20, operation-21, selected-22, by-23, user-24, ,-25, Else-26, automatically-27, log-28, offs-29, .-30] SentenceIndex=3 TokenBegin=76 TokenEnd=106 Mentions=[] CollapsedDependencies=-> performed/VBN (root)
  -> performs/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> operation/NN (dobj)
      -> any/DT (det)
    -> seconds/NNS (nmod:in)
      -> in/IN (case)
      -> Netinsights-timeout-grace-period/JJ (amod)
    -> comes/VBZ (advcl)
      -> after/IN (mark)
      -> timeout/NN (nsubj)
        -> inactivity/NN (compound)
      -> out/RP (compound:prt)
      -> Then/RB (advmod)
  -> activity/NN (nsubjpass)
  -> will/MD (aux)
  -> be/VB (auxpass)
  -> operation/NN (nmod:according_to)
    -> according/VBG (case)
      -> to/TO (mwe)
    -> selected/VBN (acl)
      -> user/NN (nmod:by)
        -> by/IN (case)
  -> ,/, (punct)
  -> log/VB (dep)
    -> Else/RB (advmod)
    -> automatically/RB (advmod)
    -> offs/NNS (dobj)
  -> ./. (punct)
 BasicDependencies=-> performed/VBN (root)
  -> performs/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> operation/NN (dobj)
      -> any/DT (det)
    -> seconds/NNS (nmod)
      -> in/IN (case)
      -> Netinsights-timeout-grace-period/JJ (amod)
    -> comes/VBZ (advcl)
      -> after/IN (mark)
      -> timeout/NN (nsubj)
        -> inactivity/NN (compound)
      -> out/RP (compound:prt)
      -> Then/RB (advmod)
  -> activity/NN (nsubjpass)
  -> will/MD (aux)
  -> be/VB (auxpass)
  -> operation/NN (nmod)
    -> according/VBG (case)
      -> to/TO (mwe)
    -> selected/VBN (acl)
      -> user/NN (nmod)
        -> by/IN (case)
  -> ,/, (punct)
  -> log/VB (dep)
    -> Else/RB (advmod)
    -> automatically/RB (advmod)
    -> offs/NNS (dobj)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> performed/VBN (root)
  -> performs/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> operation/NN (dobj)
      -> any/DT (det)
    -> seconds/NNS (nmod:in)
      -> in/IN (case)
      -> Netinsights-timeout-grace-period/JJ (amod)
    -> comes/VBZ (advcl)
      -> after/IN (mark)
      -> timeout/NN (nsubj)
        -> inactivity/NN (compound)
      -> out/RP (compound:prt)
      -> Then/RB (advmod)
  -> activity/NN (nsubjpass)
  -> will/MD (aux)
  -> be/VB (auxpass)
  -> operation/NN (nmod:according_to)
    -> according/VBG (case)
      -> to/TO (mwe)
    -> selected/VBN (acl)
      -> user/NN (nmod:by)
        -> by/IN (case)
  -> ,/, (punct)
  -> log/VB (dep)
    -> Else/RB (advmod)
    -> automatically/RB (advmod)
    -> offs/NNS (dobj)
  -> ./. (punct)
 EnhancedDependencies=-> performed/VBN (root)
  -> performs/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> operation/NN (dobj)
      -> any/DT (det)
    -> seconds/NNS (nmod:in)
      -> in/IN (case)
      -> Netinsights-timeout-grace-period/JJ (amod)
    -> comes/VBZ (advcl:after)
      -> after/IN (mark)
      -> timeout/NN (nsubj)
        -> inactivity/NN (compound)
      -> out/RP (compound:prt)
      -> Then/RB (advmod)
  -> activity/NN (nsubjpass)
  -> will/MD (aux)
  -> be/VB (auxpass)
  -> operation/NN (nmod:according_to)
    -> according/VBG (case)
      -> to/TO (mwe)
    -> selected/VBN (acl)
      -> user/NN (nmod:by)
        -> by/IN (case)
  -> ,/, (punct)
  -> log/VB (dep)
    -> Else/RB (advmod)
    -> automatically/RB (advmod)
    -> offs/NNS (dobj)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> performed/VBN (root)
  -> performs/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> operation/NN (dobj)
      -> any/DT (det)
    -> seconds/NNS (nmod:in)
      -> in/IN (case)
      -> Netinsights-timeout-grace-period/JJ (amod)
    -> comes/VBZ (advcl:after)
      -> after/IN (mark)
      -> timeout/NN (nsubj)
        -> inactivity/NN (compound)
      -> out/RP (compound:prt)
      -> Then/RB (advmod)
  -> activity/NN (nsubjpass)
  -> will/MD (aux)
  -> be/VB (auxpass)
  -> operation/NN (nmod:according_to)
    -> according/VBG (case)
      -> to/TO (mwe)
    -> selected/VBN (acl)
      -> user/NN (nmod:by)
        -> by/IN (case)
  -> ,/, (punct)
  -> log/VB (dep)
    -> Else/RB (advmod)
    -> automatically/RB (advmod)
    -> offs/NNS (dobj)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (SBAR (IN If) (S (NP (NN user)) (VP (VBZ performs) (NP (DT any) (NN operation)) (PP (IN in) (NP (JJ Netinsights-timeout-grace-period) (NNS seconds))) (SBAR (IN after) (S (NP (NN inactivity) (NN timeout)) (VP (VBZ comes) (PRT (RP out)) (ADVP (RB Then)))))))) (NP (NN activity)) (VP (MD will) (VP (VP (VB be) (VP (VBN performed) (PP (VBG according) (PP (TO to) (NP (NP (NN operation)) (VP (VBN selected) (PP (IN by) (NP (NN user))))))))) (, ,) (ADVP (RB Else)) (VP (ADVP (RB automatically)) (VB log) (NP (NNS offs))))) (. .))) BinarizedTree=(ROOT (S (SBAR (IN If) (S (NP (NN user)) (VP (@VP (@VP (VBZ performs) (NP (DT any) (NN operation))) (PP (IN in) (NP (JJ Netinsights-timeout-grace-period) (NNS seconds)))) (SBAR (IN after) (S (NP (NN inactivity) (NN timeout)) (VP (@VP (VBZ comes) (PRT (RP out))) (ADVP (RB Then)))))))) (@S (NP (NN activity)) (@S (VP (MD will) (VP (@VP (@VP (VP (VB be) (VP (VBN performed) (PP (VBG according) (PP (TO to) (NP (NP (NN operation)) (VP (VBN selected) (PP (IN by) (NP (NN user))))))))) (, ,)) (ADVP (RB Else))) (VP (ADVP (RB automatically)) (@VP (VB log) (NP (NNS offs)))))) (. .))))) CorefMentions=[user, any operation, Netinsights-timeout-grace-period seconds, inactivity timeout, activity, according to operation selected by user, user, offs] AlternativeDependencies=-> performed/VBN (root)
  -> performs/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> operation/NN (dobj)
      -> any/DT (det)
    -> seconds/NNS (prep_in)
      -> Netinsights-timeout-grace-period/JJ (amod)
    -> comes/VBZ (advcl)
      -> after/IN (mark)
      -> timeout/NN (nsubj)
        -> inactivity/NN (nn)
      -> out/RP (prt)
      -> Then/RB (advmod)
  -> activity/NN (nsubjpass)
  -> will/MD (aux)
  -> be/VB (auxpass)
  -> to/TO (prepc_according_to)
  -> operation/NN (pobj)
    -> selected/VBN (vmod)
      -> user/NN (agent)
  -> log/VB (dep)
    -> Else/RB (advmod)
    -> automatically/RB (advmod)
    -> offs/NNS (dobj)
 SentimentAnnotatedTree=(ROOT (SBAR (IN If) (S (NP user) (VP (@VP (@VP (VBZ performs) (NP (DT any) (NN operation))) (PP (IN in) (NP (JJ Netinsights-timeout-grace-period) (NNS seconds)))) (SBAR (IN after) (S (NP (NN inactivity) (NN timeout)) (VP (@VP (VBZ comes) (PRT out)) (ADVP Then))))))) (@S (NP activity) (@S (VP (MD will) (VP (@VP (@VP (VP (VB be) (VP (VBN performed) (PP (VBG according) (PP (TO to) (NP (NP operation) (VP (VBN selected) (PP (IN by) (NP user)))))))) (, ,)) (ADVP Else)) (VP (ADVP automatically) (@VP (VB log) (NP offs))))) (. .)))) SentimentClass=Negative]","root(ROOT-0, performed-18)
mark(performs-3, If-1)
nsubj(performs-3, user-2)
advcl(performed-18, performs-3)
det(operation-5, any-4)
dobj(performs-3, operation-5)
case(seconds-8, in-6)
amod(seconds-8, Netinsights-timeout-grace-period-7)
nmod(performs-3, seconds-8)
mark(comes-12, after-9)
compound(timeout-11, inactivity-10)
nsubj(comes-12, timeout-11)
advcl(performs-3, comes-12)
compound:prt(comes-12, out-13)
advmod(comes-12, Then-14)
nsubjpass(performed-18, activity-15)
aux(performed-18, will-16)
auxpass(performed-18, be-17)
case(operation-21, according-19)
mwe(according-19, to-20)
nmod(performed-18, operation-21)
acl(operation-21, selected-22)
case(user-24, by-23)
nmod(selected-22, user-24)
punct(performed-18, ,-25)
advmod(log-28, Else-26)
advmod(log-28, automatically-27)
dep(performed-18, log-28)
dobj(log-28, offs-29)
punct(performed-18, .-30)
","root(ROOT-0, performed-18)
mark(performs-3, If-1)
nsubj(performs-3, user-2)
advcl:if(performed-18, performs-3)
det(operation-5, any-4)
dobj(performs-3, operation-5)
case(seconds-8, in-6)
amod(seconds-8, Netinsights-timeout-grace-period-7)
nmod:in(performs-3, seconds-8)
mark(comes-12, after-9)
compound(timeout-11, inactivity-10)
nsubj(comes-12, timeout-11)
advcl:after(performs-3, comes-12)
compound:prt(comes-12, out-13)
advmod(comes-12, Then-14)
nsubjpass(performed-18, activity-15)
aux(performed-18, will-16)
auxpass(performed-18, be-17)
case(operation-21, according-19)
mwe(according-19, to-20)
nmod:according_to(performed-18, operation-21)
acl(operation-21, selected-22)
case(user-24, by-23)
nmod:by(selected-22, user-24)
punct(performed-18, ,-25)
advmod(log-28, Else-26)
advmod(log-28, automatically-27)
dep(performed-18, log-28)
dobj(log-28, offs-29)
punct(performed-18, .-30)
","root(ROOT-0, performed-18)
mark(performs-3, If-1)
nsubj(performs-3, user-2)
advcl:if(performed-18, performs-3)
det(operation-5, any-4)
dobj(performs-3, operation-5)
case(seconds-8, in-6)
amod(seconds-8, Netinsights-timeout-grace-period-7)
nmod:in(performs-3, seconds-8)
mark(comes-12, after-9)
compound(timeout-11, inactivity-10)
nsubj(comes-12, timeout-11)
advcl:after(performs-3, comes-12)
compound:prt(comes-12, out-13)
advmod(comes-12, Then-14)
nsubjpass(performed-18, activity-15)
aux(performed-18, will-16)
auxpass(performed-18, be-17)
case(operation-21, according-19)
mwe(according-19, to-20)
nmod:according_to(performed-18, operation-21)
acl(operation-21, selected-22)
case(user-24, by-23)
nmod:by(selected-22, user-24)
punct(performed-18, ,-25)
advmod(log-28, Else-26)
advmod(log-28, automatically-27)
dep(performed-18, log-28)
dobj(log-28, offs-29)
punct(performed-18, .-30)
","Negative"
"CORTEX","User logins to the webpage. If user stays in Application and does not do any operation for a specific period in any tab Then each tab will report inactivity timeout around the same time, Else customer resumes activity in any tab each tab will be refreshed with the latest operation timestamp. Inactivity timeout trigger will put a popup which says your session will be expired due to inactivity in next Netinsights-timeout-grace-period seconds. If user performs any operation in Netinsights-timeout-grace-period seconds after inactivity timeout comes out Then activity will be performed according to operation selected by user, Else automatically log offs. If user clicks logout in inactivity timeout Then user will log off, Else if customer clicks Continue, will be closed and Netinsights-last-activity-timestamp will be refreshed to be the current timestamp","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If user clicks logout in inactivity timeout Then user will log off, Else if customer clicks Continue, will be closed and Netinsights-last-activity-timestamp will be refreshed to be the current timestamp CharacterOffsetBegin=657 CharacterOffsetEnd=859 Tokens=[If-1, user-2, clicks-3, logout-4, in-5, inactivity-6, timeout-7, Then-8, user-9, will-10, log-11, off-12, ,-13, Else-14, if-15, customer-16, clicks-17, Continue-18, ,-19, will-20, be-21, closed-22, and-23, Netinsights-last-activity-timestamp-24, will-25, be-26, refreshed-27, to-28, be-29, the-30, current-31, timestamp-32] SentenceIndex=4 TokenBegin=106 TokenEnd=138 Mentions=[] CollapsedDependencies=-> log/VB (root)
  -> clicks/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> logout/NN (dobj)
      -> timeout/NN (nmod:in)
        -> in/IN (case)
        -> inactivity/NN (compound)
  -> Then/RB (advmod)
  -> user/NN (nsubj)
  -> will/MD (aux)
  -> off/RP (compound:prt)
  -> ,/, (punct)
  -> closed/VBN (conj:and)
    -> clicks/VBZ (advcl)
      -> Else/RB (advmod)
      -> if/IN (mark)
      -> customer/NN (nsubj)
    -> Continue/NNP (nsubjpass)
      -> ,/, (punct)
    -> will/MD (aux)
    -> be/VB (auxpass)
  -> and/CC (cc)
  -> refreshed/VBN (conj:and)
    -> Netinsights-last-activity-timestamp/NN (nsubjpass)
    -> will/MD (aux)
    -> be/VB (auxpass)
    -> timestamp/NN (xcomp)
      -> to/TO (mark)
      -> be/VB (cop)
      -> the/DT (det)
      -> current/JJ (amod)
 BasicDependencies=-> log/VB (root)
  -> clicks/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> logout/NN (dobj)
      -> timeout/NN (nmod)
        -> in/IN (case)
        -> inactivity/NN (compound)
  -> Then/RB (advmod)
  -> user/NN (nsubj)
  -> will/MD (aux)
  -> off/RP (compound:prt)
  -> ,/, (punct)
  -> closed/VBN (conj)
    -> clicks/VBZ (advcl)
      -> Else/RB (advmod)
      -> if/IN (mark)
      -> customer/NN (nsubj)
    -> Continue/NNP (nsubjpass)
      -> ,/, (punct)
    -> will/MD (aux)
    -> be/VB (auxpass)
  -> and/CC (cc)
  -> refreshed/VBN (conj)
    -> Netinsights-last-activity-timestamp/NN (nsubjpass)
    -> will/MD (aux)
    -> be/VB (auxpass)
    -> timestamp/NN (xcomp)
      -> to/TO (mark)
      -> be/VB (cop)
      -> the/DT (det)
      -> current/JJ (amod)
 CollapsedCCProcessedDependencies=-> log/VB (root)
  -> clicks/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> logout/NN (dobj)
      -> timeout/NN (nmod:in)
        -> in/IN (case)
        -> inactivity/NN (compound)
  -> Then/RB (advmod)
  -> user/NN (nsubj)
  -> will/MD (aux)
  -> off/RP (compound:prt)
  -> ,/, (punct)
  -> closed/VBN (conj:and)
    -> clicks/VBZ (advcl)
      -> Else/RB (advmod)
      -> if/IN (mark)
      -> customer/NN (nsubj)
    -> Continue/NNP (nsubjpass)
      -> ,/, (punct)
    -> will/MD (aux)
    -> be/VB (auxpass)
  -> and/CC (cc)
  -> refreshed/VBN (conj:and)
    -> Netinsights-last-activity-timestamp/NN (nsubjpass)
    -> will/MD (aux)
    -> be/VB (auxpass)
    -> timestamp/NN (xcomp)
      -> to/TO (mark)
      -> be/VB (cop)
      -> the/DT (det)
      -> current/JJ (amod)
 EnhancedDependencies=-> log/VB (root)
  -> clicks/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> logout/NN (dobj)
      -> timeout/NN (nmod:in)
        -> in/IN (case)
        -> inactivity/NN (compound)
  -> Then/RB (advmod)
  -> user/NN (nsubj)
  -> will/MD (aux)
  -> off/RP (compound:prt)
  -> ,/, (punct)
  -> closed/VBN (conj:and)
    -> clicks/VBZ (advcl:if)
      -> Else/RB (advmod)
      -> if/IN (mark)
      -> customer/NN (nsubj)
    -> Continue/NNP (nsubjpass)
      -> ,/, (punct)
    -> will/MD (aux)
    -> be/VB (auxpass)
  -> and/CC (cc)
  -> refreshed/VBN (conj:and)
    -> Netinsights-last-activity-timestamp/NN (nsubjpass)
    -> will/MD (aux)
    -> be/VB (auxpass)
    -> timestamp/NN (xcomp)
      -> Netinsights-last-activity-timestamp/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> be/VB (cop)
      -> the/DT (det)
      -> current/JJ (amod)
 EnhancedPlusPlusDependencies=-> log/VB (root)
  -> clicks/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> logout/NN (dobj)
      -> timeout/NN (nmod:in)
        -> in/IN (case)
        -> inactivity/NN (compound)
  -> Then/RB (advmod)
  -> user/NN (nsubj)
  -> will/MD (aux)
  -> off/RP (compound:prt)
  -> ,/, (punct)
  -> closed/VBN (conj:and)
    -> clicks/VBZ (advcl:if)
      -> Else/RB (advmod)
      -> if/IN (mark)
      -> customer/NN (nsubj)
    -> Continue/NNP (nsubjpass)
      -> ,/, (punct)
    -> will/MD (aux)
    -> be/VB (auxpass)
  -> and/CC (cc)
  -> refreshed/VBN (conj:and)
    -> Netinsights-last-activity-timestamp/NN (nsubjpass)
    -> will/MD (aux)
    -> be/VB (auxpass)
    -> timestamp/NN (xcomp)
      -> Netinsights-last-activity-timestamp/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> be/VB (cop)
      -> the/DT (det)
      -> current/JJ (amod)
 KBPTriples=[] Tree=(ROOT (S (S (SBAR (IN If) (S (NP (NN user)) (VP (VBZ clicks) (NP (NP (NN logout)) (PP (IN in) (NP (NN inactivity) (NN timeout))))))) (ADVP (RB Then)) (NP (NN user)) (VP (MD will) (VP (VB log) (PRT (RP off))))) (, ,) (S (SBAR (RB Else) (IN if) (S (NP (NN customer)) (VP (VBZ clicks)))) (NP (NNP Continue) (, ,)) (VP (MD will) (VP (VB be) (VP (VBN closed))))) (CC and) (S (NP (NN Netinsights-last-activity-timestamp)) (VP (MD will) (VP (VB be) (VP (VBN refreshed) (S (VP (TO to) (VP (VB be) (NP (DT the) (JJ current) (NN timestamp))))))))))) BinarizedTree=(ROOT (S (@S (@S (@S (S (SBAR (IN If) (S (NP (NN user)) (VP (VBZ clicks) (NP (NP (NN logout)) (PP (IN in) (NP (NN inactivity) (NN timeout))))))) (@S (ADVP (RB Then)) (@S (NP (NN user)) (VP (MD will) (VP (VB log) (PRT (RP off))))))) (, ,)) (S (SBAR (RB Else) (@SBAR (IN if) (S (NP (NN customer)) (VP (VBZ clicks))))) (@S (NP (NNP Continue) (, ,)) (VP (MD will) (VP (VB be) (VP (VBN closed))))))) (CC and)) (S (NP (NN Netinsights-last-activity-timestamp)) (VP (MD will) (VP (VB be) (VP (VBN refreshed) (S (VP (TO to) (VP (VB be) (NP (DT the) (@NP (JJ current) (NN timestamp)))))))))))) CorefMentions=[customer, Continue, Netinsights-last-activity-timestamp, the current timestamp, user, logout in inactivity timeout, inactivity timeout, user] AlternativeDependencies=-> log/VB (root)
  -> clicks/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
    -> logout/NN (dobj)
      -> timeout/NN (prep_in)
        -> inactivity/NN (nn)
  -> Then/RB (advmod)
  -> user/NN (nsubj)
  -> will/MD (aux)
  -> off/RP (prt)
  -> closed/VBN (conj_and)
    -> clicks/VBZ (advcl)
      -> Else/RB (advmod)
      -> if/IN (mark)
      -> customer/NN (nsubj)
    -> Continue/NNP (nsubjpass)
    -> will/MD (aux)
    -> be/VB (auxpass)
  -> refreshed/VBN (conj_and)
    -> Netinsights-last-activity-timestamp/NN (nsubjpass)
    -> will/MD (aux)
    -> be/VB (auxpass)
    -> timestamp/NN (xcomp)
      -> to/TO (aux)
      -> be/VB (cop)
      -> the/DT (det)
      -> current/JJ (amod)
 SentimentAnnotatedTree=(ROOT (@S (@S (@S (S (SBAR (IN If) (S (NP user) (VP (VBZ clicks) (NP (NP logout) (PP (IN in) (NP (NN inactivity) (NN timeout))))))) (@S (ADVP Then) (@S (NP user) (VP (MD will) (VP (VB log) (PRT off)))))) (, ,)) (S (SBAR (RB Else) (@SBAR (IN if) (S (NP customer) (VP clicks)))) (@S (NP (NNP Continue) (, ,)) (VP (MD will) (VP (VB be) (VP closed)))))) (CC and)) (S (NP Netinsights-last-activity-timestamp) (VP (MD will) (VP (VB be) (VP (VBN refreshed) (S (TO to) (VP (VB be) (NP (DT the) (@NP (JJ current) (NN timestamp)))))))))) SentimentClass=Negative]","root(ROOT-0, log-11)
mark(clicks-3, If-1)
nsubj(clicks-3, user-2)
advcl(log-11, clicks-3)
dobj(clicks-3, logout-4)
case(timeout-7, in-5)
compound(timeout-7, inactivity-6)
nmod(logout-4, timeout-7)
advmod(log-11, Then-8)
nsubj(log-11, user-9)
aux(log-11, will-10)
compound:prt(log-11, off-12)
punct(log-11, ,-13)
advmod(clicks-17, Else-14)
mark(clicks-17, if-15)
nsubj(clicks-17, customer-16)
advcl(closed-22, clicks-17)
nsubjpass(closed-22, Continue-18)
punct(Continue-18, ,-19)
aux(closed-22, will-20)
auxpass(closed-22, be-21)
conj(log-11, closed-22)
cc(log-11, and-23)
nsubjpass(refreshed-27, Netinsights-last-activity-timestamp-24)
aux(refreshed-27, will-25)
auxpass(refreshed-27, be-26)
conj(log-11, refreshed-27)
mark(timestamp-32, to-28)
cop(timestamp-32, be-29)
det(timestamp-32, the-30)
amod(timestamp-32, current-31)
xcomp(refreshed-27, timestamp-32)
","root(ROOT-0, log-11)
mark(clicks-3, If-1)
nsubj(clicks-3, user-2)
advcl:if(log-11, clicks-3)
dobj(clicks-3, logout-4)
case(timeout-7, in-5)
compound(timeout-7, inactivity-6)
nmod:in(logout-4, timeout-7)
advmod(log-11, Then-8)
nsubj(log-11, user-9)
aux(log-11, will-10)
compound:prt(log-11, off-12)
punct(log-11, ,-13)
advmod(clicks-17, Else-14)
mark(clicks-17, if-15)
nsubj(clicks-17, customer-16)
advcl:if(closed-22, clicks-17)
nsubjpass(closed-22, Continue-18)
punct(Continue-18, ,-19)
aux(closed-22, will-20)
auxpass(closed-22, be-21)
conj:and(log-11, closed-22)
cc(log-11, and-23)
nsubjpass(refreshed-27, Netinsights-last-activity-timestamp-24)
nsubj:xsubj(timestamp-32, Netinsights-last-activity-timestamp-24)
aux(refreshed-27, will-25)
auxpass(refreshed-27, be-26)
conj:and(log-11, refreshed-27)
mark(timestamp-32, to-28)
cop(timestamp-32, be-29)
det(timestamp-32, the-30)
amod(timestamp-32, current-31)
xcomp(refreshed-27, timestamp-32)
","root(ROOT-0, log-11)
mark(clicks-3, If-1)
nsubj(clicks-3, user-2)
advcl:if(log-11, clicks-3)
dobj(clicks-3, logout-4)
case(timeout-7, in-5)
compound(timeout-7, inactivity-6)
nmod:in(logout-4, timeout-7)
advmod(log-11, Then-8)
nsubj(log-11, user-9)
aux(log-11, will-10)
compound:prt(log-11, off-12)
punct(log-11, ,-13)
advmod(clicks-17, Else-14)
mark(clicks-17, if-15)
nsubj(clicks-17, customer-16)
advcl:if(closed-22, clicks-17)
nsubjpass(closed-22, Continue-18)
punct(Continue-18, ,-19)
aux(closed-22, will-20)
auxpass(closed-22, be-21)
conj:and(log-11, closed-22)
cc(log-11, and-23)
nsubjpass(refreshed-27, Netinsights-last-activity-timestamp-24)
nsubj:xsubj(timestamp-32, Netinsights-last-activity-timestamp-24)
aux(refreshed-27, will-25)
auxpass(refreshed-27, be-26)
conj:and(log-11, refreshed-27)
mark(timestamp-32, to-28)
cop(timestamp-32, be-29)
det(timestamp-32, the-30)
amod(timestamp-32, current-31)
xcomp(refreshed-27, timestamp-32)
","Negative"

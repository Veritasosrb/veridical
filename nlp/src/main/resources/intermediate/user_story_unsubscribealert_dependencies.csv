"Test case ID","User Story","Keys of sentence","Sentence analysis","Basic Dependencies","Enhanced Dependencies","Enhanced Plus Plus dependencies","Sentiment"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=The user needs to unsubscribe to stop receiving the alerts. CharacterOffsetBegin=0 CharacterOffsetEnd=59 Tokens=[The-1, user-2, needs-3, to-4, unsubscribe-5, to-6, stop-7, receiving-8, the-9, alerts-10, .-11] SentenceIndex=0 TokenBegin=0 TokenEnd=11 Mentions=[] CollapsedDependencies=-> needs/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> unsubscribe/VB (xcomp)
    -> to/TO (mark)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> receiving/VBG (xcomp)
        -> alerts/VBZ (ccomp)
          -> the/DT (nsubj)
  -> ./. (punct)
 BasicDependencies=-> needs/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> unsubscribe/VB (xcomp)
    -> to/TO (mark)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> receiving/VBG (xcomp)
        -> alerts/VBZ (ccomp)
          -> the/DT (nsubj)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> needs/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> unsubscribe/VB (xcomp)
    -> to/TO (mark)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> receiving/VBG (xcomp)
        -> alerts/VBZ (ccomp)
          -> the/DT (nsubj)
  -> ./. (punct)
 EnhancedDependencies=-> needs/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> unsubscribe/VB (xcomp)
    -> user/NN (nsubj:xsubj)
    -> to/TO (mark)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> receiving/VBG (xcomp)
        -> alerts/VBZ (ccomp)
          -> the/DT (nsubj)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> needs/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> unsubscribe/VB (xcomp)
    -> user/NN (nsubj:xsubj)
    -> to/TO (mark)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> receiving/VBG (xcomp)
        -> alerts/VBZ (ccomp)
          -> the/DT (nsubj)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (DT The) (NN user)) (VP (VBZ needs) (S (VP (TO to) (VP (VB unsubscribe) (S (VP (TO to) (VP (VB stop) (S (VP (VBG receiving) (SBAR (S (NP (DT the)) (VP (VBZ alerts))))))))))))) (. .))) BinarizedTree=(ROOT (S (NP (DT The) (NN user)) (@S (VP (VBZ needs) (S (VP (TO to) (VP (VB unsubscribe) (S (VP (TO to) (VP (VB stop) (S (VP (VBG receiving) (SBAR (S (NP (DT the)) (VP (VBZ alerts))))))))))))) (. .)))) CorefMentions=[The user, the] AlternativeDependencies=-> needs/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> unsubscribe/VB (xcomp)
    -> to/TO (aux)
    -> stop/VB (xcomp)
      -> to/TO (aux)
      -> receiving/VBG (xcomp)
        -> alerts/VBZ (ccomp)
          -> the/DT (nsubj)
 SentimentAnnotatedTree=(ROOT (NP (DT The) (NN user)) (@S (VP (VBZ needs) (S (TO to) (VP (VB unsubscribe) (S (TO to) (VP (VB stop) (S (VBG receiving) (SBAR (NP the) (VP alerts)))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, needs-3)
det(user-2, The-1)
nsubj(needs-3, user-2)
mark(unsubscribe-5, to-4)
xcomp(needs-3, unsubscribe-5)
mark(stop-7, to-6)
xcomp(unsubscribe-5, stop-7)
xcomp(stop-7, receiving-8)
nsubj(alerts-10, the-9)
ccomp(receiving-8, alerts-10)
punct(needs-3, .-11)
","root(ROOT-0, needs-3)
det(user-2, The-1)
nsubj(needs-3, user-2)
nsubj:xsubj(unsubscribe-5, user-2)
mark(unsubscribe-5, to-4)
xcomp(needs-3, unsubscribe-5)
mark(stop-7, to-6)
xcomp(unsubscribe-5, stop-7)
xcomp(stop-7, receiving-8)
nsubj(alerts-10, the-9)
ccomp(receiving-8, alerts-10)
punct(needs-3, .-11)
","root(ROOT-0, needs-3)
det(user-2, The-1)
nsubj(needs-3, user-2)
nsubj:xsubj(unsubscribe-5, user-2)
mark(unsubscribe-5, to-4)
xcomp(needs-3, unsubscribe-5)
mark(stop-7, to-6)
xcomp(unsubscribe-5, stop-7)
xcomp(stop-7, receiving-8)
nsubj(alerts-10, the-9)
ccomp(receiving-8, alerts-10)
punct(needs-3, .-11)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User selects the Appliance_type on which they want to stop getting alerts. CharacterOffsetBegin=60 CharacterOffsetEnd=134 Tokens=[User-1, selects-2, the-3, Appliance_type-4, on-5, which-6, they-7, want-8, to-9, stop-10, getting-11, alerts-12, .-13] SentenceIndex=1 TokenBegin=11 TokenEnd=24 Mentions=[Appliance_type] CollapsedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Appliance_type/NN (dobj)
    -> the/DT (det)
    -> want/VBP (acl:relcl)
      -> which/WDT (nmod:on)
        -> on/IN (case)
      -> they/PRP (nsubj)
      -> stop/VB (xcomp)
        -> to/TO (mark)
        -> alerts/VBZ (xcomp)
          -> getting/VBG (aux)
  -> ./. (punct)
 BasicDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Appliance_type/NN (dobj)
    -> the/DT (det)
    -> want/VBP (acl:relcl)
      -> which/WDT (nmod)
        -> on/IN (case)
      -> they/PRP (nsubj)
      -> stop/VB (xcomp)
        -> to/TO (mark)
        -> alerts/VBZ (xcomp)
          -> getting/VBG (aux)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Appliance_type/NN (dobj)
    -> the/DT (det)
    -> want/VBP (acl:relcl)
      -> which/WDT (nmod:on)
        -> on/IN (case)
      -> they/PRP (nsubj)
      -> stop/VB (xcomp)
        -> to/TO (mark)
        -> alerts/VBZ (xcomp)
          -> getting/VBG (aux)
  -> ./. (punct)
 EnhancedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Appliance_type/NN (dobj)
    -> the/DT (det)
    -> which/WDT (ref)
      -> on/IN (case)
    -> want/VBP (acl:relcl)
      -> Appliance_type/NN (nmod:on)
      -> they/PRP (nsubj)
      -> stop/VB (xcomp)
        -> they/PRP (nsubj:xsubj)
        -> to/TO (mark)
        -> alerts/VBZ (xcomp)
          -> getting/VBG (aux)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Appliance_type/NN (dobj)
    -> the/DT (det)
    -> which/WDT (ref)
      -> on/IN (case)
    -> want/VBP (acl:relcl)
      -> Appliance_type/NN (nmod:on)
      -> they/PRP (nsubj)
      -> stop/VB (xcomp)
        -> they/PRP (nsubj:xsubj)
        -> to/TO (mark)
        -> alerts/VBZ (xcomp)
          -> getting/VBG (aux)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN User)) (VP (VBZ selects) (NP (NP (DT the) (NN Appliance_type)) (SBAR (WHPP (IN on) (WHNP (WDT which))) (S (NP (PRP they)) (VP (VBP want) (S (VP (TO to) (VP (VB stop) (S (VP (VBG getting) (VP (VBZ alerts)))))))))))) (. .))) BinarizedTree=(ROOT (S (NP (NN User)) (@S (VP (VBZ selects) (NP (NP (DT the) (NN Appliance_type)) (SBAR (WHPP (IN on) (WHNP (WDT which))) (S (NP (PRP they)) (VP (VBP want) (S (VP (TO to) (VP (VB stop) (S (VP (VBG getting) (VP (VBZ alerts)))))))))))) (. .)))) CorefMentions=[the Appliance_type on which they want to stop getting alerts, they, User] AlternativeDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Appliance_type/NN (dobj)
    -> the/DT (det)
    -> want/VBP (rcmod)
      -> which/WDT (prep_on)
      -> they/PRP (nsubj)
      -> stop/VB (xcomp)
        -> to/TO (aux)
        -> alerts/VBZ (xcomp)
          -> getting/VBG (aux)
 SentimentAnnotatedTree=(ROOT (NP User) (@S (VP (VBZ selects) (NP (NP (DT the) (NN Appliance_type)) (SBAR (WHPP (IN on) (WHNP which)) (S (NP they) (VP (VBP want) (S (TO to) (VP (VB stop) (S (VBG getting) (VP alerts))))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(Appliance_type-4, the-3)
dobj(selects-2, Appliance_type-4)
case(which-6, on-5)
nmod(want-8, which-6)
nsubj(want-8, they-7)
acl:relcl(Appliance_type-4, want-8)
mark(stop-10, to-9)
xcomp(want-8, stop-10)
aux(alerts-12, getting-11)
xcomp(stop-10, alerts-12)
punct(selects-2, .-13)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(Appliance_type-4, the-3)
dobj(selects-2, Appliance_type-4)
nmod:on(want-8, Appliance_type-4)
case(which-6, on-5)
ref(Appliance_type-4, which-6)
nsubj(want-8, they-7)
nsubj:xsubj(stop-10, they-7)
acl:relcl(Appliance_type-4, want-8)
mark(stop-10, to-9)
xcomp(want-8, stop-10)
aux(alerts-12, getting-11)
xcomp(stop-10, alerts-12)
punct(selects-2, .-13)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(Appliance_type-4, the-3)
dobj(selects-2, Appliance_type-4)
nmod:on(want-8, Appliance_type-4)
case(which-6, on-5)
ref(Appliance_type-4, which-6)
nsubj(want-8, they-7)
nsubj:xsubj(stop-10, they-7)
acl:relcl(Appliance_type-4, want-8)
mark(stop-10, to-9)
xcomp(want-8, stop-10)
aux(alerts-12, getting-11)
xcomp(stop-10, alerts-12)
punct(selects-2, .-13)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. CharacterOffsetBegin=136 CharacterOffsetEnd=320 Tokens=[If-1, the-2, user-3, wants-4, to-5, stop-6, the-7, alert-8, for-9, a-10, specific-11, appliance-12, ,-13, Then-14, the-15, User-16, clicks-17, on-18, that-19, appliance-20, Else-21, the-22, user-23, selects-24, as-25, many-26, appliances-27, as-28, possible-29, they-30, want-31, by-32, checking-33, the-34, box-35, .-36] SentenceIndex=2 TokenBegin=24 TokenEnd=60 Mentions=[] CollapsedDependencies=-> want/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
        -> appliance/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
    -> ,/, (punct)
    -> Then/RB (advmod)
    -> clicks/VBZ (parataxis)
      -> User/NN (nsubj)
        -> the/DT (det)
      -> appliance/NN (nmod:on)
        -> on/IN (case)
        -> that/DT (det)
        -> selects/VBZ (acl:relcl)
          -> user/NN (nsubj)
            -> Else/RB (advmod)
            -> the/DT (det)
          -> appliances/NNS (nmod:as)
            -> as/IN (case)
            -> many/JJ (amod)
          -> possible/JJ (advcl)
            -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl)
    -> by/IN (mark)
    -> box/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 BasicDependencies=-> want/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
        -> appliance/NN (nmod)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
    -> ,/, (punct)
    -> Then/RB (advmod)
    -> clicks/VBZ (parataxis)
      -> User/NN (nsubj)
        -> the/DT (det)
      -> appliance/NN (nmod)
        -> on/IN (case)
        -> that/DT (det)
        -> selects/VBZ (acl:relcl)
          -> user/NN (nsubj)
            -> Else/RB (advmod)
            -> the/DT (det)
          -> appliances/NNS (nmod)
            -> as/IN (case)
            -> many/JJ (amod)
          -> possible/JJ (advcl)
            -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl)
    -> by/IN (mark)
    -> box/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> want/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> stop/VB (xcomp)
      -> to/TO (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
        -> appliance/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
    -> ,/, (punct)
    -> Then/RB (advmod)
    -> clicks/VBZ (parataxis)
      -> User/NN (nsubj)
        -> the/DT (det)
      -> appliance/NN (nmod:on)
        -> on/IN (case)
        -> that/DT (det)
        -> selects/VBZ (acl:relcl)
          -> user/NN (nsubj)
            -> Else/RB (advmod)
            -> the/DT (det)
          -> appliances/NNS (nmod:as)
            -> as/IN (case)
            -> many/JJ (amod)
          -> possible/JJ (advcl)
            -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl)
    -> by/IN (mark)
    -> box/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 EnhancedDependencies=-> want/VBP (root)
  -> wants/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> stop/VB (xcomp)
      -> user/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
        -> appliance/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
    -> ,/, (punct)
    -> Then/RB (advmod)
    -> clicks/VBZ (parataxis)
      -> User/NN (nsubj)
        -> the/DT (det)
      -> appliance/NN (nmod:on)
        -> on/IN (case)
        -> that/DT (det)
        -> selects/VBZ (acl:relcl)
          -> user/NN (nsubj)
            -> Else/RB (advmod)
            -> the/DT (det)
          -> appliances/NNS (nmod:as)
            -> as/IN (case)
            -> many/JJ (amod)
          -> possible/JJ (advcl:as)
            -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl:by)
    -> by/IN (mark)
    -> box/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> want/VBP (root)
  -> wants/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> stop/VB (xcomp)
      -> user/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
        -> appliance/NN (nmod:for)
          -> for/IN (case)
          -> a/DT (det)
          -> specific/JJ (amod)
    -> ,/, (punct)
    -> Then/RB (advmod)
    -> clicks/VBZ (parataxis)
      -> User/NN (nsubj)
        -> the/DT (det)
      -> appliance/NN (nmod:on)
        -> on/IN (case)
        -> that/DT (det)
        -> selects/VBZ (acl:relcl)
          -> user/NN (nsubj)
            -> Else/RB (advmod)
            -> the/DT (det)
          -> appliances/NNS (nmod:as)
            -> as/IN (case)
            -> many/JJ (amod)
          -> possible/JJ (advcl:as)
            -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl:by)
    -> by/IN (mark)
    -> box/NN (dobj)
      -> the/DT (det)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (SBAR (IN If) (S (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (VP (TO to) (VP (VB stop) (NP (NP (DT the) (NN alert)) (PP (IN for) (NP (DT a) (JJ specific) (NN appliance))))))))) (, ,) (RB Then) (S (NP (DT the) (NN User)) (VP (VBZ clicks) (PP (IN on) (NP (NP (DT that) (NN appliance)) (SBAR (S (NP (RB Else) (DT the) (NN user)) (VP (VBZ selects) (PP (IN as) (NP (JJ many) (NNS appliances))) (PP (IN as) (ADJP (JJ possible)))))))))))) (NP (PRP they)) (VP (VBP want) (PP (IN by) (S (VP (VBG checking) (NP (DT the) (NN box)))))) (. .))) BinarizedTree=(ROOT (S (SBAR (IN If) (S (@S (@S (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (VP (TO to) (VP (VB stop) (NP (NP (DT the) (NN alert)) (PP (IN for) (NP (DT a) (@NP (JJ specific) (NN appliance)))))))))) (, ,)) (RB Then)) (S (NP (DT the) (NN User)) (VP (VBZ clicks) (PP (IN on) (NP (NP (DT that) (NN appliance)) (SBAR (S (NP (RB Else) (@NP (DT the) (NN user))) (VP (@VP (VBZ selects) (PP (IN as) (NP (JJ many) (NNS appliances)))) (PP (IN as) (ADJP (JJ possible)))))))))))) (@S (NP (PRP they)) (@S (VP (VBP want) (PP (IN by) (S (VP (VBG checking) (NP (DT the) (NN box)))))) (. .))))) CorefMentions=[the alert for a specific appliance, a specific appliance, the User, that appliance Else the user selects as many appliances as possible, Else the user, many appliances, they, the box, the user] AlternativeDependencies=-> want/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> stop/VB (xcomp)
      -> to/TO (aux)
      -> alert/NN (dobj)
        -> the/DT (det)
        -> appliance/NN (prep_for)
          -> a/DT (det)
          -> specific/JJ (amod)
    -> Then/RB (advmod)
    -> clicks/VBZ (parataxis)
      -> User/NN (nsubj)
        -> the/DT (det)
      -> appliance/NN (prep_on)
        -> that/DT (det)
        -> selects/VBZ (rcmod)
          -> user/NN (nsubj)
            -> Else/RB (advmod)
            -> the/DT (det)
          -> appliances/NNS (prep_as)
            -> many/JJ (amod)
          -> possible/JJ (prep_as)
  -> they/PRP (nsubj)
  -> checking/VBG (prepc_by)
    -> box/NN (dobj)
      -> the/DT (det)
 SentimentAnnotatedTree=(ROOT (SBAR (IN If) (S (@S (@S (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (TO to) (VP (VB stop) (NP (NP (DT the) (NN alert)) (PP (IN for) (NP (DT a) (@NP (JJ specific) (NN appliance))))))))) (, ,)) (RB Then)) (S (NP (DT the) (NN User)) (VP (VBZ clicks) (PP (IN on) (NP (NP (DT that) (NN appliance)) (SBAR (NP (RB Else) (@NP (DT the) (NN user))) (VP (@VP (VBZ selects) (PP (IN as) (NP (JJ many) (NNS appliances)))) (PP (IN as) (ADJP possible)))))))))) (@S (NP they) (@S (VP (VBP want) (PP (IN by) (S (VBG checking) (NP (DT the) (NN box))))) (. .)))) SentimentClass=Negative]","root(ROOT-0, want-31)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
advcl(want-31, wants-4)
mark(stop-6, to-5)
xcomp(wants-4, stop-6)
det(alert-8, the-7)
dobj(stop-6, alert-8)
case(appliance-12, for-9)
det(appliance-12, a-10)
amod(appliance-12, specific-11)
nmod(alert-8, appliance-12)
punct(wants-4, ,-13)
advmod(wants-4, Then-14)
det(User-16, the-15)
nsubj(clicks-17, User-16)
parataxis(wants-4, clicks-17)
case(appliance-20, on-18)
det(appliance-20, that-19)
nmod(clicks-17, appliance-20)
advmod(user-23, Else-21)
det(user-23, the-22)
nsubj(selects-24, user-23)
acl:relcl(appliance-20, selects-24)
case(appliances-27, as-25)
amod(appliances-27, many-26)
nmod(selects-24, appliances-27)
case(possible-29, as-28)
advcl(selects-24, possible-29)
nsubj(want-31, they-30)
mark(checking-33, by-32)
advcl(want-31, checking-33)
det(box-35, the-34)
dobj(checking-33, box-35)
punct(want-31, .-36)
","root(ROOT-0, want-31)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
nsubj:xsubj(stop-6, user-3)
advcl:if(want-31, wants-4)
mark(stop-6, to-5)
xcomp(wants-4, stop-6)
det(alert-8, the-7)
dobj(stop-6, alert-8)
case(appliance-12, for-9)
det(appliance-12, a-10)
amod(appliance-12, specific-11)
nmod:for(alert-8, appliance-12)
punct(wants-4, ,-13)
advmod(wants-4, Then-14)
det(User-16, the-15)
nsubj(clicks-17, User-16)
parataxis(wants-4, clicks-17)
case(appliance-20, on-18)
det(appliance-20, that-19)
nmod:on(clicks-17, appliance-20)
advmod(user-23, Else-21)
det(user-23, the-22)
nsubj(selects-24, user-23)
acl:relcl(appliance-20, selects-24)
case(appliances-27, as-25)
amod(appliances-27, many-26)
nmod:as(selects-24, appliances-27)
case(possible-29, as-28)
advcl:as(selects-24, possible-29)
nsubj(want-31, they-30)
mark(checking-33, by-32)
advcl:by(want-31, checking-33)
det(box-35, the-34)
dobj(checking-33, box-35)
punct(want-31, .-36)
","root(ROOT-0, want-31)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
nsubj:xsubj(stop-6, user-3)
advcl:if(want-31, wants-4)
mark(stop-6, to-5)
xcomp(wants-4, stop-6)
det(alert-8, the-7)
dobj(stop-6, alert-8)
case(appliance-12, for-9)
det(appliance-12, a-10)
amod(appliance-12, specific-11)
nmod:for(alert-8, appliance-12)
punct(wants-4, ,-13)
advmod(wants-4, Then-14)
det(User-16, the-15)
nsubj(clicks-17, User-16)
parataxis(wants-4, clicks-17)
case(appliance-20, on-18)
det(appliance-20, that-19)
nmod:on(clicks-17, appliance-20)
advmod(user-23, Else-21)
det(user-23, the-22)
nsubj(selects-24, user-23)
acl:relcl(appliance-20, selects-24)
case(appliances-27, as-25)
amod(appliances-27, many-26)
nmod:as(selects-24, appliances-27)
case(possible-29, as-28)
advcl:as(selects-24, possible-29)
nsubj(want-31, they-30)
mark(checking-33, by-32)
advcl:by(want-31, checking-33)
det(box-35, the-34)
dobj(checking-33, box-35)
punct(want-31, .-36)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User clicks on Actions drop down tab. CharacterOffsetBegin=321 CharacterOffsetEnd=358 Tokens=[User-1, clicks-2, on-3, Actions-4, drop-5, down-6, tab-7, .-8] SentenceIndex=3 TokenBegin=60 TokenEnd=68 Mentions=[] CollapsedDependencies=-> clicks/VBZ (root)
  -> User/NN (nsubj)
  -> Actions/NNS (nmod:on)
    -> on/IN (case)
    -> drop/VBP (dep)
      -> down/RP (compound:prt)
      -> tab/NN (dobj)
  -> ./. (punct)
 BasicDependencies=-> clicks/VBZ (root)
  -> User/NN (nsubj)
  -> Actions/NNS (nmod)
    -> on/IN (case)
    -> drop/VBP (dep)
      -> down/RP (compound:prt)
      -> tab/NN (dobj)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> clicks/VBZ (root)
  -> User/NN (nsubj)
  -> Actions/NNS (nmod:on)
    -> on/IN (case)
    -> drop/VBP (dep)
      -> down/RP (compound:prt)
      -> tab/NN (dobj)
  -> ./. (punct)
 EnhancedDependencies=-> clicks/VBZ (root)
  -> User/NN (nsubj)
  -> Actions/NNS (nmod:on)
    -> on/IN (case)
    -> drop/VBP (dep)
      -> down/RP (compound:prt)
      -> tab/NN (dobj)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> clicks/VBZ (root)
  -> User/NN (nsubj)
  -> Actions/NNS (nmod:on)
    -> on/IN (case)
    -> drop/VBP (dep)
      -> down/RP (compound:prt)
      -> tab/NN (dobj)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN User)) (VP (VBZ clicks) (PP (IN on) (NP (NP (NNS Actions)) (VP (VBP drop) (PRT (RP down)) (NP (NN tab)))))) (. .))) BinarizedTree=(ROOT (S (NP (NN User)) (@S (VP (VBZ clicks) (PP (IN on) (NP (NP (NNS Actions)) (VP (@VP (VBP drop) (PRT (RP down))) (NP (NN tab)))))) (. .)))) CorefMentions=[User, Actions, tab] AlternativeDependencies=-> clicks/VBZ (root)
  -> User/NN (nsubj)
  -> Actions/NNS (prep_on)
    -> drop/VBP (dep)
      -> down/RP (prt)
      -> tab/NN (dobj)
 SentimentAnnotatedTree=(ROOT (NP User) (@S (VP (VBZ clicks) (PP (IN on) (NP (NP Actions) (VP (@VP (VBP drop) (PRT down)) (NP tab))))) (. .))) SentimentClass=Negative]","root(ROOT-0, clicks-2)
nsubj(clicks-2, User-1)
case(Actions-4, on-3)
nmod(clicks-2, Actions-4)
dep(Actions-4, drop-5)
compound:prt(drop-5, down-6)
dobj(drop-5, tab-7)
punct(clicks-2, .-8)
","root(ROOT-0, clicks-2)
nsubj(clicks-2, User-1)
case(Actions-4, on-3)
nmod:on(clicks-2, Actions-4)
dep(Actions-4, drop-5)
compound:prt(drop-5, down-6)
dobj(drop-5, tab-7)
punct(clicks-2, .-8)
","root(ROOT-0, clicks-2)
nsubj(clicks-2, User-1)
case(Actions-4, on-3)
nmod:on(clicks-2, Actions-4)
dep(Actions-4, drop-5)
compound:prt(drop-5, down-6)
dobj(drop-5, tab-7)
punct(clicks-2, .-8)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User selects Manage Alerts. CharacterOffsetBegin=359 CharacterOffsetEnd=386 Tokens=[User-1, selects-2, Manage-3, Alerts-4, .-5] SentenceIndex=4 TokenBegin=68 TokenEnd=73 Mentions=[] CollapsedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 BasicDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 EnhancedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN User)) (VP (VBZ selects) (NP (NNP Manage) (NNP Alerts))) (. .))) BinarizedTree=(ROOT (S (NP (NN User)) (@S (VP (VBZ selects) (NP (NNP Manage) (NNP Alerts))) (. .)))) CorefMentions=[User, Manage Alerts] AlternativeDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (nn)
 SentimentAnnotatedTree=(ROOT (NP User) (@S (VP (VBZ selects) (NP (NNP Manage) (NNP Alerts))) (. .))) SentimentClass=Negative]","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
compound(Alerts-4, Manage-3)
dobj(selects-2, Alerts-4)
punct(selects-2, .-5)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
compound(Alerts-4, Manage-3)
dobj(selects-2, Alerts-4)
punct(selects-2, .-5)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
compound(Alerts-4, Manage-3)
dobj(selects-2, Alerts-4)
punct(selects-2, .-5)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. CharacterOffsetBegin=387 CharacterOffsetEnd=560 Tokens=[If-1, the-2, User-3, wants-4, to-5, Turn-6, off-7, the-8, Alert-9, permanently-10, ,-11, Then-12, click-13, on-14, the-15, Turn-16, Off-17, button-18, Else-19, to-20, pause-21, the-22, Alert-23, select-24, Pause-25, Alert-26, and-27, set-28, the-29, duration-30, for-31, pausing-32, the-33, alert-34, .-35] SentenceIndex=5 TokenBegin=73 TokenEnd=108 Mentions=[Turn Off] CollapsedDependencies=-> click/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> ,/, (punct)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (xcomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
    -> and/CC (cc)
    -> set/VBD (conj:and)
      -> duration/NN (dobj)
        -> the/DT (det)
      -> pausing/VBG (advcl)
        -> for/IN (mark)
        -> alert/NN (dobj)
          -> the/DT (det)
  -> ./. (punct)
 BasicDependencies=-> click/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> ,/, (punct)
  -> Then/RB (advmod)
  -> Turn/NN (nmod)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (xcomp)
    -> button/NN (nmod)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
    -> and/CC (cc)
    -> set/VBD (conj)
      -> duration/NN (dobj)
        -> the/DT (det)
      -> pausing/VBG (advcl)
        -> for/IN (mark)
        -> alert/NN (dobj)
          -> the/DT (det)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> click/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> ,/, (punct)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (xcomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
    -> and/CC (cc)
    -> set/VBD (conj:and)
      -> duration/NN (dobj)
        -> the/DT (det)
      -> pausing/VBG (advcl)
        -> for/IN (mark)
        -> alert/NN (dobj)
          -> the/DT (det)
  -> set/VBD (xcomp)
  -> ./. (punct)
 EnhancedDependencies=-> click/VBP (root)
  -> wants/VBZ (advcl:if)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> User/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> ,/, (punct)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (xcomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
    -> and/CC (cc)
    -> set/VBD (conj:and)
      -> duration/NN (dobj)
        -> the/DT (det)
      -> pausing/VBG (advcl:for)
        -> for/IN (mark)
        -> alert/NN (dobj)
          -> the/DT (det)
  -> set/VBD (xcomp)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> click/VBP (root)
  -> wants/VBZ (advcl:if)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> User/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> ,/, (punct)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (xcomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
    -> and/CC (cc)
    -> set/VBD (conj:and)
      -> duration/NN (dobj)
        -> the/DT (det)
      -> pausing/VBG (advcl:for)
        -> for/IN (mark)
        -> alert/NN (dobj)
          -> the/DT (det)
  -> set/VBD (xcomp)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN User)) (VP (VBZ wants) (S (VP (TO to) (VP (VB Turn) (PRT (RP off)) (NP (DT the) (NNP Alert)) (ADVP (RB permanently)))))))) (, ,) (RB Then) (VP (VBP click) (PP (IN on) (NP (DT the) (NN Turn))) (S (PP (IN Off) (NP (NN button) (RB Else))) (VP (TO to) (VP (VP (VB pause) (S (NP (DT the) (NNP Alert)) (NP (JJ select) (NNP Pause) (NNP Alert)))) (CC and) (VP (VBD set) (NP (DT the) (NN duration)) (PP (IN for) (S (VP (VBG pausing) (NP (DT the) (NN alert)))))))))) (. .))) BinarizedTree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN User)) (VP (VBZ wants) (S (VP (TO to) (VP (@VP (@VP (VB Turn) (PRT (RP off))) (NP (DT the) (NNP Alert))) (ADVP (RB permanently)))))))) (@S (, ,) (@S (RB Then) (@S (VP (@VP (VBP click) (PP (IN on) (NP (DT the) (NN Turn)))) (S (PP (IN Off) (NP (NN button) (RB Else))) (VP (TO to) (VP (@VP (VP (VB pause) (S (NP (DT the) (NNP Alert)) (NP (JJ select) (@NP (NNP Pause) (NNP Alert))))) (CC and)) (VP (@VP (VBD set) (NP (DT the) (NN duration))) (PP (IN for) (S (VP (VBG pausing) (NP (DT the) (NN alert)))))))))) (. .)))))) CorefMentions=[Turn Off, the User, the Alert, the Turn, button Else, the Alert, the Alert select Pause Alert, the duration, the alert] AlternativeDependencies=-> click/VBP (root)
  -> wants/VBZ (advcl)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (aux)
      -> off/RP (prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> Then/RB (advmod)
  -> Turn/NN (prep_on)
    -> the/DT (det)
  -> pause/VB (xcomp)
    -> button/NN (prep_off)
      -> Else/RB (advmod)
    -> to/TO (aux)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (nn)
    -> set/VBD (conj_and)
      -> duration/NN (dobj)
        -> the/DT (det)
      -> pausing/VBG (prepc_for)
        -> alert/NN (dobj)
          -> the/DT (det)
 SentimentAnnotatedTree=(ROOT (SBAR (IN If) (S (NP (DT the) (NN User)) (VP (VBZ wants) (S (TO to) (VP (@VP (@VP (VB Turn) (PRT off)) (NP (DT the) (NNP Alert))) (ADVP permanently)))))) (@S (, ,) (@S (RB Then) (@S (VP (@VP (VBP click) (PP (IN on) (NP (DT the) (NN Turn)))) (S (PP (IN Off) (NP (NN button) (RB Else))) (VP (TO to) (VP (@VP (VP (VB pause) (S (NP (DT the) (NNP Alert)) (NP (JJ select) (@NP (NNP Pause) (NNP Alert))))) (CC and)) (VP (@VP (VBD set) (NP (DT the) (NN duration))) (PP (IN for) (S (VBG pausing) (NP (DT the) (NN alert))))))))) (. .))))) SentimentClass=Negative]","root(ROOT-0, click-13)
mark(wants-4, If-1)
det(User-3, the-2)
nsubj(wants-4, User-3)
advcl(click-13, wants-4)
mark(Turn-6, to-5)
xcomp(wants-4, Turn-6)
compound:prt(Turn-6, off-7)
det(Alert-9, the-8)
dobj(Turn-6, Alert-9)
advmod(Turn-6, permanently-10)
punct(click-13, ,-11)
advmod(click-13, Then-12)
case(Turn-16, on-14)
det(Turn-16, the-15)
nmod(click-13, Turn-16)
case(button-18, Off-17)
nmod(pause-21, button-18)
advmod(button-18, Else-19)
mark(pause-21, to-20)
xcomp(click-13, pause-21)
det(Alert-23, the-22)
nsubj(Alert-26, Alert-23)
amod(Alert-26, select-24)
compound(Alert-26, Pause-25)
xcomp(pause-21, Alert-26)
cc(pause-21, and-27)
conj(pause-21, set-28)
det(duration-30, the-29)
dobj(set-28, duration-30)
mark(pausing-32, for-31)
advcl(set-28, pausing-32)
det(alert-34, the-33)
dobj(pausing-32, alert-34)
punct(click-13, .-35)
","root(ROOT-0, click-13)
mark(wants-4, If-1)
det(User-3, the-2)
nsubj(wants-4, User-3)
nsubj:xsubj(Turn-6, User-3)
advcl:if(click-13, wants-4)
mark(Turn-6, to-5)
xcomp(wants-4, Turn-6)
compound:prt(Turn-6, off-7)
det(Alert-9, the-8)
dobj(Turn-6, Alert-9)
advmod(Turn-6, permanently-10)
punct(click-13, ,-11)
advmod(click-13, Then-12)
case(Turn-16, on-14)
det(Turn-16, the-15)
nmod:on(click-13, Turn-16)
case(button-18, Off-17)
nmod:off(pause-21, button-18)
advmod(button-18, Else-19)
mark(pause-21, to-20)
xcomp(click-13, pause-21)
det(Alert-23, the-22)
nsubj(Alert-26, Alert-23)
amod(Alert-26, select-24)
compound(Alert-26, Pause-25)
xcomp(pause-21, Alert-26)
cc(pause-21, and-27)
xcomp(click-13, set-28)
conj:and(pause-21, set-28)
det(duration-30, the-29)
dobj(set-28, duration-30)
mark(pausing-32, for-31)
advcl:for(set-28, pausing-32)
det(alert-34, the-33)
dobj(pausing-32, alert-34)
punct(click-13, .-35)
","root(ROOT-0, click-13)
mark(wants-4, If-1)
det(User-3, the-2)
nsubj(wants-4, User-3)
nsubj:xsubj(Turn-6, User-3)
advcl:if(click-13, wants-4)
mark(Turn-6, to-5)
xcomp(wants-4, Turn-6)
compound:prt(Turn-6, off-7)
det(Alert-9, the-8)
dobj(Turn-6, Alert-9)
advmod(Turn-6, permanently-10)
punct(click-13, ,-11)
advmod(click-13, Then-12)
case(Turn-16, on-14)
det(Turn-16, the-15)
nmod:on(click-13, Turn-16)
case(button-18, Off-17)
nmod:off(pause-21, button-18)
advmod(button-18, Else-19)
mark(pause-21, to-20)
xcomp(click-13, pause-21)
det(Alert-23, the-22)
nsubj(Alert-26, Alert-23)
amod(Alert-26, select-24)
compound(Alert-26, Pause-25)
xcomp(pause-21, Alert-26)
cc(pause-21, and-27)
xcomp(click-13, set-28)
conj:and(pause-21, set-28)
det(duration-30, the-29)
dobj(set-28, duration-30)
mark(pausing-32, for-31)
advcl:for(set-28, pausing-32)
det(alert-34, the-33)
dobj(pausing-32, alert-34)
punct(click-13, .-35)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=The user selects the number through the dropdown mentioned below. CharacterOffsetBegin=561 CharacterOffsetEnd=626 Tokens=[The-1, user-2, selects-3, the-4, number-5, through-6, the-7, dropdown-8, mentioned-9, below-10, .-11] SentenceIndex=6 TokenBegin=108 TokenEnd=119 Mentions=[] CollapsedDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 BasicDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 EnhancedDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (DT The) (NN user)) (VP (VBZ selects) (NP (DT the) (NN number)) (PP (IN through) (NP (NP (DT the) (NN dropdown)) (VP (VBN mentioned) (PP (IN below)))))) (. .))) BinarizedTree=(ROOT (S (NP (DT The) (NN user)) (@S (VP (@VP (VBZ selects) (NP (DT the) (NN number))) (PP (IN through) (NP (NP (DT the) (NN dropdown)) (VP (VBN mentioned) (PP (IN below)))))) (. .)))) CorefMentions=[The user, the number, the dropdown mentioned below] AlternativeDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (prep_through)
    -> the/DT (det)
    -> mentioned/VBN (vmod)
      -> below/IN (prep)
 SentimentAnnotatedTree=(ROOT (NP (DT The) (NN user)) (@S (VP (@VP (VBZ selects) (NP (DT the) (NN number))) (PP (IN through) (NP (NP (DT the) (NN dropdown)) (VP (VBN mentioned) (PP below))))) (. .))) SentimentClass=Negative]","root(ROOT-0, selects-3)
det(user-2, The-1)
nsubj(selects-3, user-2)
det(number-5, the-4)
dobj(selects-3, number-5)
case(dropdown-8, through-6)
det(dropdown-8, the-7)
nmod(selects-3, dropdown-8)
acl(dropdown-8, mentioned-9)
nmod(mentioned-9, below-10)
punct(selects-3, .-11)
","root(ROOT-0, selects-3)
det(user-2, The-1)
nsubj(selects-3, user-2)
det(number-5, the-4)
dobj(selects-3, number-5)
case(dropdown-8, through-6)
det(dropdown-8, the-7)
nmod:through(selects-3, dropdown-8)
acl(dropdown-8, mentioned-9)
nmod(mentioned-9, below-10)
punct(selects-3, .-11)
","root(ROOT-0, selects-3)
det(user-2, The-1)
nsubj(selects-3, user-2)
det(number-5, the-4)
dobj(selects-3, number-5)
case(dropdown-8, through-6)
det(dropdown-8, the-7)
nmod:through(selects-3, dropdown-8)
acl(dropdown-8, mentioned-9)
nmod(mentioned-9, below-10)
punct(selects-3, .-11)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User selects the parameter days/hours through the next drop-down menu. CharacterOffsetBegin=627 CharacterOffsetEnd=697 Tokens=[User-1, selects-2, the-3, parameter-4, days/hours-5, through-6, the-7, next-8, drop-down-9, menu-10, .-11] SentenceIndex=7 TokenBegin=119 TokenEnd=130 Mentions=[] CollapsedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 BasicDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 EnhancedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN User)) (VP (VBZ selects) (SBAR (S (NP (DT the) (NN parameter)) (VP (VBZ days/hours) (PP (IN through) (NP (DT the) (JJ next) (JJ drop-down) (NN menu))))))) (. .))) BinarizedTree=(ROOT (S (NP (NN User)) (@S (VP (VBZ selects) (SBAR (S (NP (DT the) (NN parameter)) (VP (VBZ days/hours) (PP (IN through) (NP (DT the) (@NP (JJ next) (@NP (JJ drop-down) (NN menu))))))))) (. .)))) CorefMentions=[the next drop-down menu, User, the parameter] AlternativeDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (prep_through)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
 SentimentAnnotatedTree=(ROOT (NP User) (@S (VP (VBZ selects) (SBAR (NP (DT the) (NN parameter)) (VP (VBZ days/hours) (PP (IN through) (NP (DT the) (@NP (JJ next) (@NP (JJ drop-down) (NN menu)))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(parameter-4, the-3)
nsubj(days/hours-5, parameter-4)
ccomp(selects-2, days/hours-5)
case(menu-10, through-6)
det(menu-10, the-7)
amod(menu-10, next-8)
amod(menu-10, drop-down-9)
nmod(days/hours-5, menu-10)
punct(selects-2, .-11)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(parameter-4, the-3)
nsubj(days/hours-5, parameter-4)
ccomp(selects-2, days/hours-5)
case(menu-10, through-6)
det(menu-10, the-7)
amod(menu-10, next-8)
amod(menu-10, drop-down-9)
nmod:through(days/hours-5, menu-10)
punct(selects-2, .-11)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(parameter-4, the-3)
nsubj(days/hours-5, parameter-4)
ccomp(selects-2, days/hours-5)
case(menu-10, through-6)
det(menu-10, the-7)
amod(menu-10, next-8)
amod(menu-10, drop-down-9)
nmod:through(days/hours-5, menu-10)
punct(selects-2, .-11)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. CharacterOffsetBegin=698 CharacterOffsetEnd=829 Tokens=[If-1, the-2, user-3, wants-4, to-5, save-6, the-7, changes-8, Then-9, click-10, on-11, the-12, Save-13, button-14, Else-15, click-16, on-17, the-18, cancel-19, button-20, to-21, not-22, update-23, the-24, changes-25, made-26, .-27] SentenceIndex=8 TokenBegin=130 TokenEnd=157 Mentions=[] CollapsedDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 BasicDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 EnhancedDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> user/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl:to)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> user/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl:to)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (VP (TO to) (VP (VB save) (SBAR (S (NP (DT the) (NNS changes)) (ADVP (RB Then)) (VP (VBP click) (PP (IN on) (NP (DT the) (NNP Save) (NN button) (RB Else)))))))))))) (VP (VBP click) (ADVP (IN on) (DT the)) (VP (VB cancel) (NP (NN button)) (S (VP (TO to) (VP (RB not) (VB update) (S (NP (DT the) (NNS changes)) (VP (VBN made)))))))) (. .))) BinarizedTree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (VP (TO to) (VP (VB save) (SBAR (S (NP (DT the) (NNS changes)) (@S (ADVP (RB Then)) (VP (VBP click) (PP (IN on) (NP (DT the) (@NP (NNP Save) (@NP (NN button) (RB Else))))))))))))))) (@S (VP (@VP (VBP click) (ADVP (IN on) (DT the))) (VP (@VP (VB cancel) (NP (NN button))) (S (VP (TO to) (VP (RB not) (@VP (VB update) (S (NP (DT the) (NNS changes)) (VP (VBN made))))))))) (. .)))) CorefMentions=[the changes, the user, the changes, the Save button Else, the, button] AlternativeDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (aux)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (prep_on)
          -> the/DT (det)
          -> Save/NNP (nn)
          -> Else/RB (advmod)
  -> on/IN (advmod)
    -> the/DT (dep)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (vmod)
      -> to/TO (aux)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
 SentimentAnnotatedTree=(ROOT (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (TO to) (VP (VB save) (SBAR (NP (DT the) (NNS changes)) (@S (ADVP Then) (VP (VBP click) (PP (IN on) (NP (DT the) (@NP (NNP Save) (@NP (NN button) (RB Else))))))))))))) (@S (VP (@VP (VBP click) (ADVP (IN on) (DT the))) (VP (@VP (VB cancel) (NP button)) (S (TO to) (VP (RB not) (@VP (VB update) (S (NP (DT the) (NNS changes)) (VP made))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, click-16)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
csubj(click-16, wants-4)
mark(save-6, to-5)
xcomp(wants-4, save-6)
det(changes-8, the-7)
nsubj(click-10, changes-8)
advmod(click-10, Then-9)
ccomp(save-6, click-10)
case(button-14, on-11)
det(button-14, the-12)
compound(button-14, Save-13)
nmod(click-10, button-14)
advmod(button-14, Else-15)
case(the-18, on-17)
advmod(click-16, the-18)
dep(click-16, cancel-19)
dobj(cancel-19, button-20)
mark(update-23, to-21)
neg(update-23, not-22)
advcl(cancel-19, update-23)
det(changes-25, the-24)
nsubj(made-26, changes-25)
dep(update-23, made-26)
punct(click-16, .-27)
","root(ROOT-0, click-16)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
nsubj:xsubj(save-6, user-3)
csubj(click-16, wants-4)
mark(save-6, to-5)
xcomp(wants-4, save-6)
det(changes-8, the-7)
nsubj(click-10, changes-8)
advmod(click-10, Then-9)
ccomp(save-6, click-10)
case(button-14, on-11)
det(button-14, the-12)
compound(button-14, Save-13)
nmod:on(click-10, button-14)
advmod(button-14, Else-15)
case(the-18, on-17)
advmod(click-16, the-18)
dep(click-16, cancel-19)
dobj(cancel-19, button-20)
mark(update-23, to-21)
neg(update-23, not-22)
advcl:to(cancel-19, update-23)
det(changes-25, the-24)
nsubj(made-26, changes-25)
dep(update-23, made-26)
punct(click-16, .-27)
","root(ROOT-0, click-16)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
nsubj:xsubj(save-6, user-3)
csubj(click-16, wants-4)
mark(save-6, to-5)
xcomp(wants-4, save-6)
det(changes-8, the-7)
nsubj(click-10, changes-8)
advmod(click-10, Then-9)
ccomp(save-6, click-10)
case(button-14, on-11)
det(button-14, the-12)
compound(button-14, Save-13)
nmod:on(click-10, button-14)
advmod(button-14, Else-15)
case(the-18, on-17)
advmod(click-16, the-18)
dep(click-16, cancel-19)
dobj(cancel-19, button-20)
mark(update-23, to-21)
neg(update-23, not-22)
advcl:to(cancel-19, update-23)
det(changes-25, the-24)
nsubj(made-26, changes-25)
dep(update-23, made-26)
punct(click-16, .-27)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. CharacterOffsetBegin=830 CharacterOffsetEnd=986 Tokens=[If-1, the-2, user-3, selects-4, as-5, many-6, appliances-7, as-8, possible-9, they-10, want-11, by-12, checking-13, the-14, box-15, Then-16, Click-17, on-18, three-dot-19, to-20, extend-21, the-22, dropdown-23, Else-24, click-25, on-26, one-27, appliance-28, .-29] SentenceIndex=9 TokenBegin=157 TokenEnd=186 Mentions=[one] CollapsedDependencies=-> want/VBP (root)
  -> selects/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> appliances/NNS (nmod:as)
      -> as/IN (case)
      -> many/JJ (amod)
    -> possible/JJ (advcl)
      -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl)
    -> by/IN (mark)
    -> Click/VB (ccomp)
      -> box/NN (nsubj)
        -> the/DT (det)
      -> Then/RB (advmod)
      -> three-dot/JJ (nmod:on)
        -> on/IN (case)
      -> extend/VB (xcomp)
        -> to/TO (mark)
        -> click/VBP (ccomp)
          -> dropdown/NN (nsubj)
            -> the/DT (det)
            -> Else/RB (advmod)
          -> appliance/NN (nmod:on)
            -> on/IN (case)
            -> one/CD (nummod)
  -> ./. (punct)
 BasicDependencies=-> want/VBP (root)
  -> selects/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> appliances/NNS (nmod)
      -> as/IN (case)
      -> many/JJ (amod)
    -> possible/JJ (advcl)
      -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl)
    -> by/IN (mark)
    -> Click/VB (ccomp)
      -> box/NN (nsubj)
        -> the/DT (det)
      -> Then/RB (advmod)
      -> three-dot/JJ (nmod)
        -> on/IN (case)
      -> extend/VB (xcomp)
        -> to/TO (mark)
        -> click/VBP (ccomp)
          -> dropdown/NN (nsubj)
            -> the/DT (det)
            -> Else/RB (advmod)
          -> appliance/NN (nmod)
            -> on/IN (case)
            -> one/CD (nummod)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> want/VBP (root)
  -> selects/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> appliances/NNS (nmod:as)
      -> as/IN (case)
      -> many/JJ (amod)
    -> possible/JJ (advcl)
      -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl)
    -> by/IN (mark)
    -> Click/VB (ccomp)
      -> box/NN (nsubj)
        -> the/DT (det)
      -> Then/RB (advmod)
      -> three-dot/JJ (nmod:on)
        -> on/IN (case)
      -> extend/VB (xcomp)
        -> to/TO (mark)
        -> click/VBP (ccomp)
          -> dropdown/NN (nsubj)
            -> the/DT (det)
            -> Else/RB (advmod)
          -> appliance/NN (nmod:on)
            -> on/IN (case)
            -> one/CD (nummod)
  -> ./. (punct)
 EnhancedDependencies=-> want/VBP (root)
  -> selects/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> appliances/NNS (nmod:as)
      -> as/IN (case)
      -> many/JJ (amod)
    -> possible/JJ (advcl:as)
      -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl:by)
    -> by/IN (mark)
    -> Click/VB (ccomp)
      -> box/NN (nsubj)
        -> the/DT (det)
      -> Then/RB (advmod)
      -> three-dot/JJ (nmod:on)
        -> on/IN (case)
      -> extend/VB (xcomp)
        -> box/NN (nsubj:xsubj)
        -> to/TO (mark)
        -> click/VBP (ccomp)
          -> dropdown/NN (nsubj)
            -> the/DT (det)
            -> Else/RB (advmod)
          -> appliance/NN (nmod:on)
            -> on/IN (case)
            -> one/CD (nummod)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> want/VBP (root)
  -> selects/VBZ (advcl:if)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> appliances/NNS (nmod:as)
      -> as/IN (case)
      -> many/JJ (amod)
    -> possible/JJ (advcl:as)
      -> as/IN (case)
  -> they/PRP (nsubj)
  -> checking/VBG (advcl:by)
    -> by/IN (mark)
    -> Click/VB (ccomp)
      -> box/NN (nsubj)
        -> the/DT (det)
      -> Then/RB (advmod)
      -> three-dot/JJ (nmod:on)
        -> on/IN (case)
      -> extend/VB (xcomp)
        -> box/NN (nsubj:xsubj)
        -> to/TO (mark)
        -> click/VBP (ccomp)
          -> dropdown/NN (nsubj)
            -> the/DT (det)
            -> Else/RB (advmod)
          -> appliance/NN (nmod:on)
            -> on/IN (case)
            -> one/CD (nummod)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (VBZ selects) (PP (IN as) (NP (JJ many) (NNS appliances))) (PP (IN as) (ADJP (JJ possible)))))) (NP (PRP they)) (VP (VBP want) (PP (IN by) (S (VP (VBG checking) (S (NP (DT the) (NN box)) (RB Then) (VP (VB Click) (PP (IN on) (NP (JJ three-dot))) (S (VP (TO to) (VP (VB extend) (SBAR (S (NP (DT the) (NN dropdown) (RB Else)) (VP (VBP click) (PP (IN on) (NP (CD one) (NN appliance))))))))))))))) (. .))) BinarizedTree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (@VP (VBZ selects) (PP (IN as) (NP (JJ many) (NNS appliances)))) (PP (IN as) (ADJP (JJ possible)))))) (@S (NP (PRP they)) (@S (VP (VBP want) (PP (IN by) (S (VP (VBG checking) (S (NP (DT the) (NN box)) (@S (RB Then) (VP (@VP (VB Click) (PP (IN on) (NP (JJ three-dot)))) (S (VP (TO to) (VP (VB extend) (SBAR (S (NP (DT the) (@NP (NN dropdown) (RB Else))) (VP (VBP click) (PP (IN on) (NP (CD one) (NN appliance)))))))))))))))) (. .))))) CorefMentions=[one, the user, many appliances, they, the box, the dropdown Else, one appliance] AlternativeDependencies=-> want/VBP (root)
  -> selects/VBZ (advcl)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> appliances/NNS (prep_as)
      -> many/JJ (amod)
    -> possible/JJ (prep_as)
  -> they/PRP (nsubj)
  -> checking/VBG (prepc_by)
    -> Click/VB (ccomp)
      -> box/NN (nsubj)
        -> the/DT (det)
      -> Then/RB (advmod)
      -> three-dot/JJ (prep_on)
      -> extend/VB (xcomp)
        -> to/TO (aux)
        -> click/VBP (ccomp)
          -> dropdown/NN (nsubj)
            -> the/DT (det)
            -> Else/RB (advmod)
          -> appliance/NN (prep_on)
            -> one/CD (num)
 SentimentAnnotatedTree=(ROOT (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (@VP (VBZ selects) (PP (IN as) (NP (JJ many) (NNS appliances)))) (PP (IN as) (ADJP possible))))) (@S (NP they) (@S (VP (VBP want) (PP (IN by) (S (VBG checking) (S (NP (DT the) (NN box)) (@S (RB Then) (VP (@VP (VB Click) (PP (IN on) (NP three-dot))) (S (TO to) (VP (VB extend) (SBAR (NP (DT the) (@NP (NN dropdown) (RB Else))) (VP (VBP click) (PP (IN on) (NP (CD one) (NN appliance))))))))))))) (. .)))) SentimentClass=Negative]","root(ROOT-0, want-11)
mark(selects-4, If-1)
det(user-3, the-2)
nsubj(selects-4, user-3)
advcl(want-11, selects-4)
case(appliances-7, as-5)
amod(appliances-7, many-6)
nmod(selects-4, appliances-7)
case(possible-9, as-8)
advcl(selects-4, possible-9)
nsubj(want-11, they-10)
mark(checking-13, by-12)
advcl(want-11, checking-13)
det(box-15, the-14)
nsubj(Click-17, box-15)
advmod(Click-17, Then-16)
ccomp(checking-13, Click-17)
case(three-dot-19, on-18)
nmod(Click-17, three-dot-19)
mark(extend-21, to-20)
xcomp(Click-17, extend-21)
det(dropdown-23, the-22)
nsubj(click-25, dropdown-23)
advmod(dropdown-23, Else-24)
ccomp(extend-21, click-25)
case(appliance-28, on-26)
nummod(appliance-28, one-27)
nmod(click-25, appliance-28)
punct(want-11, .-29)
","root(ROOT-0, want-11)
mark(selects-4, If-1)
det(user-3, the-2)
nsubj(selects-4, user-3)
advcl:if(want-11, selects-4)
case(appliances-7, as-5)
amod(appliances-7, many-6)
nmod:as(selects-4, appliances-7)
case(possible-9, as-8)
advcl:as(selects-4, possible-9)
nsubj(want-11, they-10)
mark(checking-13, by-12)
advcl:by(want-11, checking-13)
det(box-15, the-14)
nsubj(Click-17, box-15)
nsubj:xsubj(extend-21, box-15)
advmod(Click-17, Then-16)
ccomp(checking-13, Click-17)
case(three-dot-19, on-18)
nmod:on(Click-17, three-dot-19)
mark(extend-21, to-20)
xcomp(Click-17, extend-21)
det(dropdown-23, the-22)
nsubj(click-25, dropdown-23)
advmod(dropdown-23, Else-24)
ccomp(extend-21, click-25)
case(appliance-28, on-26)
nummod(appliance-28, one-27)
nmod:on(click-25, appliance-28)
punct(want-11, .-29)
","root(ROOT-0, want-11)
mark(selects-4, If-1)
det(user-3, the-2)
nsubj(selects-4, user-3)
advcl:if(want-11, selects-4)
case(appliances-7, as-5)
amod(appliances-7, many-6)
nmod:as(selects-4, appliances-7)
case(possible-9, as-8)
advcl:as(selects-4, possible-9)
nsubj(want-11, they-10)
mark(checking-13, by-12)
advcl:by(want-11, checking-13)
det(box-15, the-14)
nsubj(Click-17, box-15)
nsubj:xsubj(extend-21, box-15)
advmod(Click-17, Then-16)
ccomp(checking-13, Click-17)
case(three-dot-19, on-18)
nmod:on(Click-17, three-dot-19)
mark(extend-21, to-20)
xcomp(Click-17, extend-21)
det(dropdown-23, the-22)
nsubj(click-25, dropdown-23)
advmod(dropdown-23, Else-24)
ccomp(extend-21, click-25)
case(appliance-28, on-26)
nummod(appliance-28, one-27)
nmod:on(click-25, appliance-28)
punct(want-11, .-29)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User selects Manage Alerts. CharacterOffsetBegin=987 CharacterOffsetEnd=1014 Tokens=[User-1, selects-2, Manage-3, Alerts-4, .-5] SentenceIndex=10 TokenBegin=186 TokenEnd=191 Mentions=[] CollapsedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 BasicDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 EnhancedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (compound)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN User)) (VP (VBZ selects) (NP (NNP Manage) (NNP Alerts))) (. .))) BinarizedTree=(ROOT (S (NP (NN User)) (@S (VP (VBZ selects) (NP (NNP Manage) (NNP Alerts))) (. .)))) CorefMentions=[User, Manage Alerts] AlternativeDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> Alerts/NNP (dobj)
    -> Manage/NNP (nn)
 SentimentAnnotatedTree=(ROOT (NP User) (@S (VP (VBZ selects) (NP (NNP Manage) (NNP Alerts))) (. .))) SentimentClass=Negative]","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
compound(Alerts-4, Manage-3)
dobj(selects-2, Alerts-4)
punct(selects-2, .-5)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
compound(Alerts-4, Manage-3)
dobj(selects-2, Alerts-4)
punct(selects-2, .-5)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
compound(Alerts-4, Manage-3)
dobj(selects-2, Alerts-4)
punct(selects-2, .-5)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. CharacterOffsetBegin=1015 CharacterOffsetEnd=1187 Tokens=[If-1, the-2, User-3, wants-4, to-5, Turn-6, off-7, the-8, Alert-9, permanently-10, Then-11, click-12, on-13, the-14, Turn-15, Off-16, button-17, Else-18, to-19, pause-20, the-21, Alert-22, select-23, Pause-24, Alert-25, and-26, set-27, the-28, duration-29, for-30, pausing-31, the-32, alert-33, .-34] SentenceIndex=11 TokenBegin=191 TokenEnd=225 Mentions=[Turn Off] CollapsedDependencies=-> click/VB (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (ccomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
  -> and/CC (cc)
  -> set/VBD (conj:and)
    -> duration/NN (dobj)
      -> the/DT (det)
    -> pausing/VBG (advcl)
      -> for/IN (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
  -> ./. (punct)
 BasicDependencies=-> click/VB (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> Then/RB (advmod)
  -> Turn/NN (nmod)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (ccomp)
    -> button/NN (nmod)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
  -> and/CC (cc)
  -> set/VBD (conj)
    -> duration/NN (dobj)
      -> the/DT (det)
    -> pausing/VBG (advcl)
      -> for/IN (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> click/VB (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (ccomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
  -> and/CC (cc)
  -> set/VBD (conj:and)
    -> wants/VBZ (csubj)
    -> duration/NN (dobj)
      -> the/DT (det)
    -> pausing/VBG (advcl)
      -> for/IN (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
  -> ./. (punct)
 EnhancedDependencies=-> click/VB (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> User/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (ccomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
  -> and/CC (cc)
  -> set/VBD (conj:and)
    -> wants/VBZ (csubj)
    -> duration/NN (dobj)
      -> the/DT (det)
    -> pausing/VBG (advcl:for)
      -> for/IN (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> click/VB (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> User/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> off/RP (compound:prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> Then/RB (advmod)
  -> Turn/NN (nmod:on)
    -> on/IN (case)
    -> the/DT (det)
  -> pause/VB (ccomp)
    -> button/NN (nmod:off)
      -> Off/IN (case)
      -> Else/RB (advmod)
    -> to/TO (mark)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (compound)
  -> and/CC (cc)
  -> set/VBD (conj:and)
    -> wants/VBZ (csubj)
    -> duration/NN (dobj)
      -> the/DT (det)
    -> pausing/VBG (advcl:for)
      -> for/IN (mark)
      -> alert/NN (dobj)
        -> the/DT (det)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN User)) (VP (VBZ wants) (S (VP (TO to) (VP (VB Turn) (PRT (RP off)) (NP (DT the) (NNP Alert)) (ADVP (RB permanently)))))))) (VP (VP (ADVP (RB Then)) (VB click) (PP (IN on) (NP (DT the) (NN Turn))) (SBAR (PP (IN Off) (NP (NN button) (RB Else))) (S (VP (TO to) (VP (VB pause) (S (NP (DT the) (NNP Alert)) (NP (JJ select) (NNP Pause) (NNP Alert)))))))) (CC and) (VP (VBD set) (NP (DT the) (NN duration)) (PP (IN for) (S (VP (VBG pausing) (NP (DT the) (NN alert))))))) (. .))) BinarizedTree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN User)) (VP (VBZ wants) (S (VP (TO to) (VP (@VP (@VP (VB Turn) (PRT (RP off))) (NP (DT the) (NNP Alert))) (ADVP (RB permanently)))))))) (@S (VP (@VP (VP (ADVP (RB Then)) (@VP (@VP (VB click) (PP (IN on) (NP (DT the) (NN Turn)))) (SBAR (PP (IN Off) (NP (NN button) (RB Else))) (S (VP (TO to) (VP (VB pause) (S (NP (DT the) (NNP Alert)) (NP (JJ select) (@NP (NNP Pause) (NNP Alert)))))))))) (CC and)) (VP (@VP (VBD set) (NP (DT the) (NN duration))) (PP (IN for) (S (VP (VBG pausing) (NP (DT the) (NN alert))))))) (. .)))) CorefMentions=[Turn Off, the User, the Alert, the Turn, button Else, the Alert, the Alert select Pause Alert, the duration, the alert] AlternativeDependencies=-> click/VB (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> User/NN (nsubj)
      -> the/DT (det)
    -> Turn/VB (xcomp)
      -> to/TO (aux)
      -> off/RP (prt)
      -> Alert/NNP (dobj)
        -> the/DT (det)
      -> permanently/RB (advmod)
  -> Then/RB (advmod)
  -> Turn/NN (prep_on)
    -> the/DT (det)
  -> pause/VB (ccomp)
    -> button/NN (prep_off)
      -> Else/RB (advmod)
    -> to/TO (aux)
    -> Alert/NNP (xcomp)
      -> Alert/NNP (nsubj)
        -> the/DT (det)
      -> select/JJ (amod)
      -> Pause/NNP (nn)
  -> set/VBD (conj_and)
    -> duration/NN (dobj)
      -> the/DT (det)
    -> pausing/VBG (prepc_for)
      -> alert/NN (dobj)
        -> the/DT (det)
 SentimentAnnotatedTree=(ROOT (SBAR (IN If) (S (NP (DT the) (NN User)) (VP (VBZ wants) (S (TO to) (VP (@VP (@VP (VB Turn) (PRT off)) (NP (DT the) (NNP Alert))) (ADVP permanently)))))) (@S (VP (@VP (VP (ADVP Then) (@VP (@VP (VB click) (PP (IN on) (NP (DT the) (NN Turn)))) (SBAR (PP (IN Off) (NP (NN button) (RB Else))) (S (TO to) (VP (VB pause) (S (NP (DT the) (NNP Alert)) (NP (JJ select) (@NP (NNP Pause) (NNP Alert))))))))) (CC and)) (VP (@VP (VBD set) (NP (DT the) (NN duration))) (PP (IN for) (S (VBG pausing) (NP (DT the) (NN alert)))))) (. .))) SentimentClass=Negative]","root(ROOT-0, click-12)
mark(wants-4, If-1)
det(User-3, the-2)
nsubj(wants-4, User-3)
csubj(click-12, wants-4)
mark(Turn-6, to-5)
xcomp(wants-4, Turn-6)
compound:prt(Turn-6, off-7)
det(Alert-9, the-8)
dobj(Turn-6, Alert-9)
advmod(Turn-6, permanently-10)
advmod(click-12, Then-11)
case(Turn-15, on-13)
det(Turn-15, the-14)
nmod(click-12, Turn-15)
case(button-17, Off-16)
nmod(pause-20, button-17)
advmod(button-17, Else-18)
mark(pause-20, to-19)
ccomp(click-12, pause-20)
det(Alert-22, the-21)
nsubj(Alert-25, Alert-22)
amod(Alert-25, select-23)
compound(Alert-25, Pause-24)
xcomp(pause-20, Alert-25)
cc(click-12, and-26)
conj(click-12, set-27)
det(duration-29, the-28)
dobj(set-27, duration-29)
mark(pausing-31, for-30)
advcl(set-27, pausing-31)
det(alert-33, the-32)
dobj(pausing-31, alert-33)
punct(click-12, .-34)
","root(ROOT-0, click-12)
mark(wants-4, If-1)
det(User-3, the-2)
nsubj(wants-4, User-3)
nsubj:xsubj(Turn-6, User-3)
csubj(click-12, wants-4)
csubj(set-27, wants-4)
mark(Turn-6, to-5)
xcomp(wants-4, Turn-6)
compound:prt(Turn-6, off-7)
det(Alert-9, the-8)
dobj(Turn-6, Alert-9)
advmod(Turn-6, permanently-10)
advmod(click-12, Then-11)
case(Turn-15, on-13)
det(Turn-15, the-14)
nmod:on(click-12, Turn-15)
case(button-17, Off-16)
nmod:off(pause-20, button-17)
advmod(button-17, Else-18)
mark(pause-20, to-19)
ccomp(click-12, pause-20)
det(Alert-22, the-21)
nsubj(Alert-25, Alert-22)
amod(Alert-25, select-23)
compound(Alert-25, Pause-24)
xcomp(pause-20, Alert-25)
cc(click-12, and-26)
conj:and(click-12, set-27)
det(duration-29, the-28)
dobj(set-27, duration-29)
mark(pausing-31, for-30)
advcl:for(set-27, pausing-31)
det(alert-33, the-32)
dobj(pausing-31, alert-33)
punct(click-12, .-34)
","root(ROOT-0, click-12)
mark(wants-4, If-1)
det(User-3, the-2)
nsubj(wants-4, User-3)
nsubj:xsubj(Turn-6, User-3)
csubj(click-12, wants-4)
csubj(set-27, wants-4)
mark(Turn-6, to-5)
xcomp(wants-4, Turn-6)
compound:prt(Turn-6, off-7)
det(Alert-9, the-8)
dobj(Turn-6, Alert-9)
advmod(Turn-6, permanently-10)
advmod(click-12, Then-11)
case(Turn-15, on-13)
det(Turn-15, the-14)
nmod:on(click-12, Turn-15)
case(button-17, Off-16)
nmod:off(pause-20, button-17)
advmod(button-17, Else-18)
mark(pause-20, to-19)
ccomp(click-12, pause-20)
det(Alert-22, the-21)
nsubj(Alert-25, Alert-22)
amod(Alert-25, select-23)
compound(Alert-25, Pause-24)
xcomp(pause-20, Alert-25)
cc(click-12, and-26)
conj:and(click-12, set-27)
det(duration-29, the-28)
dobj(set-27, duration-29)
mark(pausing-31, for-30)
advcl:for(set-27, pausing-31)
det(alert-33, the-32)
dobj(pausing-31, alert-33)
punct(click-12, .-34)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=The user selects the number through the dropdown mentioned below. CharacterOffsetBegin=1188 CharacterOffsetEnd=1253 Tokens=[The-1, user-2, selects-3, the-4, number-5, through-6, the-7, dropdown-8, mentioned-9, below-10, .-11] SentenceIndex=12 TokenBegin=225 TokenEnd=236 Mentions=[] CollapsedDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 BasicDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 EnhancedDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (nmod:through)
    -> through/IN (case)
    -> the/DT (det)
    -> mentioned/VBN (acl)
      -> below/IN (nmod)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (DT The) (NN user)) (VP (VBZ selects) (NP (DT the) (NN number)) (PP (IN through) (NP (NP (DT the) (NN dropdown)) (VP (VBN mentioned) (PP (IN below)))))) (. .))) BinarizedTree=(ROOT (S (NP (DT The) (NN user)) (@S (VP (@VP (VBZ selects) (NP (DT the) (NN number))) (PP (IN through) (NP (NP (DT the) (NN dropdown)) (VP (VBN mentioned) (PP (IN below)))))) (. .)))) CorefMentions=[the number, the dropdown mentioned below, The user] AlternativeDependencies=-> selects/VBZ (root)
  -> user/NN (nsubj)
    -> The/DT (det)
  -> number/NN (dobj)
    -> the/DT (det)
  -> dropdown/NN (prep_through)
    -> the/DT (det)
    -> mentioned/VBN (vmod)
      -> below/IN (prep)
 SentimentAnnotatedTree=(ROOT (NP (DT The) (NN user)) (@S (VP (@VP (VBZ selects) (NP (DT the) (NN number))) (PP (IN through) (NP (NP (DT the) (NN dropdown)) (VP (VBN mentioned) (PP below))))) (. .))) SentimentClass=Negative]","root(ROOT-0, selects-3)
det(user-2, The-1)
nsubj(selects-3, user-2)
det(number-5, the-4)
dobj(selects-3, number-5)
case(dropdown-8, through-6)
det(dropdown-8, the-7)
nmod(selects-3, dropdown-8)
acl(dropdown-8, mentioned-9)
nmod(mentioned-9, below-10)
punct(selects-3, .-11)
","root(ROOT-0, selects-3)
det(user-2, The-1)
nsubj(selects-3, user-2)
det(number-5, the-4)
dobj(selects-3, number-5)
case(dropdown-8, through-6)
det(dropdown-8, the-7)
nmod:through(selects-3, dropdown-8)
acl(dropdown-8, mentioned-9)
nmod(mentioned-9, below-10)
punct(selects-3, .-11)
","root(ROOT-0, selects-3)
det(user-2, The-1)
nsubj(selects-3, user-2)
det(number-5, the-4)
dobj(selects-3, number-5)
case(dropdown-8, through-6)
det(dropdown-8, the-7)
nmod:through(selects-3, dropdown-8)
acl(dropdown-8, mentioned-9)
nmod(mentioned-9, below-10)
punct(selects-3, .-11)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=User selects the parameter days/hours through the next drop-down menu. CharacterOffsetBegin=1254 CharacterOffsetEnd=1324 Tokens=[User-1, selects-2, the-3, parameter-4, days/hours-5, through-6, the-7, next-8, drop-down-9, menu-10, .-11] SentenceIndex=13 TokenBegin=236 TokenEnd=247 Mentions=[] CollapsedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 BasicDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 EnhancedDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (nmod:through)
      -> through/IN (case)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (NN User)) (VP (VBZ selects) (SBAR (S (NP (DT the) (NN parameter)) (VP (VBZ days/hours) (PP (IN through) (NP (DT the) (JJ next) (JJ drop-down) (NN menu))))))) (. .))) BinarizedTree=(ROOT (S (NP (NN User)) (@S (VP (VBZ selects) (SBAR (S (NP (DT the) (NN parameter)) (VP (VBZ days/hours) (PP (IN through) (NP (DT the) (@NP (JJ next) (@NP (JJ drop-down) (NN menu))))))))) (. .)))) CorefMentions=[the next drop-down menu, User, the parameter] AlternativeDependencies=-> selects/VBZ (root)
  -> User/NN (nsubj)
  -> days/hours/VBZ (ccomp)
    -> parameter/NN (nsubj)
      -> the/DT (det)
    -> menu/NN (prep_through)
      -> the/DT (det)
      -> next/JJ (amod)
      -> drop-down/JJ (amod)
 SentimentAnnotatedTree=(ROOT (NP User) (@S (VP (VBZ selects) (SBAR (NP (DT the) (NN parameter)) (VP (VBZ days/hours) (PP (IN through) (NP (DT the) (@NP (JJ next) (@NP (JJ drop-down) (NN menu)))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(parameter-4, the-3)
nsubj(days/hours-5, parameter-4)
ccomp(selects-2, days/hours-5)
case(menu-10, through-6)
det(menu-10, the-7)
amod(menu-10, next-8)
amod(menu-10, drop-down-9)
nmod(days/hours-5, menu-10)
punct(selects-2, .-11)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(parameter-4, the-3)
nsubj(days/hours-5, parameter-4)
ccomp(selects-2, days/hours-5)
case(menu-10, through-6)
det(menu-10, the-7)
amod(menu-10, next-8)
amod(menu-10, drop-down-9)
nmod:through(days/hours-5, menu-10)
punct(selects-2, .-11)
","root(ROOT-0, selects-2)
nsubj(selects-2, User-1)
det(parameter-4, the-3)
nsubj(days/hours-5, parameter-4)
ccomp(selects-2, days/hours-5)
case(menu-10, through-6)
det(menu-10, the-7)
amod(menu-10, next-8)
amod(menu-10, drop-down-9)
nmod:through(days/hours-5, menu-10)
punct(selects-2, .-11)
","Negative"
"CORTEX","The user needs to unsubscribe to stop receiving the alerts. User selects the Appliance_type on which they want to stop getting alerts.  If the user wants to stop the alert for a specific appliance, Then the User clicks on that appliance Else the user selects as many appliances as possible they want by checking the box. User clicks on Actions drop down tab. User selects Manage Alerts. If the User wants to Turn off the Alert permanently, Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. If the user selects as many appliances as possible they want by checking the box Then Click on three-dot to extend the dropdown Else click on one appliance. User selects Manage Alerts. If the User wants to Turn off the Alert permanently Then click on the Turn Off button Else to pause the Alert select Pause Alert and set the duration for pausing the alert. The user selects the number through the dropdown mentioned below. User selects the parameter days/hours through the next drop-down menu. If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=If the user wants to save the changes Then click on the Save button Else click on the cancel button to not update the changes made. CharacterOffsetBegin=1325 CharacterOffsetEnd=1456 Tokens=[If-1, the-2, user-3, wants-4, to-5, save-6, the-7, changes-8, Then-9, click-10, on-11, the-12, Save-13, button-14, Else-15, click-16, on-17, the-18, cancel-19, button-20, to-21, not-22, update-23, the-24, changes-25, made-26, .-27] SentenceIndex=14 TokenBegin=247 TokenEnd=274 Mentions=[] CollapsedDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 BasicDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 EnhancedDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> user/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl:to)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> user/NN (nsubj:xsubj)
      -> to/TO (mark)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (nmod:on)
          -> on/IN (case)
          -> the/DT (det)
          -> Save/NNP (compound)
          -> Else/RB (advmod)
  -> the/DT (advmod)
    -> on/IN (case)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (advcl:to)
      -> to/TO (mark)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (VP (TO to) (VP (VB save) (SBAR (S (NP (DT the) (NNS changes)) (ADVP (RB Then)) (VP (VBP click) (PP (IN on) (NP (DT the) (NNP Save) (NN button) (RB Else)))))))))))) (VP (VBP click) (ADVP (IN on) (DT the)) (VP (VB cancel) (NP (NN button)) (S (VP (TO to) (VP (RB not) (VB update) (S (NP (DT the) (NNS changes)) (VP (VBN made)))))))) (. .))) BinarizedTree=(ROOT (S (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (VP (TO to) (VP (VB save) (SBAR (S (NP (DT the) (NNS changes)) (@S (ADVP (RB Then)) (VP (VBP click) (PP (IN on) (NP (DT the) (@NP (NNP Save) (@NP (NN button) (RB Else))))))))))))))) (@S (VP (@VP (VBP click) (ADVP (IN on) (DT the))) (VP (@VP (VB cancel) (NP (NN button))) (S (VP (TO to) (VP (RB not) (@VP (VB update) (S (NP (DT the) (NNS changes)) (VP (VBN made))))))))) (. .)))) CorefMentions=[the user, the changes, the Save button Else, the, button, the changes] AlternativeDependencies=-> click/VBP (root)
  -> wants/VBZ (csubj)
    -> If/IN (mark)
    -> user/NN (nsubj)
      -> the/DT (det)
    -> save/VB (xcomp)
      -> to/TO (aux)
      -> click/VBP (ccomp)
        -> changes/NNS (nsubj)
          -> the/DT (det)
        -> Then/RB (advmod)
        -> button/NN (prep_on)
          -> the/DT (det)
          -> Save/NNP (nn)
          -> Else/RB (advmod)
  -> on/IN (advmod)
    -> the/DT (dep)
  -> cancel/VB (dep)
    -> button/NN (dobj)
    -> update/VB (vmod)
      -> to/TO (aux)
      -> not/RB (neg)
      -> made/VBN (dep)
        -> changes/NNS (nsubj)
          -> the/DT (det)
 SentimentAnnotatedTree=(ROOT (SBAR (IN If) (S (NP (DT the) (NN user)) (VP (VBZ wants) (S (TO to) (VP (VB save) (SBAR (NP (DT the) (NNS changes)) (@S (ADVP Then) (VP (VBP click) (PP (IN on) (NP (DT the) (@NP (NNP Save) (@NP (NN button) (RB Else))))))))))))) (@S (VP (@VP (VBP click) (ADVP (IN on) (DT the))) (VP (@VP (VB cancel) (NP button)) (S (TO to) (VP (RB not) (@VP (VB update) (S (NP (DT the) (NNS changes)) (VP made))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, click-16)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
csubj(click-16, wants-4)
mark(save-6, to-5)
xcomp(wants-4, save-6)
det(changes-8, the-7)
nsubj(click-10, changes-8)
advmod(click-10, Then-9)
ccomp(save-6, click-10)
case(button-14, on-11)
det(button-14, the-12)
compound(button-14, Save-13)
nmod(click-10, button-14)
advmod(button-14, Else-15)
case(the-18, on-17)
advmod(click-16, the-18)
dep(click-16, cancel-19)
dobj(cancel-19, button-20)
mark(update-23, to-21)
neg(update-23, not-22)
advcl(cancel-19, update-23)
det(changes-25, the-24)
nsubj(made-26, changes-25)
dep(update-23, made-26)
punct(click-16, .-27)
","root(ROOT-0, click-16)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
nsubj:xsubj(save-6, user-3)
csubj(click-16, wants-4)
mark(save-6, to-5)
xcomp(wants-4, save-6)
det(changes-8, the-7)
nsubj(click-10, changes-8)
advmod(click-10, Then-9)
ccomp(save-6, click-10)
case(button-14, on-11)
det(button-14, the-12)
compound(button-14, Save-13)
nmod:on(click-10, button-14)
advmod(button-14, Else-15)
case(the-18, on-17)
advmod(click-16, the-18)
dep(click-16, cancel-19)
dobj(cancel-19, button-20)
mark(update-23, to-21)
neg(update-23, not-22)
advcl:to(cancel-19, update-23)
det(changes-25, the-24)
nsubj(made-26, changes-25)
dep(update-23, made-26)
punct(click-16, .-27)
","root(ROOT-0, click-16)
mark(wants-4, If-1)
det(user-3, the-2)
nsubj(wants-4, user-3)
nsubj:xsubj(save-6, user-3)
csubj(click-16, wants-4)
mark(save-6, to-5)
xcomp(wants-4, save-6)
det(changes-8, the-7)
nsubj(click-10, changes-8)
advmod(click-10, Then-9)
ccomp(save-6, click-10)
case(button-14, on-11)
det(button-14, the-12)
compound(button-14, Save-13)
nmod:on(click-10, button-14)
advmod(button-14, Else-15)
case(the-18, on-17)
advmod(click-16, the-18)
dep(click-16, cancel-19)
dobj(cancel-19, button-20)
mark(update-23, to-21)
neg(update-23, not-22)
advcl:to(cancel-19, update-23)
det(changes-25, the-24)
nsubj(made-26, changes-25)
dep(update-23, made-26)
punct(click-16, .-27)
","Negative"

"Test case ID","User Story","Keys of sentence","Sentence analysis","Basic Dependencies","Enhanced Dependencies","Enhanced Plus Plus dependencies","Sentiment"
"CORTEX","Detailed logs should be stored in Audit Trial collection in Asup_Prod database for login and log-out events
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance site. This includes changes in site name, site details, site is replaced with new site, site is replaced with existing site.
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance contacts. This includes changes when new contacts are added, existing contacts are edited or updated, appliance contacts are deleted.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=Detailed logs should be stored in Audit Trial collection in Asup_Prod database for login and log-out events
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance site. CharacterOffsetBegin=0 CharacterOffsetEnd=217 Tokens=[Detailed-1, logs-2, should-3, be-4, stored-5, in-6, Audit-7, Trial-8, collection-9, in-10, Asup_Prod-11, database-12, for-13, login-14, and-15, log-out-16, events-17, Detailed-18, logs-19, should-20, be-21, stored-22, in-23, Audit-24, Trial-25, collection-26, in-27, Asup_Prod-28, database-29, for-30, changes-31, in-32, appliance-33, site-34, .-35] SentenceIndex=0 TokenBegin=0 TokenEnd=35 Mentions=[] CollapsedDependencies=-> stored/VBN (root)
  -> stored/VBN (dep)
    -> logs/NNS (nsubjpass)
      -> Detailed/JJ (amod)
    -> should/MD (aux)
    -> be/VB (auxpass)
    -> collection/NN (nmod:in)
      -> in/IN (case)
      -> Audit/NNP (compound)
      -> Trial/NNP (compound)
    -> database/NN (nmod:in)
      -> in/IN (case)
      -> Asup_Prod/NN (compound)
      -> events/NNS (nmod:for)
        -> for/IN (case)
        -> login/NN (compound)
          -> and/CC (cc)
          -> log-out/JJ (conj:and)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> site/NN (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 BasicDependencies=-> stored/VBN (root)
  -> stored/VBN (dep)
    -> logs/NNS (nsubjpass)
      -> Detailed/JJ (amod)
    -> should/MD (aux)
    -> be/VB (auxpass)
    -> collection/NN (nmod)
      -> in/IN (case)
      -> Audit/NNP (compound)
      -> Trial/NNP (compound)
    -> database/NN (nmod)
      -> in/IN (case)
      -> Asup_Prod/NN (compound)
      -> events/NNS (nmod)
        -> for/IN (case)
        -> login/NN (compound)
          -> and/CC (cc)
          -> log-out/JJ (conj)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod)
      -> for/IN (case)
      -> site/NN (nmod)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> stored/VBN (root)
  -> stored/VBN (dep)
    -> logs/NNS (nsubjpass)
      -> Detailed/JJ (amod)
    -> should/MD (aux)
    -> be/VB (auxpass)
    -> collection/NN (nmod:in)
      -> in/IN (case)
      -> Audit/NNP (compound)
      -> Trial/NNP (compound)
    -> database/NN (nmod:in)
      -> in/IN (case)
      -> Asup_Prod/NN (compound)
      -> events/NNS (nmod:for)
        -> for/IN (case)
        -> login/NN (compound)
          -> and/CC (cc)
          -> log-out/JJ (conj:and)
        -> log-out/JJ (compound)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> site/NN (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 EnhancedDependencies=-> stored/VBN (root)
  -> stored/VBN (dep)
    -> logs/NNS (nsubjpass)
      -> Detailed/JJ (amod)
    -> should/MD (aux)
    -> be/VB (auxpass)
    -> collection/NN (nmod:in)
      -> in/IN (case)
      -> Audit/NNP (compound)
      -> Trial/NNP (compound)
    -> database/NN (nmod:in)
      -> in/IN (case)
      -> Asup_Prod/NN (compound)
      -> events/NNS (nmod:for)
        -> for/IN (case)
        -> login/NN (compound)
          -> and/CC (cc)
          -> log-out/JJ (conj:and)
        -> log-out/JJ (compound)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> site/NN (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> stored/VBN (root)
  -> stored/VBN (dep)
    -> logs/NNS (nsubjpass)
      -> Detailed/JJ (amod)
    -> should/MD (aux)
    -> be/VB (auxpass)
    -> collection/NN (nmod:in)
      -> in/IN (case)
      -> Audit/NNP (compound)
      -> Trial/NNP (compound)
    -> database/NN (nmod:in)
      -> in/IN (case)
      -> Asup_Prod/NN (compound)
      -> events/NNS (nmod:for)
        -> for/IN (case)
        -> login/NN (compound)
          -> and/CC (cc)
          -> log-out/JJ (conj:and)
        -> log-out/JJ (compound)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> site/NN (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (S (NP (JJ Detailed) (NNS logs)) (VP (MD should) (VP (VB be) (VP (VBN stored) (PP (IN in) (NP (NNP Audit) (NNP Trial) (NN collection))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NN login) (CC and) (JJ log-out) (NNS events))))))))) (NP (JJ Detailed) (NNS logs)) (VP (MD should) (VP (VB be) (VP (VBN stored) (PP (IN in) (NP (NNP Audit) (NNP Trial) (NN collection))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NP (NNS changes)) (PP (IN in) (NP (NN appliance) (NN site)))))))))) (. .))) BinarizedTree=(ROOT (S (S (NP (JJ Detailed) (NNS logs)) (VP (MD should) (VP (VB be) (VP (@VP (VBN stored) (PP (IN in) (NP (NNP Audit) (@NP (NNP Trial) (NN collection))))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NN login) (@NP (CC and) (@NP (JJ log-out) (NNS events))))))))))) (@S (NP (JJ Detailed) (NNS logs)) (@S (VP (MD should) (VP (VB be) (VP (@VP (VBN stored) (PP (IN in) (NP (NNP Audit) (@NP (NNP Trial) (NN collection))))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NP (NNS changes)) (PP (IN in) (NP (NN appliance) (NN site)))))))))) (. .))))) CorefMentions=[Detailed logs, Audit Trial collection, Asup_Prod database for login and log-out events, login and log-out events, Detailed logs, Audit Trial collection, Asup_Prod database for changes in appliance site, changes in appliance site, appliance site] AlternativeDependencies=-> stored/VBN (root)
  -> stored/VBN (dep)
    -> logs/NNS (nsubjpass)
      -> Detailed/JJ (amod)
    -> should/MD (aux)
    -> be/VB (auxpass)
    -> collection/NN (prep_in)
      -> Audit/NNP (nn)
      -> Trial/NNP (nn)
    -> database/NN (prep_in)
      -> Asup_Prod/NN (nn)
      -> events/NNS (prep_for)
        -> login/NN (nn)
          -> log-out/JJ (conj_and)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (prep_in)
    -> Audit/NNP (nn)
    -> Trial/NNP (nn)
  -> database/NN (prep_in)
    -> Asup_Prod/NN (nn)
    -> changes/NNS (prep_for)
      -> site/NN (prep_in)
        -> appliance/NN (nn)
 SentimentAnnotatedTree=(ROOT (S (NP (JJ Detailed) (NNS logs)) (VP (MD should) (VP (VB be) (VP (@VP (VBN stored) (PP (IN in) (NP (NNP Audit) (@NP (NNP Trial) (NN collection))))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NN login) (@NP (CC and) (@NP (JJ log-out) (NNS events))))))))))) (@S (NP (JJ Detailed) (NNS logs)) (@S (VP (MD should) (VP (VB be) (VP (@VP (VBN stored) (PP (IN in) (NP (NNP Audit) (@NP (NNP Trial) (NN collection))))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NP changes) (PP (IN in) (NP (NN appliance) (NN site)))))))))) (. .)))) SentimentClass=Negative]","root(ROOT-0, stored-22)
amod(logs-2, Detailed-1)
nsubjpass(stored-5, logs-2)
aux(stored-5, should-3)
auxpass(stored-5, be-4)
dep(stored-22, stored-5)
case(collection-9, in-6)
compound(collection-9, Audit-7)
compound(collection-9, Trial-8)
nmod(stored-5, collection-9)
case(database-12, in-10)
compound(database-12, Asup_Prod-11)
nmod(stored-5, database-12)
case(events-17, for-13)
compound(events-17, login-14)
cc(login-14, and-15)
conj(login-14, log-out-16)
nmod(database-12, events-17)
amod(logs-19, Detailed-18)
nsubjpass(stored-22, logs-19)
aux(stored-22, should-20)
auxpass(stored-22, be-21)
case(collection-26, in-23)
compound(collection-26, Audit-24)
compound(collection-26, Trial-25)
nmod(stored-22, collection-26)
case(database-29, in-27)
compound(database-29, Asup_Prod-28)
nmod(stored-22, database-29)
case(changes-31, for-30)
nmod(database-29, changes-31)
case(site-34, in-32)
compound(site-34, appliance-33)
nmod(changes-31, site-34)
punct(stored-22, .-35)
","root(ROOT-0, stored-22)
amod(logs-2, Detailed-1)
nsubjpass(stored-5, logs-2)
aux(stored-5, should-3)
auxpass(stored-5, be-4)
dep(stored-22, stored-5)
case(collection-9, in-6)
compound(collection-9, Audit-7)
compound(collection-9, Trial-8)
nmod:in(stored-5, collection-9)
case(database-12, in-10)
compound(database-12, Asup_Prod-11)
nmod:in(stored-5, database-12)
case(events-17, for-13)
compound(events-17, login-14)
cc(login-14, and-15)
conj:and(login-14, log-out-16)
compound(events-17, log-out-16)
nmod:for(database-12, events-17)
amod(logs-19, Detailed-18)
nsubjpass(stored-22, logs-19)
aux(stored-22, should-20)
auxpass(stored-22, be-21)
case(collection-26, in-23)
compound(collection-26, Audit-24)
compound(collection-26, Trial-25)
nmod:in(stored-22, collection-26)
case(database-29, in-27)
compound(database-29, Asup_Prod-28)
nmod:in(stored-22, database-29)
case(changes-31, for-30)
nmod:for(database-29, changes-31)
case(site-34, in-32)
compound(site-34, appliance-33)
nmod:in(changes-31, site-34)
punct(stored-22, .-35)
","root(ROOT-0, stored-22)
amod(logs-2, Detailed-1)
nsubjpass(stored-5, logs-2)
aux(stored-5, should-3)
auxpass(stored-5, be-4)
dep(stored-22, stored-5)
case(collection-9, in-6)
compound(collection-9, Audit-7)
compound(collection-9, Trial-8)
nmod:in(stored-5, collection-9)
case(database-12, in-10)
compound(database-12, Asup_Prod-11)
nmod:in(stored-5, database-12)
case(events-17, for-13)
compound(events-17, login-14)
cc(login-14, and-15)
conj:and(login-14, log-out-16)
compound(events-17, log-out-16)
nmod:for(database-12, events-17)
amod(logs-19, Detailed-18)
nsubjpass(stored-22, logs-19)
aux(stored-22, should-20)
auxpass(stored-22, be-21)
case(collection-26, in-23)
compound(collection-26, Audit-24)
compound(collection-26, Trial-25)
nmod:in(stored-22, collection-26)
case(database-29, in-27)
compound(database-29, Asup_Prod-28)
nmod:in(stored-22, database-29)
case(changes-31, for-30)
nmod:for(database-29, changes-31)
case(site-34, in-32)
compound(site-34, appliance-33)
nmod:in(changes-31, site-34)
punct(stored-22, .-35)
","Negative"
"CORTEX","Detailed logs should be stored in Audit Trial collection in Asup_Prod database for login and log-out events
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance site. This includes changes in site name, site details, site is replaced with new site, site is replaced with existing site.
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance contacts. This includes changes when new contacts are added, existing contacts are edited or updated, appliance contacts are deleted.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=This includes changes in site name, site details, site is replaced with new site, site is replaced with existing site. CharacterOffsetBegin=218 CharacterOffsetEnd=336 Tokens=[This-1, includes-2, changes-3, in-4, site-5, name-6, ,-7, site-8, details-9, ,-10, site-11, is-12, replaced-13, with-14, new-15, site-16, ,-17, site-18, is-19, replaced-20, with-21, existing-22, site-23, .-24] SentenceIndex=1 TokenBegin=35 TokenEnd=59 Mentions=[] CollapsedDependencies=-> replaced/VBN (root)
  -> includes/VBZ (ccomp)
    -> This/DT (nsubj)
    -> replaced/VBN (ccomp)
      -> changes/NNS (nsubjpass)
        -> name/NN (nmod:in)
          -> in/IN (case)
          -> site/NN (compound)
          -> ,/, (punct)
          -> details/NNS (appos)
            -> site/NN (compound)
            -> ,/, (punct)
            -> site/NN (appos)
      -> is/VBZ (auxpass)
      -> site/NN (nmod:with)
        -> with/IN (case)
        -> new/JJ (amod)
  -> ,/, (punct)
  -> site/NN (nsubjpass)
  -> is/VBZ (auxpass)
  -> site/NN (nmod:with)
    -> with/IN (case)
    -> existing/VBG (amod)
  -> ./. (punct)
 BasicDependencies=-> replaced/VBN (root)
  -> includes/VBZ (ccomp)
    -> This/DT (nsubj)
    -> replaced/VBN (ccomp)
      -> changes/NNS (nsubjpass)
        -> name/NN (nmod)
          -> in/IN (case)
          -> site/NN (compound)
          -> ,/, (punct)
          -> details/NNS (appos)
            -> site/NN (compound)
            -> ,/, (punct)
            -> site/NN (appos)
      -> is/VBZ (auxpass)
      -> site/NN (nmod)
        -> with/IN (case)
        -> new/JJ (amod)
  -> ,/, (punct)
  -> site/NN (nsubjpass)
  -> is/VBZ (auxpass)
  -> site/NN (nmod)
    -> with/IN (case)
    -> existing/VBG (amod)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> replaced/VBN (root)
  -> includes/VBZ (ccomp)
    -> This/DT (nsubj)
    -> replaced/VBN (ccomp)
      -> changes/NNS (nsubjpass)
        -> name/NN (nmod:in)
          -> in/IN (case)
          -> site/NN (compound)
          -> ,/, (punct)
          -> details/NNS (appos)
            -> site/NN (compound)
            -> ,/, (punct)
            -> site/NN (appos)
      -> is/VBZ (auxpass)
      -> site/NN (nmod:with)
        -> with/IN (case)
        -> new/JJ (amod)
  -> ,/, (punct)
  -> site/NN (nsubjpass)
  -> is/VBZ (auxpass)
  -> site/NN (nmod:with)
    -> with/IN (case)
    -> existing/VBG (amod)
  -> ./. (punct)
 EnhancedDependencies=-> replaced/VBN (root)
  -> includes/VBZ (ccomp)
    -> This/DT (nsubj)
    -> replaced/VBN (ccomp)
      -> changes/NNS (nsubjpass)
        -> name/NN (nmod:in)
          -> in/IN (case)
          -> site/NN (compound)
          -> ,/, (punct)
          -> details/NNS (appos)
            -> site/NN (compound)
            -> ,/, (punct)
            -> site/NN (appos)
      -> is/VBZ (auxpass)
      -> site/NN (nmod:with)
        -> with/IN (case)
        -> new/JJ (amod)
  -> ,/, (punct)
  -> site/NN (nsubjpass)
  -> is/VBZ (auxpass)
  -> site/NN (nmod:with)
    -> with/IN (case)
    -> existing/VBG (amod)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> replaced/VBN (root)
  -> includes/VBZ (ccomp)
    -> This/DT (nsubj)
    -> replaced/VBN (ccomp)
      -> changes/NNS (nsubjpass)
        -> name/NN (nmod:in)
          -> in/IN (case)
          -> site/NN (compound)
          -> ,/, (punct)
          -> details/NNS (appos)
            -> site/NN (compound)
            -> ,/, (punct)
            -> site/NN (appos)
      -> is/VBZ (auxpass)
      -> site/NN (nmod:with)
        -> with/IN (case)
        -> new/JJ (amod)
  -> ,/, (punct)
  -> site/NN (nsubjpass)
  -> is/VBZ (auxpass)
  -> site/NN (nmod:with)
    -> with/IN (case)
    -> existing/VBG (amod)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (S (NP (DT This)) (VP (VBZ includes) (SBAR (S (NP (NP (NNS changes)) (PP (IN in) (NP (NP (NN site) (NN name)) (, ,) (NP (NP (NN site) (NNS details)) (, ,) (NP (NN site)))))) (VP (VBZ is) (VP (VBN replaced) (PP (IN with) (NP (JJ new) (NN site))))))))) (, ,) (NP (NN site)) (VP (VBZ is) (VP (VBN replaced) (PP (IN with) (NP (VBG existing) (NN site))))) (. .))) BinarizedTree=(ROOT (S (S (NP (DT This)) (VP (VBZ includes) (SBAR (S (NP (NP (NNS changes)) (PP (IN in) (NP (@NP (NP (NN site) (NN name)) (, ,)) (NP (@NP (NP (NN site) (NNS details)) (, ,)) (NP (NN site)))))) (VP (VBZ is) (VP (VBN replaced) (PP (IN with) (NP (JJ new) (NN site))))))))) (@S (, ,) (@S (NP (NN site)) (@S (VP (VBZ is) (VP (VBN replaced) (PP (IN with) (NP (VBG existing) (NN site))))) (. .)))))) CorefMentions=[changes in site name , site details , site, site name , site details , site, site details , site, site, new site, site, existing site, This] AlternativeDependencies=-> replaced/VBN (root)
  -> includes/VBZ (ccomp)
    -> This/DT (nsubj)
    -> replaced/VBN (ccomp)
      -> changes/NNS (nsubjpass)
        -> name/NN (prep_in)
          -> site/NN (nn)
          -> details/NNS (appos)
            -> site/NN (nn)
            -> site/NN (appos)
      -> is/VBZ (auxpass)
      -> site/NN (prep_with)
        -> new/JJ (amod)
  -> site/NN (nsubjpass)
  -> is/VBZ (auxpass)
  -> site/NN (prep_with)
    -> existing/VBG (amod)
 SentimentAnnotatedTree=(ROOT (S (NP This) (VP (VBZ includes) (SBAR (NP (NP changes) (PP (IN in) (NP (@NP (NP (NN site) (NN name)) (, ,)) (NP (@NP (NP (NN site) (NNS details)) (, ,)) (NP site))))) (VP (VBZ is) (VP (VBN replaced) (PP (IN with) (NP (JJ new) (NN site)))))))) (@S (, ,) (@S (NP site) (@S (VP (VBZ is) (VP (VBN replaced) (PP (IN with) (NP (VBG existing) (NN site))))) (. .))))) SentimentClass=Negative]","root(ROOT-0, replaced-20)
nsubj(includes-2, This-1)
ccomp(replaced-20, includes-2)
nsubjpass(replaced-13, changes-3)
case(name-6, in-4)
compound(name-6, site-5)
nmod(changes-3, name-6)
punct(name-6, ,-7)
compound(details-9, site-8)
appos(name-6, details-9)
punct(details-9, ,-10)
appos(details-9, site-11)
auxpass(replaced-13, is-12)
ccomp(includes-2, replaced-13)
case(site-16, with-14)
amod(site-16, new-15)
nmod(replaced-13, site-16)
punct(replaced-20, ,-17)
nsubjpass(replaced-20, site-18)
auxpass(replaced-20, is-19)
case(site-23, with-21)
amod(site-23, existing-22)
nmod(replaced-20, site-23)
punct(replaced-20, .-24)
","root(ROOT-0, replaced-20)
nsubj(includes-2, This-1)
ccomp(replaced-20, includes-2)
nsubjpass(replaced-13, changes-3)
case(name-6, in-4)
compound(name-6, site-5)
nmod:in(changes-3, name-6)
punct(name-6, ,-7)
compound(details-9, site-8)
appos(name-6, details-9)
punct(details-9, ,-10)
appos(details-9, site-11)
auxpass(replaced-13, is-12)
ccomp(includes-2, replaced-13)
case(site-16, with-14)
amod(site-16, new-15)
nmod:with(replaced-13, site-16)
punct(replaced-20, ,-17)
nsubjpass(replaced-20, site-18)
auxpass(replaced-20, is-19)
case(site-23, with-21)
amod(site-23, existing-22)
nmod:with(replaced-20, site-23)
punct(replaced-20, .-24)
","root(ROOT-0, replaced-20)
nsubj(includes-2, This-1)
ccomp(replaced-20, includes-2)
nsubjpass(replaced-13, changes-3)
case(name-6, in-4)
compound(name-6, site-5)
nmod:in(changes-3, name-6)
punct(name-6, ,-7)
compound(details-9, site-8)
appos(name-6, details-9)
punct(details-9, ,-10)
appos(details-9, site-11)
auxpass(replaced-13, is-12)
ccomp(includes-2, replaced-13)
case(site-16, with-14)
amod(site-16, new-15)
nmod:with(replaced-13, site-16)
punct(replaced-20, ,-17)
nsubjpass(replaced-20, site-18)
auxpass(replaced-20, is-19)
case(site-23, with-21)
amod(site-23, existing-22)
nmod:with(replaced-20, site-23)
punct(replaced-20, .-24)
","Negative"
"CORTEX","Detailed logs should be stored in Audit Trial collection in Asup_Prod database for login and log-out events
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance site. This includes changes in site name, site details, site is replaced with new site, site is replaced with existing site.
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance contacts. This includes changes when new contacts are added, existing contacts are edited or updated, appliance contacts are deleted.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance contacts. CharacterOffsetBegin=337 CharacterOffsetEnd=450 Tokens=[Detailed-1, logs-2, should-3, be-4, stored-5, in-6, Audit-7, Trial-8, collection-9, in-10, Asup_Prod-11, database-12, for-13, changes-14, in-15, appliance-16, contacts-17, .-18] SentenceIndex=2 TokenBegin=59 TokenEnd=77 Mentions=[] CollapsedDependencies=-> stored/VBN (root)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> contacts/NNS (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 BasicDependencies=-> stored/VBN (root)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod)
      -> for/IN (case)
      -> contacts/NNS (nmod)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> stored/VBN (root)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> contacts/NNS (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 EnhancedDependencies=-> stored/VBN (root)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> contacts/NNS (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> stored/VBN (root)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (nmod:in)
    -> in/IN (case)
    -> Audit/NNP (compound)
    -> Trial/NNP (compound)
  -> database/NN (nmod:in)
    -> in/IN (case)
    -> Asup_Prod/NN (compound)
    -> changes/NNS (nmod:for)
      -> for/IN (case)
      -> contacts/NNS (nmod:in)
        -> in/IN (case)
        -> appliance/NN (compound)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (NP (JJ Detailed) (NNS logs)) (VP (MD should) (VP (VB be) (VP (VBN stored) (PP (IN in) (NP (NNP Audit) (NNP Trial) (NN collection))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NP (NNS changes)) (PP (IN in) (NP (NN appliance) (NNS contacts)))))))))) (. .))) BinarizedTree=(ROOT (S (NP (JJ Detailed) (NNS logs)) (@S (VP (MD should) (VP (VB be) (VP (@VP (VBN stored) (PP (IN in) (NP (NNP Audit) (@NP (NNP Trial) (NN collection))))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NP (NNS changes)) (PP (IN in) (NP (NN appliance) (NNS contacts)))))))))) (. .)))) CorefMentions=[Audit Trial collection, Asup_Prod database for changes in appliance contacts, changes in appliance contacts, appliance contacts, Detailed logs] AlternativeDependencies=-> stored/VBN (root)
  -> logs/NNS (nsubjpass)
    -> Detailed/JJ (amod)
  -> should/MD (aux)
  -> be/VB (auxpass)
  -> collection/NN (prep_in)
    -> Audit/NNP (nn)
    -> Trial/NNP (nn)
  -> database/NN (prep_in)
    -> Asup_Prod/NN (nn)
    -> changes/NNS (prep_for)
      -> contacts/NNS (prep_in)
        -> appliance/NN (nn)
 SentimentAnnotatedTree=(ROOT (NP (JJ Detailed) (NNS logs)) (@S (VP (MD should) (VP (VB be) (VP (@VP (VBN stored) (PP (IN in) (NP (NNP Audit) (@NP (NNP Trial) (NN collection))))) (PP (IN in) (NP (NP (NN Asup_Prod) (NN database)) (PP (IN for) (NP (NP changes) (PP (IN in) (NP (NN appliance) (NNS contacts)))))))))) (. .))) SentimentClass=Negative]","root(ROOT-0, stored-5)
amod(logs-2, Detailed-1)
nsubjpass(stored-5, logs-2)
aux(stored-5, should-3)
auxpass(stored-5, be-4)
case(collection-9, in-6)
compound(collection-9, Audit-7)
compound(collection-9, Trial-8)
nmod(stored-5, collection-9)
case(database-12, in-10)
compound(database-12, Asup_Prod-11)
nmod(stored-5, database-12)
case(changes-14, for-13)
nmod(database-12, changes-14)
case(contacts-17, in-15)
compound(contacts-17, appliance-16)
nmod(changes-14, contacts-17)
punct(stored-5, .-18)
","root(ROOT-0, stored-5)
amod(logs-2, Detailed-1)
nsubjpass(stored-5, logs-2)
aux(stored-5, should-3)
auxpass(stored-5, be-4)
case(collection-9, in-6)
compound(collection-9, Audit-7)
compound(collection-9, Trial-8)
nmod:in(stored-5, collection-9)
case(database-12, in-10)
compound(database-12, Asup_Prod-11)
nmod:in(stored-5, database-12)
case(changes-14, for-13)
nmod:for(database-12, changes-14)
case(contacts-17, in-15)
compound(contacts-17, appliance-16)
nmod:in(changes-14, contacts-17)
punct(stored-5, .-18)
","root(ROOT-0, stored-5)
amod(logs-2, Detailed-1)
nsubjpass(stored-5, logs-2)
aux(stored-5, should-3)
auxpass(stored-5, be-4)
case(collection-9, in-6)
compound(collection-9, Audit-7)
compound(collection-9, Trial-8)
nmod:in(stored-5, collection-9)
case(database-12, in-10)
compound(database-12, Asup_Prod-11)
nmod:in(stored-5, database-12)
case(changes-14, for-13)
nmod:for(database-12, changes-14)
case(contacts-17, in-15)
compound(contacts-17, appliance-16)
nmod:in(changes-14, contacts-17)
punct(stored-5, .-18)
","Negative"
"CORTEX","Detailed logs should be stored in Audit Trial collection in Asup_Prod database for login and log-out events
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance site. This includes changes in site name, site details, site is replaced with new site, site is replaced with existing site.
Detailed logs should be stored in Audit Trial collection in Asup_Prod database for changes in appliance contacts. This includes changes when new contacts are added, existing contacts are edited or updated, appliance contacts are deleted.","[class edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedDependenciesAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$EnhancedPlusPlusDependenciesAnnotation, class edu.stanford.nlp.ling.CoreAnnotations$KBPTriplesAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation, class edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation, class edu.stanford.nlp.coref.CorefCoreAnnotations$CorefMentionsAnnotation, class edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$AlternativeDependenciesAnnotation, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentAnnotatedTree, class edu.stanford.nlp.sentiment.SentimentCoreAnnotations$SentimentClass]","[Text=This includes changes when new contacts are added, existing contacts are edited or updated, appliance contacts are deleted. CharacterOffsetBegin=451 CharacterOffsetEnd=574 Tokens=[This-1, includes-2, changes-3, when-4, new-5, contacts-6, are-7, added-8, ,-9, existing-10, contacts-11, are-12, edited-13, or-14, updated-15, ,-16, appliance-17, contacts-18, are-19, deleted-20, .-21] SentenceIndex=3 TokenBegin=77 TokenEnd=98 Mentions=[] CollapsedDependencies=-> includes/VBZ (root)
  -> This/DT (nsubj)
  -> changes/NNS (dobj)
    -> added/VBN (acl:relcl)
      -> when/WRB (advmod)
      -> contacts/NNS (nsubjpass)
        -> new/JJ (amod)
      -> are/VBP (auxpass)
  -> ,/, (punct)
  -> edited/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> existing/VBG (amod)
    -> are/VBP (auxpass)
    -> or/CC (cc)
    -> updated/VBN (conj:or)
  -> ,/, (punct)
  -> deleted/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> appliance/NN (compound)
    -> are/VBP (auxpass)
  -> ./. (punct)
 BasicDependencies=-> includes/VBZ (root)
  -> This/DT (nsubj)
  -> changes/NNS (dobj)
    -> added/VBN (acl:relcl)
      -> when/WRB (advmod)
      -> contacts/NNS (nsubjpass)
        -> new/JJ (amod)
      -> are/VBP (auxpass)
  -> ,/, (punct)
  -> edited/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> existing/VBG (amod)
    -> are/VBP (auxpass)
    -> or/CC (cc)
    -> updated/VBN (conj)
  -> ,/, (punct)
  -> deleted/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> appliance/NN (compound)
    -> are/VBP (auxpass)
  -> ./. (punct)
 CollapsedCCProcessedDependencies=-> includes/VBZ (root)
  -> This/DT (nsubj)
  -> changes/NNS (dobj)
    -> added/VBN (acl:relcl)
      -> when/WRB (advmod)
      -> contacts/NNS (nsubjpass)
        -> new/JJ (amod)
      -> are/VBP (auxpass)
  -> ,/, (punct)
  -> edited/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> existing/VBG (amod)
    -> are/VBP (auxpass)
    -> or/CC (cc)
    -> updated/VBN (conj:or)
      -> contacts/NNS (nsubjpass)
  -> updated/VBN (parataxis)
  -> ,/, (punct)
  -> deleted/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> appliance/NN (compound)
    -> are/VBP (auxpass)
  -> ./. (punct)
 EnhancedDependencies=-> includes/VBZ (root)
  -> This/DT (nsubj)
  -> changes/NNS (dobj)
    -> added/VBN (acl:relcl)
      -> when/WRB (advmod)
      -> contacts/NNS (nsubjpass)
        -> new/JJ (amod)
      -> are/VBP (auxpass)
  -> ,/, (punct)
  -> edited/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> existing/VBG (amod)
    -> are/VBP (auxpass)
    -> or/CC (cc)
    -> updated/VBN (conj:or)
      -> contacts/NNS (nsubjpass)
  -> updated/VBN (parataxis)
  -> ,/, (punct)
  -> deleted/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> appliance/NN (compound)
    -> are/VBP (auxpass)
  -> ./. (punct)
 EnhancedPlusPlusDependencies=-> includes/VBZ (root)
  -> This/DT (nsubj)
  -> changes/NNS (dobj)
    -> added/VBN (acl:relcl)
      -> when/WRB (advmod)
      -> contacts/NNS (nsubjpass)
        -> new/JJ (amod)
      -> are/VBP (auxpass)
  -> ,/, (punct)
  -> edited/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> existing/VBG (amod)
    -> are/VBP (auxpass)
    -> or/CC (cc)
    -> updated/VBN (conj:or)
      -> contacts/NNS (nsubjpass)
  -> updated/VBN (parataxis)
  -> ,/, (punct)
  -> deleted/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> appliance/NN (compound)
    -> are/VBP (auxpass)
  -> ./. (punct)
 KBPTriples=[] Tree=(ROOT (S (S (NP (DT This)) (VP (VBZ includes) (NP (NP (NNS changes)) (SBAR (WHADVP (WRB when)) (S (NP (JJ new) (NNS contacts)) (VP (VBP are) (VP (VBN added)))))))) (, ,) (S (NP (VBG existing) (NNS contacts)) (VP (VBP are) (VP (VBN edited) (CC or) (VBN updated)))) (, ,) (S (NP (NN appliance) (NNS contacts)) (VP (VBP are) (VP (VBN deleted)))) (. .))) BinarizedTree=(ROOT (S (@S (@S (@S (@S (S (NP (DT This)) (VP (VBZ includes) (NP (NP (NNS changes)) (SBAR (WHADVP (WRB when)) (S (NP (JJ new) (NNS contacts)) (VP (VBP are) (VP (VBN added)))))))) (, ,)) (S (NP (VBG existing) (NNS contacts)) (VP (VBP are) (VP (@VP (VBN edited) (CC or)) (VBN updated))))) (, ,)) (S (NP (NN appliance) (NNS contacts)) (VP (VBP are) (VP (VBN deleted))))) (. .))) CorefMentions=[existing contacts, appliance contacts, This, changes when new contacts are added, new contacts] AlternativeDependencies=-> includes/VBZ (root)
  -> This/DT (nsubj)
  -> changes/NNS (dobj)
    -> added/VBN (rcmod)
      -> when/WRB (advmod)
      -> contacts/NNS (nsubjpass)
        -> new/JJ (amod)
      -> are/VBP (auxpass)
  -> edited/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> existing/VBG (amod)
    -> are/VBP (auxpass)
    -> updated/VBN (conj_or)
  -> deleted/VBN (parataxis)
    -> contacts/NNS (nsubjpass)
      -> appliance/NN (nn)
    -> are/VBP (auxpass)
 SentimentAnnotatedTree=(ROOT (@S (@S (@S (@S (S (NP This) (VP (VBZ includes) (NP (NP changes) (SBAR (WHADVP when) (S (NP (JJ new) (NNS contacts)) (VP (VBP are) (VP added))))))) (, ,)) (S (NP (VBG existing) (NNS contacts)) (VP (VBP are) (VP (@VP (VBN edited) (CC or)) (VBN updated))))) (, ,)) (S (NP (NN appliance) (NNS contacts)) (VP (VBP are) (VP deleted)))) (. .)) SentimentClass=Negative]","root(ROOT-0, includes-2)
nsubj(includes-2, This-1)
dobj(includes-2, changes-3)
advmod(added-8, when-4)
amod(contacts-6, new-5)
nsubjpass(added-8, contacts-6)
auxpass(added-8, are-7)
acl:relcl(changes-3, added-8)
punct(includes-2, ,-9)
amod(contacts-11, existing-10)
nsubjpass(edited-13, contacts-11)
auxpass(edited-13, are-12)
parataxis(includes-2, edited-13)
cc(edited-13, or-14)
conj(edited-13, updated-15)
punct(includes-2, ,-16)
compound(contacts-18, appliance-17)
nsubjpass(deleted-20, contacts-18)
auxpass(deleted-20, are-19)
parataxis(includes-2, deleted-20)
punct(includes-2, .-21)
","root(ROOT-0, includes-2)
nsubj(includes-2, This-1)
dobj(includes-2, changes-3)
advmod(added-8, when-4)
amod(contacts-6, new-5)
nsubjpass(added-8, contacts-6)
auxpass(added-8, are-7)
acl:relcl(changes-3, added-8)
punct(includes-2, ,-9)
amod(contacts-11, existing-10)
nsubjpass(edited-13, contacts-11)
nsubjpass(updated-15, contacts-11)
auxpass(edited-13, are-12)
parataxis(includes-2, edited-13)
cc(edited-13, or-14)
parataxis(includes-2, updated-15)
conj:or(edited-13, updated-15)
punct(includes-2, ,-16)
compound(contacts-18, appliance-17)
nsubjpass(deleted-20, contacts-18)
auxpass(deleted-20, are-19)
parataxis(includes-2, deleted-20)
punct(includes-2, .-21)
","root(ROOT-0, includes-2)
nsubj(includes-2, This-1)
dobj(includes-2, changes-3)
advmod(added-8, when-4)
amod(contacts-6, new-5)
nsubjpass(added-8, contacts-6)
auxpass(added-8, are-7)
acl:relcl(changes-3, added-8)
punct(includes-2, ,-9)
amod(contacts-11, existing-10)
nsubjpass(edited-13, contacts-11)
nsubjpass(updated-15, contacts-11)
auxpass(edited-13, are-12)
parataxis(includes-2, edited-13)
cc(edited-13, or-14)
parataxis(includes-2, updated-15)
conj:or(edited-13, updated-15)
punct(includes-2, ,-16)
compound(contacts-18, appliance-17)
nsubjpass(deleted-20, contacts-18)
auxpass(deleted-20, are-19)
parataxis(includes-2, deleted-20)
punct(includes-2, .-21)
","Negative"
